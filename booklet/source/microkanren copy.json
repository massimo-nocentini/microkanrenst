{	"classes" : {		"Eta" : {			"hash" : 2519296,			"definition" : "Suspended subclass: #Eta\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"Graph" : {			"hash" : 6566912,			"definition" : "Object subclass: #Graph\r\tinstanceVariableNames: 'vertices edges'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Unordered-Graph'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tedges:\t\t<Object>",				"\tvertices:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Collections-Unordered-Graph"		},		"AlphaRule" : {			"hash" : 6598144,			"definition" : "Goal subclass: #AlphaRule\r\tinstanceVariableNames: 'x y'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tx:\t\t<Object>",				"\ty:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"CombinatoricsTheoryTest" : {			"hash" : 2837760,			"definition" : "Srfi41AbstractTest subclass: #CombinatoricsTheoryTest\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Tests'",			"comment" : [				"This class contains tests"			],			"category" : "MicroKanren-Tests"		},		"Predicate" : {			"hash" : 2784256,			"definition" : "Goal subclass: #Predicate\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Predicates'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Predicates"		},		"GoalTest" : {			"hash" : 2838272,			"definition" : "Srfi41AbstractTest subclass: #GoalTest\r\tuses: TIceImagesExporting\r\tinstanceVariableNames: 'sexpTheory combTheory'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Tests'",			"comment" : [				"This class contains tests"			],			"category" : "MicroKanren-Tests"		},		"Object" : {			"hash" : 804608,			"definition" : "ProtoObject subclass: #Object\r\tinstanceVariableNames: ''\r\tclassVariableNames: 'DependentsFields'\r\tpackage: 'Kernel-Objects'",			"comment" : [				"`Object` is the root class for almost all of the other classes in the class hierarchy. The exceptions are ProtoObject (the superclass of Object) and its subclasses.",				"",				"Class `Object` provides default behavior common to all normal objects, such as access, copying, comparison, error handling, message sending, and reflection. Also utility messages that all objects should respond to are defined here.",				"",				"`Object` has no instance variables, nor should any be added. This is due to several classes of objects that inherit from Object that have special implementations (SmallInteger and UndefinedObject for example) or the VM knows about and depends on the structure and layout of certain standard classes.",				"",				"Class Variables:",				"\tDependentsFields\t\tan IdentityDictionary",				"\t\tProvides a virtual 'dependents' field so that any object may have one",				"\t\tor more dependent views, synchronized by the changed:/update: protocol.",				"\t\tNote that class Model has a real slot for its dependents, and overrides",				"\t\tthe associated protocol with more efficient implementations.",				"",				"Because `Object` is the root of the inheritance tree, methods are often defined in Object to give all objects special behaviors needed by certain subsystems or applications, or to respond to certain general test messages such as isMorph.",				"",				"",				"###Miscellanous Discussions",				"",				"About `at:` index accepting float and not only integers",				" ",				"This behavior is also free in the sense that the failure code is only invoked when the primitive fails and so adds nothing to the cost of successful accesses, which are the high dynamic frequency operation.  It will also show up under",				"profiling if one is concerned about efficiency, and so isn't a hidden cost.",				"",				"It is also in keeping with Pharo's mixed mode/arbitrary precision",				"implicit coercion number system that one *can* use fractions or floats as",				"indices.  Stripping out coercions like this will make the system more brittle.  So ",				"please do *not* remove this hack.  I think it's a feature and a useful one.",				"",				"Can you give me an example that demonstrates the usefulness of this feature?",				"",				"```",				"| a r |",				"a := Array new: 10 withAll: 0.",				"r := Random new.",				"100 timesRepeat: [| v | v := r next * 10 + 1. a at: v put: (a at: v) + 1].",				"a",				"```",				"",				"i.e. I didn't have to provide an explicit rounding step.  That's useful.  But in general anywhere ",				"where an index is derived by some calculation not having to provide the rounding step could be ",				"useful/helpful/more concise.  e.g. (n roundTo: 0.1) * 10 vs ((n roundTo: 0.1) * 10) asInteger.",				"",				"Some thought went into the original choice.  It is not a hack but there by intent.  The integers are ",				"simply a subset of the reals and forcing the programmer to use them is favouring the machine ",				"above the programmer.",				"",				"But I think you should justify getting rid of it rather than my having to justify keeping it.  Getting ",				"rid of it risks breaking code.  If it is there but does not harm then why get rid of it?",				"",				"best Eliot Miranda "			],			"category" : "Kernel-Objects"		},		"Failed" : {			"hash" : 2519808,			"definition" : "Atomic subclass: #Failed\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"TestAsserter" : {			"hash" : 353792,			"definition" : "Object subclass: #TestAsserter\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'SUnit-Core-Kernel'",			"comment" : [				"I understand methods beginning #assert:... and #deny:... (and my class-side understands #assert:description:).  I am the superclass of TestCase and TestResource and can also be the superclass of any test helper classes you create to factor out test behaviour.  I exist so that test code can be refactored between my subclasses without difficulty.",				"",				"Send #assert:description: when you want to check for an expected value. For example, you might say",				"\tself assert: socket isOpen description: 'We requested a socket but now it is not open'.",				"to test whether or not a socket is open at a point in a test.  Use description strings both to give more information about where a test failed in debugger notifiers and logs, and to document the intent of a test.  Other methods include #assert:, #assert:description:resumable:, #deny:, #deny:description:, #deny:description:resumable:, #should:raise:, #should:raise:description:, #shouldnt:raise:, #shouldnt:raise:description:.  All these methods are defined on the superclass, TestAsserter.  (Any convenience assertion methods you create for general use should also be defined in my 'convenience' protocol.)",				"",				"Override my class-side #isLogging in subclasses to have failed assertion descriptions shown on the Transcript.  To have them appear elsewhere, also override my class-side #failureLog."			],			"category" : "SUnit-Core-Kernel"		},		"TAssertable" : {			"hash" : 367104,			"definition" : "Trait named: #TAssertable\r\tpackage: 'SUnit-Core-Traits'",			"comment" : [				"I think it is not used yet. I think it is a Trait so that we can make things assertable and not need to subclass from TestCase for example. I may expect that TestCase uses such Trait instead of implementing all those methods,  but it is not the case. Even more, TAssertable users size -> 0. ",				"",				"So...seems a work half done. Adrian Kuhn introduce it. Check",				"http://forum.world.st/template/NamlServlet.jtp?macro=search_page&node=1294837&query=TAssertable"			],			"category" : "SUnit-Core-Traits"		},		"Succeed" : {			"hash" : 2547968,			"definition" : "Atomic subclass: #Succeed\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"Master" : {			"hash" : 2825984,			"definition" : "TablingCall subclass: #Master\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"RBSmalllintTestLocalMethodsSameThanTraitObject" : {			"hash" : 3960576,			"definition" : "RBSmalllintTestSuperclassObject subclass: #RBSmalllintTestLocalMethodsSameThanTraitObject\r\tuses: TAssertable\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Refactoring-Tests-Critics'",			"comment" : [				"This class should trigger the RBLocalMethodsSameThanTraitRule"			],			"category" : "Refactoring-Tests-Critics"		},		"Run" : {			"hash" : 2547456,			"definition" : "Goal subclass: #Run\r\tinstanceVariableNames: 'goal'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tgoal:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"MKSexpTest" : {			"hash" : 2846208,			"definition" : "Srfi41AbstractTest subclass: #MKSexpTest\r\tuses: TIceImagesExporting\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Tests'",			"comment" : [				"This class contains tests"			],			"category" : "MicroKanren-Tests"		},		"Cond" : {			"hash" : 6599680,			"definition" : "Goal subclass: #Cond\r\tinstanceVariableNames: 'clauses if'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tclauses:\t\t<Object>",				"\tif:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"TablingCall" : {			"hash" : 2548992,			"definition" : "Goal subclass: #TablingCall\r\tinstanceVariableNames: 'args cache'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\targs:\t\t<Object>",				"\tcache:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"True" : {			"hash" : 787712,			"definition" : "Boolean subclass: #True\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Objects'",			"comment" : [				"True defines the behavior of its single instance, true -- logical assertion. Notice how the truth-value checks become direct message sends, without the need for explicit testing.",				"",				"Be aware however that most of these methods are not sent as real messages in normal use. Most are inline coded by the compiler as test and jump bytecodes - avoiding the overhead of the full message sends. So simply redefining these methods here will have no effect."			],			"category" : "Kernel-Objects"		},		"Integer" : {			"hash" : 1013760,			"definition" : "Number subclass: #Integer\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Numbers'",			"comment" : [				"I am a common abstract superclass for all Integer implementations. My implementation subclasses are SmallInteger, LargePositiveInteger, and LargeNegativeInteger.",				"\t",				"Integer division consists of:",				"\t/\texact division, answers a fraction if result is not a whole integer",				"\t//\tanswers an Integer, rounded towards negative infinity",				"\t\\\\\tis modulo rounded towards negative infinity",				"\tquo: truncated division, rounded towards zero"			],			"category" : "Kernel-Numbers"		},		"Suspended" : {			"hash" : 3378176,			"definition" : "Goal subclass: #Suspended\r\tinstanceVariableNames: 'receiver nestedGoal'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tnestedGoal:\t\t<Object>",				"\treceiver:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"PredicateFindAllo" : {			"hash" : 2843648,			"definition" : "PredicateTernary subclass: #PredicateFindAllo\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Predicates'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Predicates"		},		"Atomic" : {			"hash" : 2770432,			"definition" : "Goal subclass: #Atomic\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"False" : {			"hash" : 787200,			"definition" : "Boolean subclass: #False\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Objects'",			"comment" : [				"False defines the behavior of its single instance, false -- logical negation. Notice how the truth-value checks become direct message sends, without the need for explicit testing.",				"",				"Be aware however that most of these methods are not sent as real messages in normal use. Most are inline coded by the compiler as test and jump bytecodes - avoiding the overhead of the full message sends. So simply redefining these methods here will have no effect."			],			"category" : "Kernel-Objects"		},		"Reuse" : {			"hash" : 2826496,			"definition" : "TablingCall subclass: #Reuse\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"Not" : {			"hash" : 3373056,			"definition" : "Goal subclass: #Not\r\tinstanceVariableNames: 'cuttingGoal'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tcuttingGoal:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"Boolean" : {			"hash" : 871680,			"definition" : "Object subclass: #Boolean\r\tinstanceVariableNames: ''\r\tclassVariableNames: 'DeOptimizeMustBeBoolean'\r\tpackage: 'Kernel-Objects'",			"comment" : [				"Boolean is an abstract class defining the protocol for logic testing operations and conditional control structures for the logical values represented by the instances of its subclasses True and False.",				"",				"Boolean redefines #new so no instances of Boolean can be created. It also redefines several messages in the 'copying' protocol to ensure that only one instance of each of its subclasses True (the global true, logical assertion) and False (the global false, logical negation) ever exist in the system."			],			"category" : "Kernel-Objects"		},		"Unify" : {			"hash" : 2827008,			"definition" : "Binary subclass: #Unify\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"Conj" : {			"hash" : 2518272,			"definition" : "Binary subclass: #Conj\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"Disj" : {			"hash" : 2518784,			"definition" : "Binary subclass: #Disj\r\tinstanceVariableNames: 'combineBlock'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tcombineBlock:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"Goal" : {			"hash" : 6597632,			"definition" : "Object subclass: #Goal\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"DTTestResultType class" : {			"hash" : 2965504,			"definition" : "DTTestResultType class\r\tinstanceVariableNames: ''",			"comment" : [				"I model an abstract type of result for the run of a test case."			],			"category" : "DrTests-TestsRunner"		},		"Var class" : {			"hash" : 6595328,			"definition" : "Var class\r\tinstanceVariableNames: ''",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren"		},		"Tabled" : {			"hash" : 2548480,			"definition" : "Goal subclass: #Tabled\r\tinstanceVariableNames: 'block args table'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\targs:\t\t<Object>",				"\tblock:\t\t<Object>",				"\ttable:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"PredicateBagOfo" : {			"hash" : 2789888,			"definition" : "PredicateTernary subclass: #PredicateBagOfo\r\tinstanceVariableNames: 'variables'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Predicates'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tvariables:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Predicates"		},		"State" : {			"hash" : 6594560,			"definition" : "Object subclass: #State\r\tinstanceVariableNames: 'substitution birthdate path'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tbirthdate:\t\t<Object>",				"\tpath:\t\t<Object>",				"\tsubstitution:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren"		},		"BlockClosure" : {			"hash" : 9472,			"definition" : "Object variableSubclass: #BlockClosure\r\tinstanceVariableNames: 'outerContext startpc numArgs'\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Methods'",			"comment" : [				"I contain a sequence of operations. I am defined by Smalltalk expressions inside square brackets. I permit to defer the enclosed operations until I execute a variant of #value. I can have my own arguments and temporaries as a regular method, but I am also able to use external variables: my enclosing method or block temporaries, arguments and receiver.",				"",				"examples :",				"[ 1 + 2 ] value",				"[ :arg | ",				"\t| temp | ",				"\ttemp := arg. ",				"\ttemp ] value: 5",				"[ ^ 5 ] value",				"",				"My return value corresponds to my final expression. A non local return (^) has the same effect as if I did not exist: it returns from my enclosing method, even if I'm nested in other blocks. ",				"",				"Implementation:",				"",				"Instance variables:",				"\touterContext <Context|nil> context that defined me",				"\tstartpc: <SmallInteger> (pc = program counter) offset of my first bytecode instruction in the compiledMethod bytecode  ",				"\tnumArgs: <SmallInteger> my number of arguments",				"",				"I am created at runtime through a special bytecode:",				"closureNumCopied: x numArgs: y bytes z1 to z2",				"On creation, the currently executed context is set to my outerContext, z1 is set as my startpc and y is set as my numArgs. After my creation, the current execution flow jumps to my last bytecode, z2, to skip the execution of my bytecode which is deferred until I execute a variant of #value.",				"",				"I am executed when I receive a variant of the message value. This message creates a new context, a block context <MethodContext>, which reference me in its variable closureOrNil. This new context executes my bytecode, which correspond to a subset of the bytecode of my enclosing method, starting at startpc and ending in blockReturn/return bytecode.",				"",				"Accessing variables of the my enclosing context is different depending on variables because of various optimizations:",				"- self: I access the receiver of my enclosing method by accessing my context's receiver, which is always set to the enclosing method receiver.",				"- copied variables: If I read a variable from an outerContext but I don't write into it and the variable is not modified after the BlockClosure creation, then the variable is copied in the blockClosure to be more efficient. ",				"- full variable: If I access and edit a variable from an outerContext, then the variable is stored in an external heap allocated array (named tempVector). The tempVector is known by the method and the block so they can both read and write these variables.",				"",				"Optimized block closures: ",				"Common blocks (2/3 of the blocks) are optimized directly in the compiler and have special behaviors. These blocks are the arguments/receiver of control structures: #ifNil:, #ifNotNil:, #ifTrue:, #ifFalse:, #whileTrue:, #whileFalse:, #to:do:, #to:by:do: ."			],			"category" : "Kernel-Methods"		},		"NumberParser" : {			"hash" : 1079040,			"definition" : "Object subclass: #NumberParser\r\tinstanceVariableNames: 'sourceStream base neg integerPart fractionPart exponent scale nDigits lastNonZero requestor failBlock'\r\tclassVariableNames: ''\r\tpackage: 'NumberParser-Base'",			"comment" : [				"NumberParser is an abstract class for parsing and building numbers from string/stream.",				"It offers a framework with utility methods and exception handling.",				"",				"Number syntax is not defined and should be subclassResponsibility.",				"",				"Instance variables:",				"sourceStream <Stream> the stream of characters from which the number is read",				"base <Integer> the radix in which to interpret digits",				"neg <Boolean> true in case of minus sign",				"integerPart <Integer> the integer part of the number",				"fractionPart <Integer> the fraction part of the number if any",				"exponent <Integer> the exponent used in scientific notation if any",				"scale <Integer> the scale used in case of ScaledDecimal number if any",				"nDigits <Integer> number of digits read to form an Integer",				"lasNonZero <Integer> position of last non zero digit, starting at 1 from left, 0 if all digits are zero",				"requestor <?> could eventually be used to insert an error message in a text editor",				"failBlock <BlockClosure> Block to execute whenever an error occurs"			],			"category" : "NumberParser-Base"		},		"Fresh" : {			"hash" : 2520320,			"definition" : "Suspended subclass: #Fresh\r\tinstanceVariableNames: 'variables'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tvariables:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"IfPure" : {			"hash" : 2537216,			"definition" : "If subclass: #IfPure\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"Cut" : {			"hash" : 3369216,			"definition" : "Goal subclass: #Cut\r\tinstanceVariableNames: 'cuttingGoal length'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tcuttingGoal:\t\t<Object>",				"\tlength:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		}	},	"messages" : {		"testDisjTrueTrue" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testDisjTrueTrue",						"",						"\t| g |",						"\tg := true asGoal | true asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { ",						"\t\t\t\tVar tautology.",						"\t\t\t\tVar tautology }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := true asGoal | true asGoal.",						"self",						"\tassert: g solutions",						"\tequals: { ",						"\t\t\tVar tautology.",						"\t\t\tVar tautology }",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3896661,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testUnifySymmetryVarWithFour" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testUnifySymmetryVarWithFour",						"",						"\t| g |",						"\tg := [ :q | q unifyo value: 4 ] asGoal.",						"\tself assert: g solutions equals: { 4 } modulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :q | q unifyo value: 4 ] asGoal.",						"self assert: g solutions equals: { 4 } modulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3896184,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testDisjThreeFourThenFive" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testDisjThreeFourThenFive",						"",						"\t| g |",						"\tg := [ :a | ",						"\t     (3 unifyo value: a) | (4 unifyo value: a) | (5 unifyo value: a) ]",						"\t\t     asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { 3. 5. 4 }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :a | ",						"     (3 unifyo value: a) | (4 unifyo value: a) | (5 unifyo value: a) ]",						"\t     asGoal.",						"self",						"\tassert: g solutions",						"\tequals: { 3. 5. 4 }",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3896317,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"nats:" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"nats: x",						"",						"\t^ self nats: x stage: 0"					],					"body" : [						"^ self nats: x stage: 0"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 20671521,					"argumentNames" : [						"x"					]				}			},			"senders" : [				"GoalTest>>#testNats"			]		},		"fresh" : {			"implementors" : { },			"senders" : [ ]		},		"testConjTrueThreeWithThree" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testConjTrueThreeWithThree",						"",						"\t| g |",						"\tg := [ :q | true asGoal , (3 unifyo value: 3) ] asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { 0 asReifiedVar }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :q | true asGoal , (3 unifyo value: 3) ] asGoal.",						"self",						"\tassert: g solutions",						"\tequals: { 0 asReifiedVar }",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3896361,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testConjFailingSharing" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testConjFailingSharing",						"",						"\t| g |",						"\tg := [ :x :y :z | ",						"\t     (3 unifyo value: x) , (z unifyo value: x) , (z unifyo value: 4) ]",						"\t\t     asGoal.",						"\tself assert: g solutions equals: #(  ) modulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :x :y :z | ",						"     (3 unifyo value: x) , (z unifyo value: x) , (z unifyo value: 4) ]",						"\t     asGoal.",						"self assert: g solutions equals: #(  ) modulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3895822,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testFreshMultipleVars" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testFreshMultipleVars",						"",						"\t| g |",						"\tg := [ :q :r | true asGoal ] asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: (Array with: { ",						"\t\t\t\t\t 0 asReifiedVar.",						"\t\t\t\t\t 1 asReifiedVar })",						"\t\tmodulo: #asOrderedCollection. \" an Array(an Array(•₀ •₁))\"",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :q :r | true asGoal ] asGoal.",						"self",						"\tassert: g solutions",						"\tequals: (Array with: { ",						"\t\t\t\t 0 asReifiedVar.",						"\t\t\t\t 1 asReifiedVar })",						"\tmodulo: #asOrderedCollection. \" an Array(an Array(•₀ •₁))\"",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3896804,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"nats:stage:offset:" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"nats: x stage: i offset: o",						"",						"\t^ (x unifyo value: i)",						"\t  | [ self nats: x stage: i + o offset: o ] asGoal"					],					"body" : [						"^ (x unifyo value: i) | [ self nats: x stage: i + o offset: o ] asGoal"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 54751024,					"argumentNames" : [						"x",						"i",						"o"					]				}			},			"senders" : [				"GoalTest>>#nats:stage:offset:",				"GoalTest>>#repeat:value:",				"GoalTest>>#nats:stage:"			]		},		"onState:afterPushingGoal:" : {			"implementors" : {				"Suspended" : {					"sourceCode" : [						"onState: aState afterPushingGoal: _",						"",						"\t^ [ nestedGoal onState: aState ] srfi41Stream"					],					"body" : [						"^ [ nestedGoal onState: aState ] srfi41Stream"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 38250866,					"argumentNames" : [						"aState",						"_"					]				},				"Conj" : {					"sourceCode" : [						"onState: aState afterPushingGoal: _",						"",						"\t^ [ :refinedState | ",						"\t  refinedState path value in: [ :aGoal | ",						"\t\t  aGoal onState: refinedState forGoal: right fromConj: self ] ]",						"\t  >>= (left onState: aState)"					],					"body" : [						"^ [ :refinedState | ",						"  refinedState path value in: [ :aGoal | ",						"\t  aGoal onState: refinedState forGoal: right fromConj: self ] ]",						"  >>= (left onState: aState)"					],					"category" : "running",					"comment" : [ ],					"hash" : 37391142,					"argumentNames" : [						"aState",						"_"					]				},				"Succeed" : {					"sourceCode" : [						"onState: aState afterPushingGoal: aGoal",						"",						"\t<doc: #Realog topic: #( Succeed onState )>",						"\t^ super onState: aState afterPushingGoal: aGoal"					],					"body" : [						"^ super onState: aState afterPushingGoal: aGoal"					],					"category" : "running",					"comment" : [ ],					"hash" : 37420640,					"argumentNames" : [						"aState",						"aGoal"					]				},				"Goal" : {					"sourceCode" : [						"onState: aState afterPushingGoal: aGoal",						"",						"\tself subclassResponsibility"					],					"body" : [						"self subclassResponsibility"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 41470276,					"argumentNames" : [						"aState",						"aGoal"					]				},				"Cond" : {					"sourceCode" : [						"onState: aState afterPushingGoal: _",						"",						"\t^ [ ",						"\t  | g |",						"\t  g := clauses foldr: if init: false asGoal.",						"\t  g onState: aState ] srfi41Stream"					],					"body" : [						"^ [ ",						"  | g |",						"  g := clauses foldr: if init: false asGoal.",						"  g onState: aState ] srfi41Stream"					],					"category" : "running",					"comment" : [ ],					"hash" : 41472370,					"argumentNames" : [						"aState",						"_"					]				},				"Atomic" : {					"sourceCode" : [						"onState: aState afterPushingGoal: aGoal",						"",						"\t^ aState srfi41Singleton"					],					"body" : [						"^ aState srfi41Singleton"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 37642851,					"argumentNames" : [						"aState",						"aGoal"					]				},				"Disj" : {					"sourceCode" : [						"onState: aState afterPushingGoal: _",						"",						"\t| aStream anotherStream |",						"\taStream := left onState: aState.",						"\tanotherStream := right onState: aState.",						"\t^ combineBlock value: aStream value: anotherStream"					],					"body" : [						"| aStream anotherStream |",						"aStream := left onState: aState.",						"anotherStream := right onState: aState.",						"^ combineBlock value: aStream value: anotherStream"					],					"category" : "running",					"comment" : [ ],					"hash" : 37916460,					"argumentNames" : [						"aState",						"_"					]				},				"IfPure" : {					"sourceCode" : [						"onState: aState afterPushingGoal: _",						"",						"\t| disj |",						"\tdisj := chainCombinationStrategy value",						"\t\t        left: question , answer;",						"\t\t        right: otherwise;",						"\t\t        yourself.",						"",						"\t^ disj onState: aState"					],					"body" : [						"| disj |",						"disj := chainCombinationStrategy value",						"\t        left: question , answer;",						"\t        right: otherwise;",						"\t        yourself.",						"",						"^ disj onState: aState"					],					"category" : "running",					"comment" : [ ],					"hash" : 37673449,					"argumentNames" : [						"aState",						"_"					]				},				"Unify" : {					"sourceCode" : [						"onState: aState afterPushingGoal: aGoal",						"",						"\t| aStateOrException |",						"\taStateOrException := Continuation currentDo: [ :k | ",						"\t\t                     aState unifier",						"\t\t\t                     continuation: k;",						"\t\t\t                     value: left value: right ].",						"\t^ aStateOrException onState: aState afterUnificationByUnify: self"					],					"body" : [						"| aStateOrException |",						"aStateOrException := Continuation currentDo: [ :k | ",						"\t                     aState unifier",						"\t\t                     continuation: k;",						"\t\t                     value: left value: right ].",						"^ aStateOrException onState: aState afterUnificationByUnify: self"					],					"category" : "running",					"comment" : [ ],					"hash" : 37962495,					"argumentNames" : [						"aState",						"aGoal"					]				}			},			"senders" : [				"Goal>>#onState:",				"Succeed>>#onState:afterPushingGoal:"			]		},		"testFreshFailed" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testFreshFailed",						"",						"\t| g |",						"\tg := [ :q | false asGoal ] asGoal.",						"\tself assert: g solutions equals: #(  ) modulo: #asOrderedCollection. \" #()\"",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :q | false asGoal ] asGoal.",						"self assert: g solutions equals: #(  ) modulo: #asOrderedCollection. \" #()\"",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3895822,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testUnifyWithTopmostWithoutSharing" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testUnifyWithTopmostWithoutSharing",						"",						"\t| g |",						"\tg := [ :r | ",						"\t     [ :x :y | ",						"\t     (LinkedList with: x with: r) asCons unifyo value:",						"\t\t     (LinkedList with: 1 with: y) asCons ] asGoal ] asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { 0 asReifiedVar }",						"\t\tmodulo: #asOrderedCollection. \" an Array(•₀)\"",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :r | ",						"     [ :x :y | ",						"     (LinkedList with: x with: r) asCons unifyo value:",						"\t     (LinkedList with: 1 with: y) asCons ] asGoal ] asGoal.",						"self",						"\tassert: g solutions",						"\tequals: { 0 asReifiedVar }",						"\tmodulo: #asOrderedCollection. \" an Array(•₀)\"",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3896361,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"onState:withVars:" : {			"implementors" : {				"Fresh" : {					"sourceCode" : [						"onState: aState withVars: aCollection",						"",						"\tvariables := aCollection.",						"\tnestedGoal := receiver valueWithArguments: self variables.",						"\t^ super onState: aState"					],					"body" : [						"variables := aCollection.",						"nestedGoal := receiver valueWithArguments: self variables.",						"^ super onState: aState"					],					"category" : "dispatched",					"comment" : [ ],					"hash" : 37393799,					"argumentNames" : [						"aState",						"aCollection"					]				}			},			"senders" : [				"State>>#collectVars:forFresh:"			]		},		"testFreshSucceed" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testFreshSucceed",						"",						"\t| g |",						"\tg := [ :q | true asGoal ] asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { 0 asReifiedVar }",						"\t\tmodulo: #asOrderedCollection. \" an Array(•₀)\"",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :q | true asGoal ] asGoal.",						"self",						"\tassert: g solutions",						"\tequals: { 0 asReifiedVar }",						"\tmodulo: #asOrderedCollection. \" an Array(•₀)\"",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3896361,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"popGoalFromPathOfState:forConj:" : {			"implementors" : {				"Succeed" : {					"sourceCode" : [						"popGoalFromPathOfState: aState forConj: aGoal",						"",						"\taState path: aState path nextLink"					],					"body" : [						"aState path: aState path nextLink"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 37420976,					"argumentNames" : [						"aState",						"aGoal"					]				},				"Goal" : {					"sourceCode" : [						"popGoalFromPathOfState: aState forConj: aGoal",						"",						"\t\"No action for the generic goal because if I am the top of `aState`'s goal path,",						"\t I have to remain there with respect to the computation running in the",						"\t conjunction goal `aGoal`.\"",						"",						"\t"					],					"body" : [ ],					"category" : "as yet unclassified",					"comment" : [						"No action for the generic goal because if I am the top of `aState`'s goal path,",						"\t I have to remain there with respect to the computation running in the",						"\t conjunction goal `aGoal`."					],					"hash" : 41469836,					"argumentNames" : [						"aState",						"aGoal"					]				}			},			"senders" : [				"Goal>>#onState:forGoal:fromConj:"			]		},		"onState:" : {			"implementors" : {				"Reuse" : {					"sourceCode" : [						"onState: aState",						"",						"\t| fix |",						"\tfix := nil.",						"\tfix := [ :start :end | ",						"\t       | loop |",						"\t       loop := nil.",						"\t       loop := [ :answers | ",						"\t               answers = end",						"\t\t               ifTrue: [ ",						"\t\t\t               | data alpha |",						"\t\t\t               data := cache cons: start.",						"\t\t\t               alpha := data cons: [ fix value: cache value: start ].",						"\t\t\t               Waiting new",						"\t\t\t\t               streams: { alpha };",						"\t\t\t\t               \"one element list\"yourself ]",						"\t\t               ifFalse: [ ",						"\t\t\t               | reifiedAnswer combinator |",						"\t\t\t               reifiedAnswer := (aState trasparentReifier ",						"\t\t\t\t                                 reifyVars: { answers first })",						"\t\t\t\t                                first.",						"",						"\t\t\t               \"Just use standard unification for now,",						"\t\t\t\t\t\t\t`subunify` will follow.\"",						"\t\t\t               combinator := [ ",						"\t\t\t                             (args unifyo value: reifiedAnswer) ",						"\t\t\t\t                             onState: aState ] suspended mplus: [ ",						"\t\t\t\t                             loop value: answers allButFirst ].",						"\t\t\t               Sequential new of: combinator ] ].",						"\t       loop value: start ].",						"\t^ fix value: cache value: LinkedList new"					],					"body" : [						"| fix |",						"fix := nil.",						"fix := [ :start :end | ",						"       | loop |",						"       loop := nil.",						"       loop := [ :answers | ",						"               answers = end",						"\t               ifTrue: [ ",						"\t\t               | data alpha |",						"\t\t               data := cache cons: start.",						"\t\t               alpha := data cons: [ fix value: cache value: start ].",						"\t\t               Waiting new",						"\t\t\t               streams: { alpha };",						"\t\t\t               \"one element list\"yourself ]",						"\t               ifFalse: [ ",						"\t\t               | reifiedAnswer combinator |",						"\t\t               reifiedAnswer := (aState trasparentReifier ",						"\t\t\t                                 reifyVars: { answers first })",						"\t\t\t                                first.",						"",						"\t\t               \"Just use standard unification for now,",						"\t\t\t\t\t\t\t`subunify` will follow.\"",						"\t\t               combinator := [ ",						"\t\t                             (args unifyo value: reifiedAnswer) ",						"\t\t\t                             onState: aState ] suspended mplus: [ ",						"\t\t\t                             loop value: answers allButFirst ].",						"\t\t               Sequential new of: combinator ] ].",						"       loop value: start ].",						"^ fix value: cache value: LinkedList new"					],					"category" : "accessing",					"comment" : [ ],					"hash" : 20923525,					"argumentNames" : [						"aState"					]				},				"AlphaRule" : {					"sourceCode" : [						"onState: aState",						"",						"\t^ [ ",						"\t  (x isAlphaEquivalentTo: y inState: aState) asGoal onState: aState ]",						"\t\t  srfi41Stream"					],					"body" : [						"^ [ (x isAlphaEquivalentTo: y inState: aState) asGoal onState: aState ]",						"\t  srfi41Stream"					],					"category" : "running",					"comment" : [ ],					"hash" : 24431474,					"argumentNames" : [						"aState"					]				},				"Fresh" : {					"sourceCode" : [						"onState: aState",						"",						"\t^ aState collectVars: (1 to: receiver numArgs) forFresh: self"					],					"body" : [						"^ aState collectVars: (1 to: receiver numArgs) forFresh: self"					],					"category" : "running",					"comment" : [ ],					"hash" : 20353882,					"argumentNames" : [						"aState"					]				},				"Not" : {					"sourceCode" : [						"onState: aState",						"",						"\t^ ((cuttingGoal onState: aState)",						"\t\t   ifEmpty: [ true asGoal ]",						"\t\t   ifNotEmpty: [ false asGoal ]) onState: aState"					],					"body" : [						"^ ((cuttingGoal onState: aState)",						"\t   ifEmpty: [ true asGoal ]",						"\t   ifNotEmpty: [ false asGoal ]) onState: aState"					],					"category" : "running",					"comment" : [ ],					"hash" : 21207064,					"argumentNames" : [						"aState"					]				},				"Eta" : {					"sourceCode" : [						"onState: aState",						"",						"\t^ [ ",						"\t  nestedGoal := receiver value.",						"\t  super onState: aState ] srfi41Stream"					],					"body" : [						"^ [ ",						"  nestedGoal := receiver value.",						"  super onState: aState ] srfi41Stream"					],					"category" : "running",					"comment" : [ ],					"hash" : 20352626,					"argumentNames" : [						"aState"					]				},				"Master" : {					"sourceCode" : [						"onState: aState",						"",						"\t| allSatisfied |",						"\tallSatisfied := cache allSatisfy: [ :answers | ",						"\t\t                (args isAlphaEquivalentTo: answers inState: aState)",						"\t\t\t                not ].",						"\t\"possibly change to `any`\"",						"\tallSatisfied ifTrue: [ ",						"\t\tcache addFirst: (aState trasparentReifier reifyVars: args) ]. \"`#addFirst` is the counter part of `cons`.\"",						"\t^ allSatisfied asGoal onState: aState"					],					"body" : [						"| allSatisfied |",						"allSatisfied := cache allSatisfy: [ :answers | ",						"\t                (args isAlphaEquivalentTo: answers inState: aState)",						"\t\t                not ].",						"\"possibly change to `any`\"",						"allSatisfied ifTrue: [ ",						"\tcache addFirst: (aState trasparentReifier reifyVars: args) ]. \"`#addFirst` is the counter part of `cons`.\"",						"^ allSatisfied asGoal onState: aState"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 20923182,					"argumentNames" : [						"aState"					]				},				"TablingCall" : {					"sourceCode" : [						"onState: aState",						"",						"\tself subclassResponsibility"					],					"body" : [						"self subclassResponsibility"					],					"category" : "accessing",					"comment" : [ ],					"hash" : 20382276,					"argumentNames" : [						"aState"					]				},				"Run" : {					"sourceCode" : [						"onState: aState",						"",						"\t| aStream vars selector |",						"\taStream := goal onState: aState.",						"\tvars := goal variables ifEmpty: [ { Var tautology } ].",						"\tselector := vars size = 1",						"\t\t            ifTrue: [ #first ]",						"\t\t            ifFalse: [ #yourself ].",						"\t^ (aStream select: [ :each | each isSound ]) collect: [ :s | ",						"\t\t  selector value: (s reifier reifyVars: vars) ]"					],					"body" : [						"| aStream vars selector |",						"aStream := goal onState: aState.",						"vars := goal variables ifEmpty: [ { Var tautology } ].",						"selector := vars size = 1",						"\t            ifTrue: [ #first ]",						"\t            ifFalse: [ #yourself ].",						"^ (aStream select: [ :each | each isSound ]) collect: [ :s | ",						"\t  selector value: (s reifier reifyVars: vars) ]"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 21170140,					"argumentNames" : [						"aState"					]				},				"Goal" : {					"sourceCode" : [						"onState: aState",						"",						"\t<doc: #Realog topic: #( Gaol onState )>",						"\t| aGoal |",						"\taGoal := self copy.",						"\t^ self onState: (aState pushGoal: aGoal) afterPushingGoal: aGoal"					],					"body" : [						"| aGoal |",						"aGoal := self copy.",						"^ self onState: (aState pushGoal: aGoal) afterPushingGoal: aGoal"					],					"category" : "running",					"comment" : [ ],					"hash" : 24693674,					"argumentNames" : [						"aState"					]				},				"Predicate" : {					"sourceCode" : [						"onState: aState",						"",						"\t^ self goal onState: aState"					],					"body" : [						"^ self goal onState: aState"					],					"category" : "running",					"comment" : [ ],					"hash" : 20617555,					"argumentNames" : [						"aState"					]				},				"Tabled" : {					"sourceCode" : [						"onState: aState",						"",						"\t| key |",						"\tkey := aState reifier reifyVars: args.",						"\t^ table",						"\t\t  at: key",						"\t\t  ifPresent: [ :cache | ",						"\t\t\t  | r |",						"\t\t\t  r := Reuse new",						"\t\t\t\t       args: args;",						"\t\t\t\t       cache: cache;",						"\t\t\t\t       yourself.",						"\t\t\t  r onState: aState ]",						"\t\t  ifAbsent: [ ",						"\t\t\t  | cache g m |",						"\t\t\t  cache := LinkedList new.",						"\t\t\t  table at: key put: cache.",						"\t\t\t  g := block valueWithArguments: args.",						"\t\t\t  m := Master new",						"\t\t\t\t       args: args;",						"\t\t\t\t       cache: cache;",						"\t\t\t\t       yourself.",						"\t\t\t  g , m onState: aState ]"					],					"body" : [						"| key |",						"key := aState reifier reifyVars: args.",						"^ table",						"\t  at: key",						"\t  ifPresent: [ :cache | ",						"\t\t  | r |",						"\t\t  r := Reuse new",						"\t\t\t       args: args;",						"\t\t\t       cache: cache;",						"\t\t\t       yourself.",						"\t\t  r onState: aState ]",						"\t  ifAbsent: [ ",						"\t\t  | cache g m |",						"\t\t  cache := LinkedList new.",						"\t\t  table at: key put: cache.",						"\t\t  g := block valueWithArguments: args.",						"\t\t  m := Master new",						"\t\t\t       args: args;",						"\t\t\t       cache: cache;",						"\t\t\t       yourself.",						"\t\t  g , m onState: aState ]"					],					"category" : "running",					"comment" : [ ],					"hash" : 20645157,					"argumentNames" : [						"aState"					]				},				"PredicateFindAllo" : {					"sourceCode" : [						"onState: aState",						"",						"\t| states aGoal aCons |",						"\tstates := ((firstArgument onState: aState) select: [ :each | ",						"\t\t           each isSound ]) asOrderedCollection.",						"",						"\taCons := (states collect: [ :each | ",						"\t\t          each walker value: secondArgument ]) asCons.",						"",						"\taGoal := aCons unifyo value: thirdArgument.",						"",						"\t^ aGoal onState: aState"					],					"body" : [						"| states aGoal aCons |",						"states := ((firstArgument onState: aState) select: [ :each | ",						"\t           each isSound ]) asOrderedCollection.",						"",						"aCons := (states collect: [ :each | each walker value: secondArgument ])",						"\t         asCons.",						"",						"aGoal := aCons unifyo value: thirdArgument.",						"",						"^ aGoal onState: aState"					],					"category" : "running",					"comment" : [ ],					"hash" : 21465654,					"argumentNames" : [						"aState"					]				},				"PredicateBagOfo" : {					"sourceCode" : [						"onState: aState",						"",						"\t| aDictionary aGoal |",						"\taDictionary := ((firstArgument onState: aState) select: [ :each | ",						"\t\t                each isSound ])",						"\t\t               foldrStrict: [ :each :aDict | ",						"\t\t\t               | walker walkedTemplate key |",						"\t\t\t               walker := each walker.",						"\t\t\t               walkedTemplate := walker value: secondArgument.",						"\t\t\t               key := walker value: variables.",						"\t\t\t               aDict",						"\t\t\t\t               at: key",						"\t\t\t\t               ifPresent: [ :aCons | ",						"\t\t\t\t\t               aDict at: key put: (walkedTemplate cons: aCons) ]",						"\t\t\t\t               ifAbsentPut: [ walkedTemplate cons: nil ];",						"\t\t\t\t               yourself ]",						"\t\t               init: [ Dictionary new ].",						"",						"\taGoal := aDictionary ifEmpty: [ false asGoal ] ifNotEmpty: [ ",						"\t\t         aDictionary associations",						"\t\t\t         foldr: [ :each :aDisj | ",						"\t\t\t\t         (variables unifyo value: each key)",						"\t\t\t\t         , (each value asCons unifyo value: thirdArgument) | aDisj ]",						"\t\t\t         init: false asGoal ].",						"",						"\t^ aGoal onState: aState"					],					"body" : [						"| aDictionary aGoal |",						"aDictionary := ((firstArgument onState: aState) select: [ :each | ",						"\t                each isSound ])",						"\t               foldrStrict: [ :each :aDict | ",						"\t\t               | walker walkedTemplate key |",						"\t\t               walker := each walker.",						"\t\t               walkedTemplate := walker value: secondArgument.",						"\t\t               key := walker value: variables.",						"\t\t               aDict",						"\t\t\t               at: key",						"\t\t\t               ifPresent: [ :aCons | ",						"\t\t\t\t               aDict at: key put: (walkedTemplate cons: aCons) ]",						"\t\t\t               ifAbsentPut: [ walkedTemplate cons: nil ];",						"\t\t\t               yourself ]",						"\t               init: [ Dictionary new ].",						"",						"aGoal := aDictionary ifEmpty: [ false asGoal ] ifNotEmpty: [ ",						"\t         aDictionary associations",						"\t\t         foldr: [ :each :aDisj | ",						"\t\t\t         (variables unifyo value: each key)",						"\t\t\t         , (each value asCons unifyo value: thirdArgument) | aDisj ]",						"\t\t         init: false asGoal ].",						"",						"^ aGoal onState: aState"					],					"category" : "running",					"comment" : [ ],					"hash" : 21149982,					"argumentNames" : [						"aState"					]				},				"Cut" : {					"sourceCode" : [						"onState: aState",						"",						"\t| cuttingStream |",						"\tcuttingStream := (cuttingGoal onState: aState)",						"\t\t                 ifEmpty: [ aState srfi41Singleton ]",						"\t\t                 ifNotEmpty: [ :aStream | aStream next: length ].",						"\t^ (super onState: aState) , cuttingStream"					],					"body" : [						"| cuttingStream |",						"cuttingStream := (cuttingGoal onState: aState)",						"\t                 ifEmpty: [ aState srfi41Singleton ]",						"\t                 ifNotEmpty: [ :aStream | aStream next: length ].",						"^ (super onState: aState) , cuttingStream"					],					"category" : "running",					"comment" : [ ],					"hash" : 21466046,					"argumentNames" : [						"aState"					]				}			},			"senders" : [				"AlphaRule>>#onState:",				"Cond>>#onState:afterPushingGoal:",				"Conj>>#onState:afterPushingGoal:",				"Cut>>#onState:",				"Disj>>#onState:afterPushingGoal:",				"Eta>>#onState:",				"Fresh>>#onState:withVars:",				"Goal>>#asStatesStream",				"Goal>>#onState:forGoal:fromConj:",				"GoalTest>>#testSucceedInvariant",				"IfPure>>#onState:afterPushingGoal:",				"Master>>#onState:",				"Not>>#onState:",				"Predicate>>#onState:",				"PredicateBagOfo>>#onState:",				"PredicateFindAllo>>#onState:",				"Reuse>>#onState:",				"Run>>#onState:",				"State>>#onState:afterUnificationByUnify:",				"Suspended>>#onState:afterPushingGoal:",				"Tabled>>#onState:",				"UnificationError>>#onState:afterUnificationByUnify:"			]		},		"testACORN" : {			"implementors" : {				"MKSexpTest" : {					"sourceCode" : [						"testACORN",						"",						"\t| g |",						"\tg := [ :r | MKPredicateSexpCaro value: 'acorn' asCons value: r ]",						"\t\t     asGoal.",						"\tself assert: g solutions equals: { $a } modulo: #asOrderedCollection.",						"",						"\t\"Export it.\"",						"\tself",						"\t\texport: (g asLogicComputationTreeLimitedTo: -1)",						"\t\tpathSuffix: 'sexp-acorn'",						"\t\tselector: #gtInspectorTreeUsingCanvas:"					],					"body" : [						"| g |",						"g := [ :r | MKPredicateSexpCaro value: 'acorn' asCons value: r ]",						"\t     asGoal.",						"self assert: g solutions equals: { $a } modulo: #asOrderedCollection.",						"",						"\"Export it.\"",						"self",						"\texport: (g asLogicComputationTreeLimitedTo: -1)",						"\tpathSuffix: 'sexp-acorn'",						"\tselector: #gtInspectorTreeUsingCanvas:"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3904770,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"unify:with:" : {			"implementors" : { },			"senders" : [ ]		},		"tautology" : {			"implementors" : {				"Var class" : {					"sourceCode" : [						"tautology",						"",						"\t^ #tautology"					],					"body" : [						"^ #tautology"					],					"category" : "creating",					"comment" : [ ],					"hash" : 7388866,					"argumentNames" : [ ]				}			},			"senders" : [				"ArithTest>>#testSucco",				"ArithTest>>#testGreaterThanOneo",				"ArithTest>>#testPositiveo",				"GoalTest>>#testUnifyThreeWithThree",				"GoalTest>>#testLolo",				"GoalTest>>#testLengtho",				"GoalTest>>#testAlphaRuleo",				"GoalTest>>#testConde",				"GoalTest>>#testSucceed",				"GoalTest>>#testConjTrueTrue",				"GoalTest>>#testDisjTrueFalse",				"GoalTest>>#testDisjTrueTrue",				"GoalTest>>#testCdro",				"MKRealogTest>>#testCheckSingleEmployment",				"MonteCarloLockTest>>#testSimpleRules",				"Run>>#onState:",				"Var class>>#tautology"			]		},		"testFailed" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testFailed",						"",						"\t| g |",						"\tg := false asGoal.",						"\tself assert: g solutions equals: #(  ) modulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := false asGoal.",						"self assert: g solutions equals: #(  ) modulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3895618,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"onState:forGoal:fromConj:" : {			"implementors" : {				"Failed" : {					"sourceCode" : [						"onState: refinedState forGoal: right fromConj: aConj",						"",						"\t^ refinedState srfi41Singleton"					],					"body" : [						"^ refinedState srfi41Singleton"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 54431587,					"argumentNames" : [						"refinedState",						"right",						"aConj"					]				},				"Goal" : {					"sourceCode" : [						"onState: refinedState forGoal: aGoal fromConj: aConj",						"",						"\tself popGoalFromPathOfState: refinedState forConj: aConj. \"this message should be removed to be full explicit.\"",						"\t^ aGoal onState: refinedState"					],					"body" : [						"self popGoalFromPathOfState: refinedState forConj: aConj. \"this message should be removed to be full explicit.\"",						"^ aGoal onState: refinedState"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 58510098,					"argumentNames" : [						"refinedState",						"aGoal",						"aConj"					]				}			},			"senders" : [				"Conj>>#onState:afterPushingGoal:"			]		},		"testUnifyWithTopmostSharingWithRepetition" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testUnifyWithTopmostSharingWithRepetition",						"",						"\t| g |",						"\tg := [ :r | ",						"\t     [ :x :y | ",						"\t     (LinkedList",						"\t\t      with: x",						"\t\t      with: y",						"\t\t      with: x",						"\t\t      with: y) asCons unifyo value: r ] asGoal ] asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { ",						"\t\t\t\t0 asReifiedVar.",						"\t\t\t\t1 asReifiedVar.",						"\t\t\t\t0 asReifiedVar.",						"\t\t\t\t1 asReifiedVar } asCons",						"\t\tmodulo: #asOrderedCollection. \" (•₀ •₁ •₀ •₁)\"",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :r | ",						"     [ :x :y | ",						"     (LinkedList",						"\t      with: x",						"\t      with: y",						"\t      with: x",						"\t      with: y) asCons unifyo value: r ] asGoal ] asGoal.",						"self",						"\tassert: g solutions",						"\tequals: { ",						"\t\t\t0 asReifiedVar.",						"\t\t\t1 asReifiedVar.",						"\t\t\t0 asReifiedVar.",						"\t\t\t1 asReifiedVar } asCons",						"\tmodulo: #asOrderedCollection. \" (•₀ •₁ •₀ •₁)\"",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3897166,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testConjTrueTrue" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testConjTrueTrue",						"",						"\t| g |",						"\tg := true asGoal , true asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { Var tautology }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := true asGoal , true asGoal.",						"self",						"\tassert: g solutions",						"\tequals: { Var tautology }",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3896507,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testConjThreeFourWithTwoVars" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testConjThreeFourWithTwoVars",						"",						"\t| g |",						"\tg := [ :a :b | (3 unifyo value: a) , (4 unifyo value: b) ] asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { { 3. 4 } }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :a :b | (3 unifyo value: a) , (4 unifyo value: b) ] asGoal.",						"self",						"\tassert: g solutions",						"\tequals: { { 3. 4 } }",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3896612,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testFivesByPredicate" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testFivesByPredicate",						"",						"\t| g |",						"\tg := [ :r | MKPredicateFives value: r ] asGoal.",						"\tself",						"\t\tassert: (g solutions next: 10)",						"\t\tequals: { 5. 5. 5. 5. 5. 5. 5. 5. 5. 5 }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: 10"					],					"body" : [						"| g |",						"g := [ :r | MKPredicateFives value: r ] asGoal.",						"self",						"\tassert: (g solutions next: 10)",						"\tequals: { 5. 5. 5. 5. 5. 5. 5. 5. 5. 5 }",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: 10"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3896755,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testUnifyThreeWithThree" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testUnifyThreeWithThree",						"",						"\t| g |",						"\tg := 3 unifyo value: 3.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { Var tautology }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := 3 unifyo value: 3.",						"self",						"\tassert: g solutions",						"\tequals: { Var tautology }",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3896266,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testDisjThreeWithVarOrFourWithVar" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testDisjThreeWithVarOrFourWithVar",						"",						"\t| g |",						"\tg := [ :a | (3 unifyo value: a) | (4 unifyo value: a) ] asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { 3. 4 }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :a | (3 unifyo value: a) | (4 unifyo value: a) ] asGoal.",						"self assert: g solutions equals: { 3. 4 } modulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3896250,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"fives:" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"fives: x",						"",						"\t^ (5 unifyo value: x) | [ self fives: x ] asGoal"					],					"body" : [						"^ (5 unifyo value: x) | [ self fives: x ] asGoal"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 20672157,					"argumentNames" : [						"x"					]				}			},			"senders" : [				"GoalTest>>#testConde",				"GoalTest>>#swappedfives:",				"GoalTest>>#fives:",				"GoalTest>>#testFives"			]		},		"testFivesByNats" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testFivesByNats",						"",						"\t| g |",						"\tg := [ :x | self repeat: x value: 5 ] asGoal.",						"\tself",						"\t\tassert: (g solutions next: 10)",						"\t\tequals: { 5. 5. 5. 5. 5. 5. 5. 5. 5. 5 }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: 10"					],					"body" : [						"| g |",						"g := [ :x | self repeat: x value: 5 ] asGoal.",						"self",						"\tassert: (g solutions next: 10)",						"\tequals: { 5. 5. 5. 5. 5. 5. 5. 5. 5. 5 }",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: 10"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3896755,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testDisjThreeWithVarOrThreeWithVar" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testDisjThreeWithVarOrThreeWithVar",						"",						"\t| g |",						"\tg := [ :a | (3 unifyo value: a) | (3 unifyo value: a) ] asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { 3. 3 }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :a | (3 unifyo value: a) | (3 unifyo value: a) ] asGoal.",						"self assert: g solutions equals: { 3. 3 } modulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3896221,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testUnifyWithTopmostSharing" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testUnifyWithTopmostSharing",						"",						"\t| g |",						"\tg := [ :r | ",						"\t     [ :x :y | r unifyo value: (Array with: x with: y) asCons ]",						"\t\t     asGoal ] asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { ",						"\t\t\t\t0 asReifiedVar.",						"\t\t\t\t1 asReifiedVar } asCons",						"\t\tmodulo: #asOrderedCollection. \" (•₀ •₁)\"",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :r | ",						"     [ :x :y | r unifyo value: (Array with: x with: y) asCons ] asGoal ]",						"\t     asGoal.",						"self",						"\tassert: g solutions",						"\tequals: { ",						"\t\t\t0 asReifiedVar.",						"\t\t\t1 asReifiedVar } asCons",						"\tmodulo: #asOrderedCollection. \" (•₀ •₁)\"",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3896737,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testAppendoBackward" : {			"implementors" : {				"MKSexpTest" : {					"sourceCode" : [						"testAppendoBackward",						"",						"\t| g |",						"\tg := [ :l :r | ",						"\t     SexpTheory new appendo",						"\t\t     value: l",						"\t\t     value: r",						"\t\t     value: #( a b c d e ) asCons ] asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: ({ ",						"\t\t\t\t #( nil #( #a #b #c #d #e ) ).",						"\t\t\t\t #( #( #a ) #( #b #c #d #e ) ).",						"\t\t\t\t #( #( #a #b ) #( #c #d #e ) ).",						"\t\t\t\t #( #( #a #b #c ) #( #d #e ) ).",						"\t\t\t\t #( #( #a #b #c #d ) #( #e ) ).",						"\t\t\t\t #( #( #a #b #c #d #e ) nil ) } collect: [ :each | ",						"\t\t\t\t each collect: #asCons ])",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t\"Export it.\"",						"\tself",						"\t\texport: (g asLogicComputationTreeLimitedTo: -1)",						"\t\tpathSuffix: 'sexp-appendo-backward'",						"\t\tselector: #gtInspectorTreeUsingCanvas:"					],					"body" : [						"| g |",						"g := [ :l :r | ",						"     SexpTheory new appendo",						"\t     value: l",						"\t     value: r",						"\t     value: #( a b c d e ) asCons ] asGoal.",						"self",						"\tassert: g solutions",						"\tequals: ({ ",						"\t\t\t #( nil #( #a #b #c #d #e ) ).",						"\t\t\t #( #( #a ) #( #b #c #d #e ) ).",						"\t\t\t #( #( #a #b ) #( #c #d #e ) ).",						"\t\t\t #( #( #a #b #c ) #( #d #e ) ).",						"\t\t\t #( #( #a #b #c #d ) #( #e ) ).",						"\t\t\t #( #( #a #b #c #d #e ) nil ) } collect: [ :each | ",						"\t\t\t each collect: #asCons ])",						"\tmodulo: #asOrderedCollection.",						"",						"\"Export it.\"",						"self",						"\texport: (g asLogicComputationTreeLimitedTo: -1)",						"\tpathSuffix: 'sexp-appendo-backward'",						"\tselector: #gtInspectorTreeUsingCanvas:"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3905652,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testFivesSwapped" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testFivesSwapped",						"",						"\t| g |",						"\tg := [ :x | self swappedfives: x ] asGoal.",						"\tself",						"\t\tassert: (g solutions next: 10)",						"\t\tequals: { 5. 5. 5. 5. 5. 5. 5. 5. 5. 5 }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: 10"					],					"body" : [						"| g |",						"g := [ :x | self swappedfives: x ] asGoal.",						"self",						"\tassert: (g solutions next: 10)",						"\tequals: { 5. 5. 5. 5. 5. 5. 5. 5. 5. 5 }",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: 10"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3896755,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"asReifiedVar" : {			"implementors" : {				"Integer" : {					"sourceCode" : [						"asReifiedVar",						"",						"\t^ self asReifiedWithVarClass: ReifiedVar"					],					"body" : [						"^ self asReifiedWithVarClass: ReifiedVar"					],					"category" : "*MicroKanren-core",					"comment" : [ ],					"hash" : 1807522,					"argumentNames" : [ ]				}			},			"senders" : [				"ArithTest>>#testGreaterThanOneo",				"BlockClosure>>#withEnumeratedReifiedVars",				"GoalTest>>#testLolo",				"GoalTest>>#testLengtho",				"GoalTest>>#testAlphaRuleo",				"GoalTest>>#testUnifyWithTopmostSharing",				"GoalTest>>#testTablingAnswersInsteadOfSubstitutions",				"GoalTest>>#testConjTrueThreeWithThree",				"GoalTest>>#testListo",				"GoalTest>>#testUnifyWithTopmostWithoutSharing",				"GoalTest>>#testConde",				"GoalTest>>#testFreshMultipleVars",				"GoalTest>>#testFindAll",				"GoalTest>>#testUnifyWithTopmostSharingWithRepetition",				"GoalTest>>#testFreshSucceed",				"GoalTest>>#testDisjThreeWithThreeOrFourWithVar",				"GoalTest>>#testBagOf",				"State>>#reifyVar:forReifier:"			]		},		"testConjFalseThreeWithVar" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testConjFalseThreeWithVar",						"",						"\t| g |",						"\tg := [ :q | false asGoal , (3 unifyo value: q) ] asGoal.",						"\tself assert: g solutions isEmpty.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :q | false asGoal , (3 unifyo value: q) ] asGoal.",						"self assert: g solutions isEmpty.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3895732,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"nats:stage:" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"nats: x stage: i",						"",						"\t^ self nats: x stage: i offset: 1"					],					"body" : [						"^ self nats: x stage: i offset: 1"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 37711026,					"argumentNames" : [						"x",						"i"					]				}			},			"senders" : [				"GoalTest>>#nats:"			]		},		"testUnifySymmetryFourWithVar" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testUnifySymmetryFourWithVar",						"",						"\t| g |",						"\tg := [ :q | 4 unifyo value: q ] asGoal.",						"\tself assert: g solutions equals: { 4 } modulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :q | 4 unifyo value: q ] asGoal.",						"self assert: g solutions equals: { 4 } modulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3896184,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"unifyWith:" : {			"implementors" : {				"Object" : {					"sourceCode" : [						"unifyWith: another",						"",						"\t^ Unify new",						"\t\t  left: self;",						"\t\t  right: another;",						"\t\t  yourself"					],					"body" : [						"^ Unify new",						"\t  left: self;",						"\t  right: another;",						"\t  yourself"					],					"category" : "*MicroKanren-core",					"comment" : [ ],					"hash" : 18638835,					"argumentNames" : [						"another"					]				}			},			"senders" : [				"Object>>#unifyo"			]		},		"testUnifySharing" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testUnifySharing",						"",						"\t| g |",						"\tg := [ :r | ",						"\t     [ :x | (r unifyo value: x) , (x unifyo value: true) ] asGoal ]",						"\t\t     asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { true }",						"\t\tmodulo: #asOrderedCollection. \" #(true)\"",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :r | ",						"     [ :x | (r unifyo value: x) , (x unifyo value: true) ] asGoal ]",						"\t     asGoal.",						"self assert: g solutions equals: { true } modulo: #asOrderedCollection. \" #(true)\"",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3896198,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testNats" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testNats",						"",						"\t| g M |",						"\tM := 1000.",						"\tg := [ :x | self nats: x ] asGoal.",						"\tself",						"\t\tassert: (g solutions next: M)",						"\t\tequals: (0 to: M - 1)",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: 10"					],					"body" : [						"| g M |",						"M := 1000.",						"g := [ :x | self nats: x ] asGoal.",						"self",						"\tassert: (g solutions next: M)",						"\tequals: (0 to: M - 1)",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: 10"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 4158924,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testConjThreeFour" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testConjThreeFour",						"",						"\t| g |",						"\tg := [ :a | (3 unifyo value: a) , (4 unifyo value: a) ] asGoal.",						"\tself assert: g solutions isEmpty.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :a | (3 unifyo value: a) , (4 unifyo value: a) ] asGoal.",						"self assert: g solutions isEmpty.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3895732,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testAppendoForward" : {			"implementors" : {				"MKSexpTest" : {					"sourceCode" : [						"testAppendoForward",						"",						"\t| g |",						"\tg := [ :l | ",						"\t     SexpTheory new appendo",						"\t\t     value: #( #a #b #c ) asCons",						"\t\t     value: #( #d #e ) asCons",						"\t\t     value: l ] asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: #( a b c d e ) asCons",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t\"Export it.\"",						"\tself",						"\t\texport: (g asLogicComputationTreeLimitedTo: -1)",						"\t\tpathSuffix: 'sexp-appendo-forward'",						"\t\tselector: #gtInspectorTreeUsingCanvas:"					],					"body" : [						"| g |",						"g := [ :l | ",						"     SexpTheory new appendo",						"\t     value: #( #a #b #c ) asCons",						"\t     value: #( #d #e ) asCons",						"\t     value: l ] asGoal.",						"self",						"\tassert: g solutions",						"\tequals: #( a b c d e ) asCons",						"\tmodulo: #asOrderedCollection.",						"",						"\"Export it.\"",						"self",						"\texport: (g asLogicComputationTreeLimitedTo: -1)",						"\tpathSuffix: 'sexp-appendo-forward'",						"\tselector: #gtInspectorTreeUsingCanvas:"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3904579,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testDisjThreeThenFourFive" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testDisjThreeThenFourFive",						"",						"\t| g |",						"\tg := [ :a | ",						"\t     (3 unifyo value: a)",						"\t     | ((4 unifyo value: a) | (5 unifyo value: a)) ] asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { 3. 4. 5 }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :a | ",						"     (3 unifyo value: a) | ((4 unifyo value: a) | (5 unifyo value: a)) ]",						"\t     asGoal.",						"self",						"\tassert: g solutions",						"\tequals: { 3. 4. 5 }",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3896317,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"eternity:" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"eternity: x",						"",						"\t^ [ self eternity: x ] asGoal"					],					"body" : [						"^ [ self eternity: x ] asGoal"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 20671602,					"argumentNames" : [						"x"					]				}			},			"senders" : [				"GoalTest>>#eternity:",				"GoalTest>>#testEtaRaw"			]		},		"testDisjFalseFalse" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testDisjFalseFalse",						"",						"\t| g |",						"\tg := false asGoal | false asGoal.",						"\tself assert: g solutions equals: #(  ) modulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := false asGoal | false asGoal.",						"self assert: g solutions equals: #(  ) modulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3896002,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testDisjThreeWithThreeOrFourWithVar" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testDisjThreeWithThreeOrFourWithVar",						"",						"\t| g |",						"\tg := [ :a | (3 unifyo value: 3) | (4 unifyo value: a) ] asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { ",						"\t\t\t\t0 asReifiedVar.",						"\t\t\t\t4 }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :a | (3 unifyo value: 3) | (4 unifyo value: a) ] asGoal.",						"self",						"\tassert: g solutions",						"\tequals: { ",						"\t\t\t0 asReifiedVar.",						"\t\t\t4 }",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3896427,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testSucceed" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testSucceed",						"",						"\t| g |",						"\tg := true asGoal.",						"",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { Var tautology }",						"\t\tmodulo: #asOrderedCollection. \" #(#tautology)\"",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := true asGoal.",						"",						"self",						"\tassert: g solutions",						"\tequals: { Var tautology }",						"\tmodulo: #asOrderedCollection. \" #(#tautology)\"",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3896123,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"fail" : {			"implementors" : {				"RBSmalllintTestLocalMethodsSameThanTraitObject" : {					"sourceCode" : [						"fail",						"",						"\t^ self assert: false"					],					"body" : [						"^ self assert: false"					],					"category" : "asserting",					"comment" : [ ],					"hash" : 4754382,					"argumentNames" : [ ]				},				"DTTestResultType class" : {					"sourceCode" : [						"fail",						"",						"\t^ DTFail new"					],					"body" : [						"^ DTFail new"					],					"category" : "factory",					"comment" : [ ],					"hash" : 3759151,					"argumentNames" : [ ]				},				"TestAsserter" : {					"sourceCode" : [						"fail",						"",						"\t^ self assert: false"					],					"body" : [						"^ self assert: false"					],					"category" : "asserting",					"comment" : [ ],					"hash" : 1147598,					"argumentNames" : [ ]				},				"NumberParser" : {					"sourceCode" : [						"fail",						"",						"\tfailBlock ifNotNil: [ ^ failBlock value ].",						"\tself error: 'Reading a number failed'"					],					"body" : [						"failBlock ifNotNil: [ ^ failBlock value ].",						"self error: 'Reading a number failed'"					],					"category" : "error",					"comment" : [ ],					"hash" : 1873671,					"argumentNames" : [ ]				},				"TAssertable" : {					"sourceCode" : [						"fail",						"",						"\t^ self assert: false"					],					"body" : [						"^ self assert: false"					],					"category" : "asserting",					"comment" : [ ],					"hash" : 1160910,					"argumentNames" : [ ]				}			},			"senders" : [				"ClapMatchesTest>>#testSubcommandAccessing",				"CollectionRootTest>>#testSelectNoneThenCollect",				"CollectionRootTest>>#testRejectThenDoOnEmpty",				"CollectionRootTest>>#testCollectThenSelectOnEmpty",				"CollectionRootTest>>#testSelectNoneThenDo",				"CollectionRootTest>>#testSelectThenDoOnEmpty",				"CollectionRootTest>>#testRejectAllThenDo",				"CollectionRootTest>>#testRejectThenCollectEmpty",				"CollectionRootTest>>#testCollectOnEmpty",				"CollectionRootTest>>#testSelectOnEmpty",				"CollectionRootTest>>#testRejectAllThenCollect",				"CollectionRootTest>>#testCollectThenDoOnEmpty",				"CollectionRootTest>>#testSelectThenCollectOnEmpty",				"DTTestsRunnerResult>>#buildTreeForUIByClassesAndProtocol",				"DTTestsRunnerResult>>#buildTreeForUI",				"DTTestsRunnerResult>>#buildTreeForUIByClasses",				"DirectoryEntryTest>>#testIfExists",				"DirectoryEntryTest>>#testIfAbsent",				"DoubleLinkedListTest>>#testEmpty",				"EpApplyPreviewerTest>>#testTraitModification",				"EpLogTest>>#testEntryReferences",				"EpLogTest>>#testFirstEntryIfAbsent",				"FFIStringCalloutTest>>#testMandatoryEncodingWithoutExplicitEncodingShouldRaiseError",				"FFIStringCalloutTest>>#testConflictingEncodingOptionShouldRaiseError",				"FFIStringCalloutTest>>#testStringReturnWithMandatoryEncodingWithoutExplicitEncodingShouldRaiseError",				"FileLocatorTest>>#testIfExists",				"FileLocatorTest>>#testIfAbsent",				"FileReferenceTest>>#testIfExists",				"FileReferenceTest>>#testIfAbsent",				"FileReferenceTest>>#testIndicator",				"FileSystemTest>>#testFileNames",				"FluidClassBuilderTest>>#testInstallMinimalMockClass",				"FluidTraitBuilderTest>>#testInstallMinimalMockClass",				"GLMMorphicTest>>#findLastSatisfying:in:",				"GLMMorphicTest>>#findSatisfying:in:",				"GLMNestedBrowserTest>>#testCondition",				"GLMPaneTest>>#testCopyAnnouncementsDoNotRaise",				"GLMPaneTest>>#testCopyAnnouncements",				"GLMPresentationTest>>#testCopyAnnouncementsDoNotRaise",				"LRUCacheTest>>#testCustomWeight",				"LRUCacheTest>>#testOneHit",				"LRUCacheTest>>#testTen",				"LRUCacheTest>>#testRemoveAll",				"LRUCacheTest>>#testThree",				"LRUCacheTest>>#testRandomAccess",				"LRUCacheTest>>#testAdditionInIfAbsentPut",				"LRUCacheTest>>#testFixedAccess",				"LRUCacheTest>>#testTenThreadSafe",				"LRUCacheTest>>#testRemoveOneOfThree",				"LRUCacheTest>>#testEviction",				"LRUCacheTest>>#test5kClasses",				"LRUCacheTest>>#testEmpty",				"LRUCacheTest>>#testThreeHitSameOne",				"LRUCacheTest>>#testOneHitTwice",				"LRUCacheTest>>#testTwo",				"LinkedListTest>>#testRejectThenDoOnEmpty",				"LinkedListTest>>#testRejectAllThenDo",				"LinkedListTest>>#testSelectOnEmpty",				"LinkedListTest>>#testCollectThenDoOnEmpty",				"LinkedListTest>>#testSelectNoneThenCollect",				"LinkedListTest>>#testCollectThenSelectOnEmpty",				"LinkedListTest>>#testRejectThenCollectEmpty",				"LinkedListTest>>#testRejectAllThenCollect",				"LinkedListTest>>#test14removeIfAbsent",				"LinkedListTest>>#testCollectOnEmpty",				"LinkedListTest>>#testSelectNoneThenDo",				"LinkedListTest>>#testSelectThenDoOnEmpty",				"LinkedListTest>>#testSelectThenCollectOnEmpty",				"MCWorkingCopyForExtensionsTest>>#testAddingExtensionMethodNotMatchingPackage",				"NumberParser>>#nextInteger",				"OCASTClosureAnalyzerTest>>#testOptimizedBlockWriteInNestedBlockCase4",				"OCASTClosureAnalyzerTest>>#testOptimizedBlockWriteInNestedBlockCase3",				"OCCompilerTest>>#testInstanceVariableShadowing",				"OCCompilerTest>>#testNotInteractiveSiblingBlocksTempShadowing",				"OCCompilerTest>>#testNotInteractiveInBlockTempInstanceVariableShadowing",				"OCCompilerTest>>#testTraitTempShadowing",				"OCCompilerTest>>#testNoShadowing",				"OCCompilerTest>>#testReservedNameAsMethodArgumentShadowing",				"OCCompilerTest>>#testInBlockTempArgumentShadowing",				"OCCompilerTest>>#testInBlockTempShadowing",				"OCCompilerTest>>#testReservedNameAsBlockArgumentShadowing",				"OCCompilerTest>>#testAssignmentOfGlobalVarBinding",				"OCCompilerTest>>#testInBlockTempInstanceVariableShadowing",				"OCCompilerTest>>#testSiblingBlocksInstanceVariableShadowing",				"OCCompilerTest>>#testSiblingBlocksTempShadowing",				"OCCompilerTest>>#testNotInteractiveNoShadowing",				"OCCompilerTest>>#testNotInteractiveSiblingBlocksInstanceVariableShadowing",				"OCCompilerTest>>#testNotInteractiveInBlockTempShadowing",				"OCCompilerTest>>#testAssignmentOfClassNameBinding",				"OmStoreTest>>#testEntryReferences",				"OmStoreTest>>#testFirstEntryIfAbsent",				"OrderedDictionaryTest>>#testAtIfAbsent",				"OrderedDictionaryTest>>#testIdentityIndexOfKeyIfAbsent",				"OrderedDictionaryTest>>#testKeyAtValueIfAbsent",				"OrderedDictionaryTest>>#testKeyAtIdentityValueIfAbsent",				"OrderedDictionaryTest>>#testAtIfPresentIfAbsent",				"OrderedDictionaryTest>>#testIndexOfKeyIfAbsent",				"OrderedDictionaryTest>>#testAtIfPresent",				"OrderedDictionaryTest>>#testAssociationAtIfPresent",				"OrderedDictionaryTest>>#testAssociationAtIfAbsent",				"OrderedDictionaryTest>>#testAtIfAbsentPut",				"OrderedDictionaryTest>>#testKeyAtIndexIfAbsent",				"OrderedDictionaryTest>>#testAtIfPresentIfAbsentPut",				"OrderedDictionaryTest>>#testRemoveKeyIfAbsent",				"PharoSyntaxTutorialTest>>#testDivideTwoByZeroSignalsZeroDivide",				"SUnitTest>>#testDefects",				"SUnitTest>>#testSuite",				"SUnitTest>>#testFileOutResult",				"SUnitTest>>#raiseDeprecationWarnings",				"SUnitTest>>#testErrorShouldResetWatchDog",				"SUnitTest>>#testFail",				"ShClassInstallerTest>>#testDuplicatedInstanceVariable",				"ShClassInstallerTest>>#testDuplicatedInstanceVariableInSuperclass",				"ShClassInstallerTest>>#testDuplicatedInstanceVariableInSuperclassMetaclass",				"SimpleTestResourceTestCase>>#testRunSuiteWithResource",				"SimpleTestResourceTestCase>>#testResourceInitRelease",				"SourceFileArrayTest>>#testWriteSourceWritesInGivenSourceFileArray",				"SourceFileArrayTest>>#testWriteSourceWritesInGivenSourceFileArrayWithFlushDefering",				"SourceFileArrayTest>>#testWriteToBufferedStream",				"SpAbstractListAdapterMultipleSelectionTest>>#testSubscribeToEventDoesNotRaiseEvent",				"SpAbstractListAdapterSingleSelectionTest>>#testSubscribeToEventDoesNotRaiseEvent",				"SpListPresenterMultipleSelectionTest>>#testSetSelectIndexOutsideRangeDoesNotModifySelection",				"SpListPresenterMultipleSelectionTest>>#testSetSelectItemOutsideRangeDoesNotModifySelection",				"SpTreeTablePresenterMultipleSelectionTest>>#testSetSelectInvalidPathDoesNotModifySelection",				"SpTreeTablePresenterMultipleSelectionTest>>#testSetSelectItemOutsideRangeDoesNotModifySelection",				"StringTest>>#testAsClassIfAbsent",				"StringTest>>#testAsClassIfPresent",				"SymbolTest>>#testAsClassIfAbsent",				"SymbolTest>>#testAsClassIfPresent",				"TIterateTest>>#testSelectNoneThenCollect",				"TIterateTest>>#testCollectThenSelectOnEmpty",				"TIterateTest>>#testRejectThenDoOnEmpty",				"TIterateTest>>#testSelectNoneThenDo",				"TIterateTest>>#testRejectAllThenDo",				"TIterateTest>>#testRejectThenCollectEmpty",				"TIterateTest>>#testCollectOnEmpty",				"TIterateTest>>#testSelectOnEmpty",				"TIterateTest>>#testRejectAllThenCollect",				"TIterateTest>>#testCollectThenDoOnEmpty",				"TIterateTest>>#testSelectThenCollectOnEmpty",				"TIterateTest>>#testSelectThenDoOnEmpty",				"TTLCacheTest>>#testExpiring",				"WeakValueDictionaryTest>>#testKeysAndValuesDoWithGarbageCollectedValue",				"ZnClientTest>>#testGetGeoIP",				"ZnClientTest>>#testIfFailWrongType",				"ZnClientTest>>#testIfFailNonExistingHost",				"ZnClientTest>>#testIfFailNotFound",				"ZnClientTest>>#testProgressNoIfFail",				"ZnUrlTest>>#testQueryAccessing"			]		},		"testSucceedInvariant" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testSucceedInvariant",						"",						"\tSBRAL new asState in: [ :s | ",						"\t\t| ss |",						"\t\tss := true asGoal onState: s.",						"\t\tself assert: ss car equals: s ].",						"\tSBRAL new asState in: [ :s | ",						"\t\t| ss |",						"\t\tss := s srfi41Singleton",						"\t\t\t      zip: (true asGoal onState: s)",						"\t\t\t      with: [ :a :b | a == b ].",						"\t\tself assert: ss equals: { true } modulo: #asOrderedCollection ]"					],					"body" : [						"SBRAL new asState in: [ :s | ",						"\t| ss |",						"\tss := true asGoal onState: s.",						"\tself assert: ss car equals: s ].",						"SBRAL new asState in: [ :s | ",						"\t| ss |",						"\tss := s srfi41Singleton",						"\t\t      zip: (true asGoal onState: s)",						"\t\t      with: [ :a :b | a == b ].",						"\tself assert: ss equals: { true } modulo: #asOrderedCollection ]"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3633625,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testEtaRaw" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testEtaRaw",						"",						"\t| g |",						"\tg := self eternity: Object new.",						"\tself assert: g class equals: Eta"					],					"body" : [						"| g |",						"g := self eternity: Object new.",						"self assert: g class equals: Eta"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3895234,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testDisjTrueFalse" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testDisjTrueFalse",						"",						"\t| g |",						"\tg := true asGoal | false asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { Var tautology }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := true asGoal | false asGoal.",						"self",						"\tassert: g solutions",						"\tequals: { Var tautology }",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3896508,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testDisjFourWithVarOrThreeWithVar" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testDisjFourWithVarOrThreeWithVar",						"",						"\t| g |",						"\tg := [ :a | (4 unifyo value: a) | (3 unifyo value: a) ] asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { 4. 3 }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :a | (4 unifyo value: a) | (3 unifyo value: a) ] asGoal.",						"self assert: g solutions equals: { 4. 3 } modulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3896250,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testConjDisj" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testConjDisj",						"",						"\t| g |",						"\tg := [ :a | ",						"\t     (3 unifyo value: a) , (4 unifyo value: a) | (a unifyo value: 0) ]",						"\t\t     asGoal.",						"\tself assert: g solutions equals: { 0 } modulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :a | ",						"     (3 unifyo value: a) , (4 unifyo value: a) | (a unifyo value: 0) ]",						"\t     asGoal.",						"self assert: g solutions equals: { 0 } modulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3896201,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testConjSymmetry" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testConjSymmetry",						"",						"\t| g |",						"\tg := [ :a | (a unifyo value: 4) , (4 unifyo value: a) ] asGoal.",						"\tself assert: g solutions equals: { 4 } modulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :a | (a unifyo value: 4) , (4 unifyo value: a) ] asGoal.",						"self assert: g solutions equals: { 4 } modulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3896184,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testDisj" : {			"implementors" : { },			"senders" : [ ]		},		"unifyo" : {			"implementors" : {				"Object" : {					"sourceCode" : [						"unifyo",						"",						"\t^ [ :anObject | self unifyWith: anObject ]"					],					"body" : [						"^ [ :anObject | self unifyWith: anObject ]"					],					"category" : "*MicroKanren-core",					"comment" : [ ],					"hash" : 1598365,					"argumentNames" : [ ]				}			},			"senders" : [				"ArithTheory>>#oneo",				"ArithTheory>>#zeroo",				"ArithTheory>>#positiveo",				"ArithTheory>>#bitAndo",				"ArithTheory>>#addero",				"ArithTheory>>#bitXoro",				"ArithTheory>>#greaterThanOneo",				"ChildTestPredicate>>#goal",				"GoalTest>>#testUnifyThreeWithThree",				"GoalTest>>#testConjFalseThreeWithVar",				"GoalTest>>#testDisjThreeFourThenFive",				"GoalTest>>#testAlphaRuleo",				"GoalTest>>#testUnifyWithTopmostSharing",				"GoalTest>>#nats:stage:offset:",				"GoalTest>>#testTablingAnswersInsteadOfSubstitutions",				"GoalTest>>#testDisjThreeWithVarOrThreeWithVar",				"GoalTest>>#testConjTrueThreeWithThree",				"GoalTest>>#testUnifyWithTopmostWithoutSharing",				"GoalTest>>#testConde",				"GoalTest>>#testConso",				"GoalTest>>#testCutOverMultipleRules",				"GoalTest>>#testCutAndFail",				"GoalTest>>#testUnifyFourWithThree",				"GoalTest>>#testDisjFourWithVarOrThreeWithVar",				"GoalTest>>#swappedfives:",				"GoalTest>>#testConjThreeFourWithTwoVars",				"GoalTest>>#testConjThreeFresh",				"GoalTest>>#testConjSymmetry",				"GoalTest>>#testDisjThreeThenFourFive",				"GoalTest>>#testDisjThreeWithVarOrFourWithVar",				"GoalTest>>#testCutUnifyThenFail",				"GoalTest>>#teaCupSpoon:",				"GoalTest>>#testConjSucceedingSharing",				"GoalTest>>#teacup:",				"GoalTest>>#testUnifyWithTopmostSharingWithRepetition",				"GoalTest>>#fives:",				"GoalTest>>#testConjThreeFour",				"GoalTest>>#testConjDisj",				"GoalTest>>#testUnifySymmetryVarWithFour",				"GoalTest>>#testCut",				"GoalTest>>#testConjFailingSharing",				"GoalTest>>#testTablingMutuallyRecursive",				"GoalTest>>#testUnifySymmetryFourWithVar",				"GoalTest>>#testDisjThreeWithThreeOrFourWithVar",				"GoalTest>>#testUnifySharing",				"Graph>>#asGoal",				"MKPredicateFives>>#goal",				"MKPredicateFooForBag>>#goal",				"MKPredicateSexpAppendo>>#goal",				"MKPredicateSexpConso>>#goal",				"MKRealogTest>>#contracto",				"MKRealogTest>>#sicko",				"MKRealogTest>>#companyo",				"MKRealogTest>>#employeeo",				"MKRealogTest>>#workedHourso",				"MKRealogTest>>#maritalo",				"McCullochAssociateRule>>#relateo",				"McCullochIdentityRule>>#relateo",				"McCullochRepeatRule>>#relateo",				"McCullochReverseRule>>#relateo",				"McCullochRightHalfAssociateRule>>#relateo",				"PredicateBagOfo>>#onState:",				"PredicateFindAllo>>#onState:",				"Reuse>>#onState:",				"SexpTheory>>#nilo"			]		},		"testConjSucceedingSharing" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testConjSucceedingSharing",						"",						"\t| g |",						"\tg := [ :z | ",						"\t     [ :x | (3 unifyo value: x) , (z unifyo value: x) ] asGoal ]",						"\t\t     asGoal.",						"\tself assert: g solutions equals: #( 3 ) modulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :z | [ :x | (3 unifyo value: x) , (z unifyo value: x) ] asGoal ]",						"\t     asGoal.",						"self assert: g solutions equals: #( 3 ) modulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3895822,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testFives" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testFives",						"",						"\t| g |",						"\tg := [ :x | self fives: x ] asGoal.",						"\tself",						"\t\tassert: (g solutions next: 10)",						"\t\tequals: { 5. 5. 5. 5. 5. 5. 5. 5. 5. 5 }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: 10"					],					"body" : [						"| g |",						"g := [ :x | self fives: x ] asGoal.",						"self",						"\tassert: (g solutions next: 10)",						"\tequals: { 5. 5. 5. 5. 5. 5. 5. 5. 5. 5 }",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: 10"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3896755,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"succeed" : {			"implementors" : { },			"senders" : [ ]		},		"testUnifyFourWithThree" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testUnifyFourWithThree",						"",						"\t| g |",						"\tg := 4 unifyo value: 3.",						"\tself assert: g solutions equals: #(  ) modulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := 4 unifyo value: 3.",						"self assert: g solutions equals: #(  ) modulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 3895791,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"walk:" : {			"implementors" : {				"State" : {					"sourceCode" : [						"walk: anObj",						"",						"\t\"main API for ....\"",						"",						"\t<doc: #Realog topic: #( State walk )>",						"\t<doc: #Realog topic: #( State walk overview )>",						"\t^ substitution walk: anObj fromState: self"					],					"body" : [						"^ substitution walk: anObj fromState: self"					],					"category" : "as yet unclassified",					"comment" : [						"main API for ...."					],					"hash" : 24427729,					"argumentNames" : [						"anObj"					]				}			},			"senders" : [				"Reifier>>#value:",				"Unifier>>#value:value:",				"Walker>>#forObject:",				"Walker>>#value:"			]		},		"asGoal" : {			"implementors" : {				"False" : {					"sourceCode" : [						"asGoal",						"",						"\t^ Failed new"					],					"body" : [						"^ Failed new"					],					"category" : "*MicroKanren-core",					"comment" : [ ],					"hash" : 1580847,					"argumentNames" : [ ]				},				"Graph" : {					"sourceCode" : [						"asGoal",						"",						"\t^ [ :x :y | ",						"\t  | g |",						"\t  g := Goal cond e.",						"\t  edges do: [ :each | ",						"\t\t  g",						"\t\t\t  if: (x unifyo value: each from content)",						"\t\t\t  then: (y unifyo value: each to content) ].",						"\t  g ]"					],					"body" : [						"^ [ :x :y | ",						"  | g |",						"  g := Goal cond e.",						"  edges do: [ :each | ",						"\t  g",						"\t\t  if: (x unifyo value: each from content)",						"\t\t  then: (y unifyo value: each to content) ].",						"  g ]"					],					"category" : "*MicroKanren",					"comment" : [ ],					"hash" : 7360669,					"argumentNames" : [ ]				},				"BlockClosure" : {					"sourceCode" : [						"asGoal",						"",						"\t^ (numArgs = 0",						"\t\t   ifTrue: [ Eta new ]",						"\t\t   ifFalse: [ Fresh new ])",						"\t\t  receiver: self;",						"\t\t  yourself"					],					"body" : [						"^ (numArgs = 0",						"\t   ifTrue: [ Eta new ]",						"\t   ifFalse: [ Fresh new ])",						"\t  receiver: self;",						"\t  yourself"					],					"category" : "*MicroKanren-core",					"comment" : [ ],					"hash" : 804547,					"argumentNames" : [ ]				},				"True" : {					"sourceCode" : [						"asGoal",						"",						"\t^ Succeed new"					],					"body" : [						"^ Succeed new"					],					"category" : "*MicroKanren-core",					"comment" : [ ],					"hash" : 1581359,					"argumentNames" : [ ]				},				"Boolean" : {					"sourceCode" : [						"asGoal",						"",						"\tself subclassResponsibility"					],					"body" : [						"self subclassResponsibility"					],					"category" : "*MicroKanren-core",					"comment" : [ ],					"hash" : 1665604,					"argumentNames" : [ ]				}			},			"senders" : [				"AlphaRule>>#onState:",				"ArithTest>>#testBitAndo",				"ArithTest>>#testFullAddero",				"ArithTest>>#testPluso",				"ArithTest>>#testHalfAddero",				"ArithTest>>#testMinuso",				"ArithTest>>#testAddero",				"ArithTest>>#testGreaterThanOneo",				"ArithTest>>#testBitXoro",				"ArithTheory>>#positiveo",				"ArithTheory>>#bitFullAddero",				"ArithTheory>>#genAddero",				"ArithTheory>>#addero",				"ArithTheory>>#greaterThanOneo",				"CombinatoricsTheoryTest>>#testDycko",				"Cond>>#otherwise:",				"Cond>>#onState:afterPushingGoal:",				"DescendTestPredicate>>#goal",				"GoalTest>>#testConjFalseThreeWithVar",				"GoalTest>>#testLolo",				"GoalTest>>#testLengtho",				"GoalTest>>#testDisjThreeFourThenFive",				"GoalTest>>#testAlphaRuleo",				"GoalTest>>#testUnifyWithTopmostSharing",				"GoalTest>>#eternity:",				"GoalTest>>#nats:stage:offset:",				"GoalTest>>#testTeaCup",				"GoalTest>>#testTablingAnswersInsteadOfSubstitutions",				"GoalTest>>#testDisjThreeWithVarOrThreeWithVar",				"GoalTest>>#testConjTrueThreeWithThree",				"GoalTest>>#testListo",				"GoalTest>>#testUnifyWithTopmostWithoutSharing",				"GoalTest>>#testConde",				"GoalTest>>#testSucceed",				"GoalTest>>#testConso",				"GoalTest>>#testCutOverMultipleRules",				"GoalTest>>#testCutAndFail",				"GoalTest>>#testConjTrueTrue",				"GoalTest>>#testFivesByNats",				"GoalTest>>#testDisjTrueFalse",				"GoalTest>>#testFreshMultipleVars",				"GoalTest>>#testDisjFourWithVarOrThreeWithVar",				"GoalTest>>#swappedfives:",				"GoalTest>>#testAppendo",				"GoalTest>>#testSucceedInvariant",				"GoalTest>>#testDisjTrueTrue",				"GoalTest>>#testFivesByPredicate",				"GoalTest>>#testConjThreeFourWithTwoVars",				"GoalTest>>#patho:",				"GoalTest>>#testConjThreeFresh",				"GoalTest>>#testConjSymmetry",				"GoalTest>>#testDisjThreeThenFourFive",				"GoalTest>>#testDisjThreeWithVarOrFourWithVar",				"GoalTest>>#testCutUnifyThenFail",				"GoalTest>>#teaCupSpoon:",				"GoalTest>>#testConjSucceedingSharing",				"GoalTest>>#teacup:",				"GoalTest>>#testFindAll",				"GoalTest>>#testFivesSwapped",				"GoalTest>>#testUnifyWithTopmostSharingWithRepetition",				"GoalTest>>#testFreshSucceed",				"GoalTest>>#testCaro",				"GoalTest>>#testDisjFalseFalse",				"GoalTest>>#fives:",				"GoalTest>>#testConjThreeFour",				"GoalTest>>#testConjDisj",				"GoalTest>>#testFives",				"GoalTest>>#testUnifySymmetryVarWithFour",				"GoalTest>>#testNats",				"GoalTest>>#testFailed",				"GoalTest>>#testCut",				"GoalTest>>#testConjFailingSharing",				"GoalTest>>#testTablingMutuallyRecursive",				"GoalTest>>#testFreshFailed",				"GoalTest>>#testUnifySymmetryFourWithVar",				"GoalTest>>#testCdro",				"GoalTest>>#testTabling",				"GoalTest>>#testDisjThreeWithThreeOrFourWithVar",				"GoalTest>>#testBagOf",				"GoalTest>>#testUnifySharing",				"InductiveRelation>>#relateo",				"MKPredicateFives>>#goal",				"MKPredicateSexpAppendo>>#goal",				"MKPredicateSexpCaro>>#goal",				"MKPredicateSexpCdro>>#goal",				"MKPredicateSexpDycko>>#goal",				"MKPredicateSexpListo>>#goal",				"MKPredicateSexpLolo>>#goal",				"MKPredicateSexpPairo>>#goal",				"MKRealogTest>>#contracto",				"MKRealogTest>>#testCompaniesWithConsultants",				"MKRealogTest>>#sicko",				"MKRealogTest>>#testCheckSingleEmployment",				"MKRealogTest>>#testMaritalo",				"MKRealogTest>>#testContracto",				"MKRealogTest>>#workedo",				"MKRealogTest>>#testWorkedHourso",				"MKRealogTest>>#employedo",				"MKRealogTest>>#testEmployeeo",				"MKRealogTest>>#testWorkedo",				"MKRealogTest>>#testEmployedo",				"MKRealogTest>>#workedHourso",				"MKRealogTest>>#maritalo",				"MKSexpTest>>#testDycko",				"MKSexpTest>>#testACORN",				"MKSexpTest>>#testAppendoBackward",				"MKSexpTest>>#testAppendoForward",				"Master>>#onState:",				"McCullochAssociateRule>>#relateo",				"McCullochRepeatRule>>#relateo",				"McCullochReverseRule>>#relateo",				"McCullochRightHalfAssociateRule>>#relateo",				"MonteCarloLockTest>>#testMcCullochMachine",				"MonteCarloLockTest>>#testMontecarloLockMachine",				"Not>>#onState:",				"PredicateBagOfo>>#onState:",				"SexpTheory>>#lengtho",				"SexpTheory>>#reverseo",				"SexpTheory>>#pairo",				"State>>#onState:afterUnificationByUnify:",				"UnificationError>>#onState:afterUnificationByUnify:"			]		},		"testDycko" : {			"implementors" : {				"MKSexpTest" : {					"sourceCode" : [						"testDycko",						"",						"\t| g |",						"\tg := [ :alpha | MKPredicateSexpDycko value: alpha ] asGoal.",						"\tself",						"\t\texport: (g asLogicComputationTreeLimitedTo: 20)",						"\t\tpathSuffix: 'sexp-dycko'",						"\t\tselector: #gtInspectorTreeUsingCanvas:"					],					"body" : [						"| g |",						"g := [ :alpha | MKPredicateSexpDycko value: alpha ] asGoal.",						"self",						"\texport: (g asLogicComputationTreeLimitedTo: 20)",						"\tpathSuffix: 'sexp-dycko'",						"\tselector: #gtInspectorTreeUsingCanvas:"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3903450,					"argumentNames" : [ ]				},				"CombinatoricsTheoryTest" : {					"sourceCode" : [						"testDycko",						"",						"\t| g combTheory |",						"\tcombTheory := CombinatoricsTheory new.",						"\tg := [ :alpha | combTheory dycko value: alpha ] asGoal.",						"\tself",						"\t\tassert: (g solutions next: 20)",						"\t\tequals:",						"\t\t\t({ nil. '()'. '(())'. '()()'. '(()())'. '(())()'. '()(())'. '(()()())'.",						"\t\t\t '((()))'. '(())(())'. '()()()'. '(()()()())'. '((())())'.",						"\t\t\t '(()())()'. '(())()()'. '()(()())'. '(()()()()())'. '((())()())'.",						"\t\t\t '(()()())()'. '((()))()' } collect: #asCons)",						"\t\tmodulo: #asOrderedCollection.",						"\tg := [ :alpha | combTheory dycko value: '(()(())()(' asCons ] asGoal.",						"\t\"an invalid Dyck path\"",						"\tself assert: g solutions isEmpty"					],					"body" : [						"| g combTheory |",						"combTheory := CombinatoricsTheory new.",						"g := [ :alpha | combTheory dycko value: alpha ] asGoal.",						"self",						"\tassert: (g solutions next: 20)",						"\tequals:",						"\t\t({ nil. '()'. '(())'. '()()'. '(()())'. '(())()'. '()(())'. '(()()())'.",						"\t\t '((()))'. '(())(())'. '()()()'. '(()()()())'. '((())())'. '(()())()'.",						"\t\t '(())()()'. '()(()())'. '(()()()()())'. '((())()())'. '(()()())()'.",						"\t\t '((()))()' } collect: #asCons)",						"\tmodulo: #asOrderedCollection.",						"g := [ :alpha | combTheory dycko value: '(()(())()(' asCons ] asGoal.",						"\"an invalid Dyck path\"",						"self assert: g solutions isEmpty"					],					"category" : "tests",					"comment" : [ ],					"hash" : 4290555,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"testConjThreeFresh" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testConjThreeFresh",						"",						"\t| g |",						"\tg := [ :a | (3 unifyo value: a) , [ :b | 4 unifyo value: b ] asGoal ]",						"\t\t     asGoal.",						"\tself assert: g solutions equals: { 3 } modulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :a | (3 unifyo value: a) , [ :b | 4 unifyo value: b ] asGoal ]",						"\t     asGoal.",						"self assert: g solutions equals: { 3 } modulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"category" : "tests",					"comment" : [ ],					"hash" : 3896184,					"argumentNames" : [ ]				}			},			"senders" : [ ]		},		"repeat:value:" : {			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"repeat: x value: i",						"",						"\t^ self nats: x stage: i offset: 0"					],					"body" : [						"^ self nats: x stage: i offset: 0"					],					"category" : "accessing structure variables",					"comment" : [ ],					"hash" : 37711025,					"argumentNames" : [						"x",						"i"					]				}			},			"senders" : [				"GoalTest>>#testFivesByNats"			]		}	}}