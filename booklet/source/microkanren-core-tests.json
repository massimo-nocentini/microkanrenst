{	"classes" : {		"GoalTest" : {			"hash" : 6863872,			"definition" : "GoalAbstractTest subclass: #GoalTest\r\tinstanceVariableNames: 'sexpTheory combTheory'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Tests'",			"comment" : [				"This class contains tests"			],			"category" : "MicroKanren-Tests"		}	},	"messages" : {		"testDisjTrueTrue" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testDisjTrueTrue",						"",						"\t| g |",						"\tg := true asGoal | true asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { ",						"\t\t\t\tVar tautology.",						"\t\t\t\tVar tautology }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := true asGoal | true asGoal.",						"self",						"\tassert: g solutions",						"\tequals: { ",						"\t\t\tVar tautology.",						"\t\t\tVar tautology }",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7922261,					"argumentNames" : [ ]				}			}		},		"testUnifySymmetryVarWithFour" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testUnifySymmetryVarWithFour",						"",						"\t| g |",						"\tg := [ :q | q unifyo value: 4 ] asGoal.",						"\tself assert: g solutions equals: { 4 } modulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :q | q unifyo value: 4 ] asGoal.",						"self assert: g solutions equals: { 4 } modulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7921784,					"argumentNames" : [ ]				}			}		},		"testDisjThreeFourThenFive" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testDisjThreeFourThenFive",						"",						"\t| g |",						"\tg := [ :a | ",						"\t     (3 unifyo value: a) | (4 unifyo value: a) | (5 unifyo value: a) ]",						"\t\t     asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { 3. 5. 4 }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :a | ",						"     (3 unifyo value: a) | (4 unifyo value: a) | (5 unifyo value: a) ]",						"\t     asGoal.",						"self",						"\tassert: g solutions",						"\tequals: { 3. 5. 4 }",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7921917,					"argumentNames" : [ ]				}			}		},		"nats:" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc",				"GoalTest>>#testNats"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"nats: x",						"",						"\t^ self nats: x stage: 0"					],					"body" : [						"^ self nats: x stage: 0"					],					"isTestMethod" : false,					"category" : "utilities",					"comment" : [ ],					"hash" : 24697121,					"argumentNames" : [						"x"					]				}			}		},		"testConjTrueThreeWithThree" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testConjTrueThreeWithThree",						"",						"\t| g |",						"\tg := [ :q | true asGoal , (3 unifyo value: 3) ] asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { 0 asReifiedVar }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :q | true asGoal , (3 unifyo value: 3) ] asGoal.",						"self",						"\tassert: g solutions",						"\tequals: { 0 asReifiedVar }",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7921961,					"argumentNames" : [ ]				}			}		},		"testConjFailingSharing" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testConjFailingSharing",						"",						"\t| g |",						"\tg := [ :x :y :z | ",						"\t     (3 unifyo value: x) , (z unifyo value: x) , (z unifyo value: 4) ]",						"\t\t     asGoal.",						"\tself assert: g solutions equals: #(  ) modulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :x :y :z | ",						"     (3 unifyo value: x) , (z unifyo value: x) , (z unifyo value: 4) ]",						"\t     asGoal.",						"self assert: g solutions equals: #(  ) modulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7921422,					"argumentNames" : [ ]				}			}		},		"testFreshMultipleVars" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testFreshMultipleVars",						"",						"\t| g |",						"\tg := [ :q :r | true asGoal ] asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: (Array with: { ",						"\t\t\t\t\t 0 asReifiedVar.",						"\t\t\t\t\t 1 asReifiedVar })",						"\t\tmodulo: #asOrderedCollection. \" an Array(an Array(•₀ •₁))\"",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :q :r | true asGoal ] asGoal.",						"self",						"\tassert: g solutions",						"\tequals: (Array with: { ",						"\t\t\t\t 0 asReifiedVar.",						"\t\t\t\t 1 asReifiedVar })",						"\tmodulo: #asOrderedCollection. \" an Array(an Array(•₀ •₁))\"",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7922404,					"argumentNames" : [ ]				}			}		},		"nats:stage:offset:" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc",				"GoalTest>>#nats:stage:offset:",				"GoalTest>>#nats:stage:",				"GoalTest>>#repeat:value:"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"nats: x stage: i offset: o",						"",						"\t^ (x unifyo value: i)",						"\t  | [ self nats: x stage: i + o offset: o ] asGoal"					],					"body" : [						"^ (x unifyo value: i) | [ self nats: x stage: i + o offset: o ] asGoal"					],					"isTestMethod" : false,					"category" : "utilities",					"comment" : [ ],					"hash" : 58776624,					"argumentNames" : [						"x",						"i",						"o"					]				}			}		},		"testFreshFailed" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testFreshFailed",						"",						"\t| g |",						"\tg := [ :q | false asGoal ] asGoal.",						"\tself assert: g solutions equals: #(  ) modulo: #asOrderedCollection. \" #()\"",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :q | false asGoal ] asGoal.",						"self assert: g solutions equals: #(  ) modulo: #asOrderedCollection. \" #()\"",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7921422,					"argumentNames" : [ ]				}			}		},		"testUnifyWithTopmostWithoutSharing" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testUnifyWithTopmostWithoutSharing",						"",						"\t| g |",						"\tg := [ :r | ",						"\t     [ :x :y | ",						"\t     (LinkedList with: x with: r) asCons unifyo value:",						"\t\t     (LinkedList with: 1 with: y) asCons ] asGoal ] asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { 0 asReifiedVar }",						"\t\tmodulo: #asOrderedCollection. \" an Array(•₀)\"",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :r | ",						"     [ :x :y | ",						"     (LinkedList with: x with: r) asCons unifyo value:",						"\t     (LinkedList with: 1 with: y) asCons ] asGoal ] asGoal.",						"self",						"\tassert: g solutions",						"\tequals: { 0 asReifiedVar }",						"\tmodulo: #asOrderedCollection. \" an Array(•₀)\"",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7921961,					"argumentNames" : [ ]				}			}		},		"testFreshSucceed" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testFreshSucceed",						"",						"\t| g |",						"\tg := [ :q | true asGoal ] asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { 0 asReifiedVar }",						"\t\tmodulo: #asOrderedCollection. \" an Array(•₀)\"",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :q | true asGoal ] asGoal.",						"self",						"\tassert: g solutions",						"\tequals: { 0 asReifiedVar }",						"\tmodulo: #asOrderedCollection. \" an Array(•₀)\"",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7921961,					"argumentNames" : [ ]				}			}		},		"testFailed" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testFailed",						"",						"\t| g |",						"\tg := false asGoal.",						"\tself assert: g solutions equals: #(  ) modulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := false asGoal.",						"self assert: g solutions equals: #(  ) modulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7921218,					"argumentNames" : [ ]				}			}		},		"testConjTrueTrue" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testConjTrueTrue",						"",						"\t| g |",						"\tg := true asGoal , true asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { Var tautology }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := true asGoal , true asGoal.",						"self",						"\tassert: g solutions",						"\tequals: { Var tautology }",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7922107,					"argumentNames" : [ ]				}			}		},		"testUnifyWithTopmostSharingWithRepetition" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testUnifyWithTopmostSharingWithRepetition",						"",						"\t| g |",						"\tg := [ :r | ",						"\t     [ :x :y | ",						"\t     (LinkedList",						"\t\t      with: x",						"\t\t      with: y",						"\t\t      with: x",						"\t\t      with: y) asCons unifyo value: r ] asGoal ] asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { ",						"\t\t\t\t0 asReifiedVar.",						"\t\t\t\t1 asReifiedVar.",						"\t\t\t\t0 asReifiedVar.",						"\t\t\t\t1 asReifiedVar } asCons",						"\t\tmodulo: #asOrderedCollection. \" (•₀ •₁ •₀ •₁)\"",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :r | ",						"     [ :x :y | ",						"     (LinkedList",						"\t      with: x",						"\t      with: y",						"\t      with: x",						"\t      with: y) asCons unifyo value: r ] asGoal ] asGoal.",						"self",						"\tassert: g solutions",						"\tequals: { ",						"\t\t\t0 asReifiedVar.",						"\t\t\t1 asReifiedVar.",						"\t\t\t0 asReifiedVar.",						"\t\t\t1 asReifiedVar } asCons",						"\tmodulo: #asOrderedCollection. \" (•₀ •₁ •₀ •₁)\"",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7922766,					"argumentNames" : [ ]				}			}		},		"testConjThreeFourWithTwoVars" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testConjThreeFourWithTwoVars",						"",						"\t| g |",						"\tg := [ :a :b | (3 unifyo value: a) , (4 unifyo value: b) ] asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { { 3. 4 } }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :a :b | (3 unifyo value: a) , (4 unifyo value: b) ] asGoal.",						"self",						"\tassert: g solutions",						"\tequals: { { 3. 4 } }",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7922212,					"argumentNames" : [ ]				}			}		},		"testFivesByPredicate" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testFivesByPredicate",						"",						"\t| g |",						"\tg := [ :r | MKPredicateFives value: r ] asGoal.",						"\tself",						"\t\tassert: (g solutions next: 10)",						"\t\tequals: { 5. 5. 5. 5. 5. 5. 5. 5. 5. 5 }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: 10"					],					"body" : [						"| g |",						"g := [ :r | MKPredicateFives value: r ] asGoal.",						"self",						"\tassert: (g solutions next: 10)",						"\tequals: { 5. 5. 5. 5. 5. 5. 5. 5. 5. 5 }",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: 10"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7922355,					"argumentNames" : [ ]				}			}		},		"testUnifyThreeWithThree" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testUnifyThreeWithThree",						"",						"\t| g |",						"\tg := 3 unifyo value: 3.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { Var tautology }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := 3 unifyo value: 3.",						"self",						"\tassert: g solutions",						"\tequals: { Var tautology }",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7921866,					"argumentNames" : [ ]				}			}		},		"testDisjThreeWithVarOrFourWithVar" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testDisjThreeWithVarOrFourWithVar",						"",						"\t| g |",						"\tg := [ :a | (3 unifyo value: a) | (4 unifyo value: a) ] asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { 3. 4 }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :a | (3 unifyo value: a) | (4 unifyo value: a) ] asGoal.",						"self assert: g solutions equals: { 3. 4 } modulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7921850,					"argumentNames" : [ ]				}			}		},		"fives:" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc",				"GoalTest>>#fives:",				"GoalTest>>#testConde",				"GoalTest>>#testFives",				"GoalTest>>#swappedfives:"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"fives: x",						"",						"\t^ (5 unifyo value: x) | [ self fives: x ] asGoal"					],					"body" : [						"^ (5 unifyo value: x) | [ self fives: x ] asGoal"					],					"isTestMethod" : false,					"category" : "utilities",					"comment" : [ ],					"hash" : 24697757,					"argumentNames" : [						"x"					]				}			}		},		"testDisjFalseTrue" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testDisjFalseTrue",						"",						"\t| g |",						"\tg := false asGoal | true asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { Var tautology }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := false asGoal | true asGoal.",						"self",						"\tassert: g solutions",						"\tequals: { Var tautology }",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7922108,					"argumentNames" : [ ]				}			}		},		"testFivesByNats" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testFivesByNats",						"",						"\t| g |",						"\tg := [ :x | self repeat: x value: 5 ] asGoal.",						"\tself",						"\t\tassert: (g solutions next: 10)",						"\t\tequals: { 5. 5. 5. 5. 5. 5. 5. 5. 5. 5 }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: 10"					],					"body" : [						"| g |",						"g := [ :x | self repeat: x value: 5 ] asGoal.",						"self",						"\tassert: (g solutions next: 10)",						"\tequals: { 5. 5. 5. 5. 5. 5. 5. 5. 5. 5 }",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: 10"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7922355,					"argumentNames" : [ ]				}			}		},		"testDisjThreeWithVarOrThreeWithVar" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testDisjThreeWithVarOrThreeWithVar",						"",						"\t| g |",						"\tg := [ :a | (3 unifyo value: a) | (3 unifyo value: a) ] asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { 3. 3 }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :a | (3 unifyo value: a) | (3 unifyo value: a) ] asGoal.",						"self assert: g solutions equals: { 3. 3 } modulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7921821,					"argumentNames" : [ ]				}			}		},		"testUnifyWithTopmostSharing" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testUnifyWithTopmostSharing",						"",						"\t| g |",						"\tg := [ :r | ",						"\t     [ :x :y | r unifyo value: (Array with: x with: y) asCons ]",						"\t\t     asGoal ] asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { ",						"\t\t\t\t0 asReifiedVar.",						"\t\t\t\t1 asReifiedVar } asCons",						"\t\tmodulo: #asOrderedCollection. \" (•₀ •₁)\"",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :r | ",						"     [ :x :y | r unifyo value: (Array with: x with: y) asCons ] asGoal ]",						"\t     asGoal.",						"self",						"\tassert: g solutions",						"\tequals: { ",						"\t\t\t0 asReifiedVar.",						"\t\t\t1 asReifiedVar } asCons",						"\tmodulo: #asOrderedCollection. \" (•₀ •₁)\"",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7922337,					"argumentNames" : [ ]				}			}		},		"testFivesSwapped" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testFivesSwapped",						"",						"\t| g |",						"\tg := [ :x | self swappedfives: x ] asGoal.",						"\tself",						"\t\tassert: (g solutions next: 10)",						"\t\tequals: { 5. 5. 5. 5. 5. 5. 5. 5. 5. 5 }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: 10"					],					"body" : [						"| g |",						"g := [ :x | self swappedfives: x ] asGoal.",						"self",						"\tassert: (g solutions next: 10)",						"\tequals: { 5. 5. 5. 5. 5. 5. 5. 5. 5. 5 }",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: 10"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7922355,					"argumentNames" : [ ]				}			}		},		"nats:stage:" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc",				"GoalTest>>#nats:"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"nats: x stage: i",						"",						"\t^ self nats: x stage: i offset: 1"					],					"body" : [						"^ self nats: x stage: i offset: 1"					],					"isTestMethod" : false,					"category" : "utilities",					"comment" : [ ],					"hash" : 41736626,					"argumentNames" : [						"x",						"i"					]				}			}		},		"testConjFalseThreeWithVar" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testConjFalseThreeWithVar",						"",						"\t| g |",						"\tg := [ :q | false asGoal , (3 unifyo value: q) ] asGoal.",						"\tself assert: g solutions isEmpty.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :q | false asGoal , (3 unifyo value: q) ] asGoal.",						"self assert: g solutions isEmpty.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7921332,					"argumentNames" : [ ]				}			}		},		"testUnifySymmetryFourWithVar" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testUnifySymmetryFourWithVar",						"",						"\t| g |",						"\tg := [ :q | 4 unifyo value: q ] asGoal.",						"\tself assert: g solutions equals: { 4 } modulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :q | 4 unifyo value: q ] asGoal.",						"self assert: g solutions equals: { 4 } modulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7921784,					"argumentNames" : [ ]				}			}		},		"testUnifySharing" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testUnifySharing",						"",						"\t| g |",						"\tg := [ :r | ",						"\t     [ :x | (r unifyo value: x) , (x unifyo value: true) ] asGoal ]",						"\t\t     asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { true }",						"\t\tmodulo: #asOrderedCollection. \" #(true)\"",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :r | ",						"     [ :x | (r unifyo value: x) , (x unifyo value: true) ] asGoal ]",						"\t     asGoal.",						"self assert: g solutions equals: { true } modulo: #asOrderedCollection. \" #(true)\"",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7921798,					"argumentNames" : [ ]				}			}		},		"testNats" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testNats",						"",						"\t| g M |",						"\tM := 1000.",						"\tg := [ :x | self nats: x ] asGoal.",						"\tself",						"\t\tassert: (g solutions next: M)",						"\t\tequals: (0 to: M - 1)",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: 10"					],					"body" : [						"| g M |",						"M := 1000.",						"g := [ :x | self nats: x ] asGoal.",						"self",						"\tassert: (g solutions next: M)",						"\tequals: (0 to: M - 1)",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: 10"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 8184524,					"argumentNames" : [ ]				}			}		},		"testConjThreeFour" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testConjThreeFour",						"",						"\t| g |",						"\tg := [ :a | (3 unifyo value: a) , (4 unifyo value: a) ] asGoal.",						"\tself assert: g solutions isEmpty.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :a | (3 unifyo value: a) , (4 unifyo value: a) ] asGoal.",						"self assert: g solutions isEmpty.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7921332,					"argumentNames" : [ ]				}			}		},		"testDisjThreeThenFourFive" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testDisjThreeThenFourFive",						"",						"\t| g |",						"\tg := [ :a | ",						"\t     (3 unifyo value: a)",						"\t     | ((4 unifyo value: a) | (5 unifyo value: a)) ] asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { 3. 4. 5 }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :a | ",						"     (3 unifyo value: a) | ((4 unifyo value: a) | (5 unifyo value: a)) ]",						"\t     asGoal.",						"self",						"\tassert: g solutions",						"\tequals: { 3. 4. 5 }",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7921917,					"argumentNames" : [ ]				}			}		},		"testDisjFalseFalse" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testDisjFalseFalse",						"",						"\t| g |",						"\tg := false asGoal | false asGoal.",						"\tself assert: g solutions equals: #(  ) modulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := false asGoal | false asGoal.",						"self assert: g solutions equals: #(  ) modulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7921602,					"argumentNames" : [ ]				}			}		},		"testDisjThreeWithThreeOrFourWithVar" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testDisjThreeWithThreeOrFourWithVar",						"",						"\t| g |",						"\tg := [ :a | (3 unifyo value: 3) | (4 unifyo value: a) ] asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { ",						"\t\t\t\t0 asReifiedVar.",						"\t\t\t\t4 }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :a | (3 unifyo value: 3) | (4 unifyo value: a) ] asGoal.",						"self",						"\tassert: g solutions",						"\tequals: { ",						"\t\t\t0 asReifiedVar.",						"\t\t\t4 }",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7922027,					"argumentNames" : [ ]				}			}		},		"eternity:" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc",				"GoalTest>>#testEtaRaw",				"GoalTest>>#eternity:"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"eternity: x",						"",						"\t^ [ self eternity: x ] asGoal"					],					"body" : [						"^ [ self eternity: x ] asGoal"					],					"isTestMethod" : false,					"category" : "utilities",					"comment" : [ ],					"hash" : 24697202,					"argumentNames" : [						"x"					]				}			}		},		"testSucceed" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testSucceed",						"",						"\t| g |",						"\tg := true asGoal.",						"",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { Var tautology }",						"\t\tmodulo: #asOrderedCollection. \" #(#tautology)\"",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := true asGoal.",						"",						"self",						"\tassert: g solutions",						"\tequals: { Var tautology }",						"\tmodulo: #asOrderedCollection. \" #(#tautology)\"",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7921723,					"argumentNames" : [ ]				}			}		},		"testDisjFourWithVarOrThreeWithVar" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testDisjFourWithVarOrThreeWithVar",						"",						"\t| g |",						"\tg := [ :a | (4 unifyo value: a) | (3 unifyo value: a) ] asGoal.",						"\tself",						"\t\tassert: g solutions",						"\t\tequals: { 4. 3 }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :a | (4 unifyo value: a) | (3 unifyo value: a) ] asGoal.",						"self assert: g solutions equals: { 4. 3 } modulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7921850,					"argumentNames" : [ ]				}			}		},		"testConjSucceedingSharing" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testConjSucceedingSharing",						"",						"\t| g |",						"\tg := [ :z | ",						"\t     [ :x | (3 unifyo value: x) , (z unifyo value: x) ] asGoal ]",						"\t\t     asGoal.",						"\tself assert: g solutions equals: #( 3 ) modulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :z | [ :x | (3 unifyo value: x) , (z unifyo value: x) ] asGoal ]",						"\t     asGoal.",						"self assert: g solutions equals: #( 3 ) modulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7921422,					"argumentNames" : [ ]				}			}		},		"testConjSymmetry" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testConjSymmetry",						"",						"\t| g |",						"\tg := [ :a | (a unifyo value: 4) , (4 unifyo value: a) ] asGoal.",						"\tself assert: g solutions equals: { 4 } modulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :a | (a unifyo value: 4) , (4 unifyo value: a) ] asGoal.",						"self assert: g solutions equals: { 4 } modulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7921784,					"argumentNames" : [ ]				}			}		},		"testConjDisj" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testConjDisj",						"",						"\t| g |",						"\tg := [ :a | ",						"\t     (3 unifyo value: a) , (4 unifyo value: a) | (a unifyo value: 0) ]",						"\t\t     asGoal.",						"\tself assert: g solutions equals: { 0 } modulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :a | ",						"     (3 unifyo value: a) , (4 unifyo value: a) | (a unifyo value: 0) ]",						"\t     asGoal.",						"self assert: g solutions equals: { 0 } modulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7921801,					"argumentNames" : [ ]				}			}		},		"testFives" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testFives",						"",						"\t| g |",						"\tg := [ :x | self fives: x ] asGoal.",						"\tself",						"\t\tassert: (g solutions next: 10)",						"\t\tequals: { 5. 5. 5. 5. 5. 5. 5. 5. 5. 5 }",						"\t\tmodulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: 10"					],					"body" : [						"| g |",						"g := [ :x | self fives: x ] asGoal.",						"self",						"\tassert: (g solutions next: 10)",						"\tequals: { 5. 5. 5. 5. 5. 5. 5. 5. 5. 5 }",						"\tmodulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: 10"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7922355,					"argumentNames" : [ ]				}			}		},		"testEtaRaw" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testEtaRaw",						"",						"\t| g |",						"\tg := self eternity: Object new.",						"\tself assert: g class equals: Eta"					],					"body" : [						"| g |",						"g := self eternity: Object new.",						"self assert: g class equals: Eta"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7920834,					"argumentNames" : [ ]				}			}		},		"testSucceedInvariant" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testSucceedInvariant",						"",						"\tSBRAL new asState in: [ :s | ",						"\t\t| ss |",						"\t\tss := true asGoal onState: s.",						"\t\tself assert: ss car equals: s ].",						"\tSBRAL new asState in: [ :s | ",						"\t\t| ss |",						"\t\tss := s srfi41Singleton",						"\t\t\t      zip: (true asGoal onState: s)",						"\t\t\t      with: [ :a :b | a == b ].",						"\t\tself assert: ss equals: { true } modulo: #asOrderedCollection ]"					],					"body" : [						"SBRAL new asState in: [ :s | ",						"\t| ss |",						"\tss := true asGoal onState: s.",						"\tself assert: ss car equals: s ].",						"SBRAL new asState in: [ :s | ",						"\t| ss |",						"\tss := s srfi41Singleton",						"\t\t      zip: (true asGoal onState: s)",						"\t\t      with: [ :a :b | a == b ].",						"\tself assert: ss equals: { true } modulo: #asOrderedCollection ]"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7659225,					"argumentNames" : [ ]				}			}		},		"testUnifyFourWithThree" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testUnifyFourWithThree",						"",						"\t| g |",						"\tg := 4 unifyo value: 3.",						"\tself assert: g solutions equals: #(  ) modulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := 4 unifyo value: 3.",						"self assert: g solutions equals: #(  ) modulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7921391,					"argumentNames" : [ ]				}			}		},		"testConjThreeFresh" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"testConjThreeFresh",						"",						"\t| g |",						"\tg := [ :a | (3 unifyo value: a) , [ :b | 4 unifyo value: b ] asGoal ]",						"\t\t     asGoal.",						"\tself assert: g solutions equals: { 3 } modulo: #asOrderedCollection.",						"",						"\t^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"body" : [						"| g |",						"g := [ :a | (3 unifyo value: a) , [ :b | 4 unifyo value: b ] asGoal ]",						"\t     asGoal.",						"self assert: g solutions equals: { 3 } modulo: #asOrderedCollection.",						"",						"^ self exportComputationTreeOfGoal: g limitedTo: -1"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 7921784,					"argumentNames" : [ ]				}			}		},		"repeat:value:" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreTestsForDoc",				"GoalTest>>#testFivesByNats"			],			"implementors" : {				"GoalTest" : {					"sourceCode" : [						"repeat: x value: i",						"",						"\t^ self nats: x stage: i offset: 0"					],					"body" : [						"^ self nats: x stage: i offset: 0"					],					"isTestMethod" : false,					"category" : "accessing structure variables",					"comment" : [ ],					"hash" : 41736625,					"argumentNames" : [						"x",						"i"					]				}			}		}	}}