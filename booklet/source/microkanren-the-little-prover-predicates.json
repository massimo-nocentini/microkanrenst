{	"classes" : {		"TheLittleProver" : {			"hash" : 3384064,			"definition" : "Object subclass: #TheLittleProver\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-ACL'",			"comment" : [				"I contains theorems described in \"The Littler Prover\"."			],			"category" : "MicroKanren-ACL"		},		"Cons" : {			"hash" : 6571520,			"definition" : "Object subclass: #Cons\r\tinstanceVariableNames: 'car cdr'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Cons'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tcar:\t\t<Object>",				"\tcdr:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Collections-Sequenceable-Cons"		},		"TheLittleProverTest" : {			"hash" : 2836736,			"definition" : "Srfi41AbstractTest subclass: #TheLittleProverTest\r\tinstanceVariableNames: 'theory'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Tests'",			"comment" : [				"A RBProgramNodeIdentityVisitorTest is a test class for testing the behavior of RBProgramNodeIdentityVisitor"			],			"category" : "MicroKanren-Tests"		},		"Object" : {			"hash" : 804608,			"definition" : "ProtoObject subclass: #Object\r\tinstanceVariableNames: ''\r\tclassVariableNames: 'DependentsFields'\r\tpackage: 'Kernel-Objects'",			"comment" : [				"`Object` is the root class for almost all of the other classes in the class hierarchy. The exceptions are ProtoObject (the superclass of Object) and its subclasses.",				"",				"Class `Object` provides default behavior common to all normal objects, such as access, copying, comparison, error handling, message sending, and reflection. Also utility messages that all objects should respond to are defined here.",				"",				"`Object` has no instance variables, nor should any be added. This is due to several classes of objects that inherit from Object that have special implementations (SmallInteger and UndefinedObject for example) or the VM knows about and depends on the structure and layout of certain standard classes.",				"",				"Class Variables:",				"\tDependentsFields\t\tan IdentityDictionary",				"\t\tProvides a virtual 'dependents' field so that any object may have one",				"\t\tor more dependent views, synchronized by the changed:/update: protocol.",				"\t\tNote that class Model has a real slot for its dependents, and overrides",				"\t\tthe associated protocol with more efficient implementations.",				"",				"Because `Object` is the root of the inheritance tree, methods are often defined in Object to give all objects special behaviors needed by certain subsystems or applications, or to respond to certain general test messages such as isMorph.",				"",				"",				"###Miscellanous Discussions",				"",				"About `at:` index accepting float and not only integers",				" ",				"This behavior is also free in the sense that the failure code is only invoked when the primitive fails and so adds nothing to the cost of successful accesses, which are the high dynamic frequency operation.  It will also show up under",				"profiling if one is concerned about efficiency, and so isn't a hidden cost.",				"",				"It is also in keeping with Pharo's mixed mode/arbitrary precision",				"implicit coercion number system that one *can* use fractions or floats as",				"indices.  Stripping out coercions like this will make the system more brittle.  So ",				"please do *not* remove this hack.  I think it's a feature and a useful one.",				"",				"Can you give me an example that demonstrates the usefulness of this feature?",				"",				"```",				"| a r |",				"a := Array new: 10 withAll: 0.",				"r := Random new.",				"100 timesRepeat: [| v | v := r next * 10 + 1. a at: v put: (a at: v) + 1].",				"a",				"```",				"",				"i.e. I didn't have to provide an explicit rounding step.  That's useful.  But in general anywhere ",				"where an index is derived by some calculation not having to provide the rounding step could be ",				"useful/helpful/more concise.  e.g. (n roundTo: 0.1) * 10 vs ((n roundTo: 0.1) * 10) asInteger.",				"",				"Some thought went into the original choice.  It is not a hack but there by intent.  The integers are ",				"simply a subset of the reals and forcing the programmer to use them is favouring the machine ",				"above the programmer.",				"",				"But I think you should justify getting rid of it rather than my having to justify keeping it.  Getting ",				"rid of it risks breaking code.  If it is there but does not harm then why get rid of it?",				"",				"best Eliot Miranda "			],			"category" : "Kernel-Objects"		}	},	"messages" : {		"carConsº" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverPredicatesForDoc",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_46",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_55",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_56",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_28"			],			"implementors" : {				"TheLittleProver" : {					"sourceCode" : [						"carConsº",						"",						"\t\"(dethm car/cons (x y)",						"\t\t(equal (car (cons x y)) x))\"",						"",						"\t^ [ :x :y | (x cons: y) car ] <~~> [ :x :y | x ]"					],					"body" : [						"^ [ :x :y | (x cons: y) car ] <~~> [ :x :y | x ]"					],					"isTestMethod" : false,					"category" : "predicates",					"comment" : [						"(dethm car/cons (x y)",						"\t\t(equal (car (cons x y)) x))"					],					"hash" : 4178255,					"argumentNames" : [ ]				}			}		},		"equalSwapº" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverPredicatesForDoc",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_56",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_49"			],			"implementors" : {				"TheLittleProver" : {					"sourceCode" : [						"equalSwapº",						"",						"\t\"(dethm equal-swap (x y)",						"\t\t(equal (equal x y) (equal y x)))\"",						"",						"\t^ [ :x :y | x = y ] <~~> [ :x :y | y = x ]"					],					"body" : [						"^ [ :x :y | x = y ] <~~> [ :x :y | y = x ]"					],					"isTestMethod" : false,					"category" : "predicates",					"comment" : [						"(dethm equal-swap (x y)",						"\t\t(equal (equal x y) (equal y x)))"					],					"hash" : 4178255,					"argumentNames" : [ ]				}			}		},		"ifSameº" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverPredicatesForDoc",				"TheLittleProverTest>>#test_chapter_02_EvenOlderGames_frame_05_rewriting_unbound",				"TheLittleProverTest>>#test_chapter_02_EvenOlderGames_frame_05",				"TheLittleProverTest>>#test_chapter_02_EvenOlderGames_frame_07"			],			"implementors" : {				"TheLittleProver" : {					"sourceCode" : [						"ifSameº",						"",						"\t\"(dethm cdr/cons (x y)",						"\t\t(equal (cdr (cons x y)) y))\"",						"",						"\t^ [ :x :y | ",						"\t  x",						"\t\t  ifTrue: [ y ]",						"\t\t  ifFalse: [ y ] ] <~~> [ :x :y | y ]"					],					"body" : [						"^ [ :x :y | ",						"  x",						"\t  ifTrue: [ y ]",						"\t  ifFalse: [ y ] ] <~~> [ :x :y | y ]"					],					"isTestMethod" : false,					"category" : "predicates",					"comment" : [						"(dethm cdr/cons (x y)",						"\t\t(equal (cdr (cons x y)) y))"					],					"hash" : 4178255,					"argumentNames" : [ ]				}			}		},		"consª:isAtomª:" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverPredicatesForDoc",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_16_byCompiledMethod"			],			"implementors" : {				"TheLittleProverTest" : {					"sourceCode" : [						"consª: a isAtomª: b",						"",						"\t(a cons: b) isAtom"					],					"body" : [						"(a cons: b) isAtom"					],					"isTestMethod" : false,					"category" : "code as data",					"comment" : [ ],					"hash" : 37709597,					"argumentNames" : [						"a",						"b"					]				}			}		},		"isAtom" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverPredicatesForDoc",				"RBNodeTheoryTest>>#testUnifyConsIsAtomBlock",				"TheLittleProver>>#isAtomNilº",				"TheLittleProver>>#isAtomConsº",				"TheLittleProverTest>>#expectedRBNode_chapter_02_frame_7",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_32",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_55",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_21",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_56",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_14",				"TheLittleProverTest>>#flapjackEqualsConsª:isAtomª:",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_16_byBlockClosure",				"TheLittleProverTest>>#consª:isAtomª:",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_16_backward",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_11",				"TheLittleProverTest>>#test_chapter_02_EvenOlderGames_frame_07",				"TheLittleProverTest>>#expectedRBNode_chapter_01_frame_55",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_28",				"TheLittleProverTest>>#expectedRBNode_chapter_01_frame_56"			],			"implementors" : {				"Cons" : {					"sourceCode" : [						"isAtom",						"",						"\t^ false"					],					"body" : [						"^ false"					],					"isTestMethod" : false,					"category" : "testing",					"comment" : [ ],					"hash" : 7430796,					"argumentNames" : [ ]				},				"Object" : {					"sourceCode" : [						"isAtom",						"",						"\t^ true"					],					"body" : [						"^ true"					],					"isTestMethod" : false,					"category" : "*Collections-Sequenceable-Cons",					"comment" : [ ],					"hash" : 1663882,					"argumentNames" : [ ]				}			}		},		"isAtomConsº" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverPredicatesForDoc",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_21",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_56",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_16_byBlockClosure",				"TheLittleProverTest>>#flapjackEqualsConsº:isAtomº:",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_16_backward",				"TheLittleProverTest>>#consº:isAtomº:"			],			"implementors" : {				"TheLittleProver" : {					"sourceCode" : [						"isAtomConsº",						"",						"\t\"(dethm atom/cons (x y)",						"\t  (equal (atom (cons x y)) 'nil))\"",						"",						"\t^ [ :x :y | (x cons: y) isAtom ] <~~> [ :x :y | false ]"					],					"body" : [						"^ [ :x :y | (x cons: y) isAtom ] <~~> [ :x :y | false ]"					],					"isTestMethod" : false,					"category" : "predicates",					"comment" : [						"(dethm atom/cons (x y)",						"\t  (equal (atom (cons x y)) 'nil))"					],					"hash" : 4178255,					"argumentNames" : [ ]				}			}		},		"consº:isAtomº:" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverPredicatesForDoc",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_16_byCompiledMethod"			],			"implementors" : {				"TheLittleProverTest" : {					"sourceCode" : [						"consº: ast isAtomº: rewritten",						"",						"\t^ [ :a :b | theory isAtomConsº value: ast value: rewritten ]"					],					"body" : [						"^ [ :a :b | theory isAtomConsº value: ast value: rewritten ]"					],					"isTestMethod" : false,					"category" : "predicates",					"comment" : [ ],					"hash" : 37709346,					"argumentNames" : [						"ast",						"rewritten"					]				}			}		},		"flapjackEqualsConsº:isAtomº:" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverChapter01ForDoc",				"BaselineOfMicroKanren>>#scriptExportTheLittleProverPredicatesForDoc",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_19"			],			"implementors" : {				"TheLittleProverTest" : {					"sourceCode" : [						"flapjackEqualsConsº: ast isAtomº: rewritten",						"",						"\t^ [ :a :b | ",						"\t  ast",						"\t\t  acl: [ :prover | ",						"\t\t\t  prover",						"\t\t\t\t  focus: [ :o | #flapjack = o ] do: theory isAtomConsº;",						"\t\t\t\t  then: [ :o | o unifyo value: rewritten ] ]",						"\t\t  contextVariables: #(  ) ]"					],					"body" : [						"^ [ :a :b | ",						"  ast",						"\t  acl: [ :prover | ",						"\t\t  prover",						"\t\t\t  focus: [ :o | #flapjack = o ] do: theory isAtomConsº;",						"\t\t\t  then: [ :o | o unifyo value: rewritten ] ]",						"\t  contextVariables: #(  ) ]"					],					"isTestMethod" : false,					"category" : "tests",					"comment" : [ ],					"hash" : 37709346,					"argumentNames" : [						"ast",						"rewritten"					]				}			}		},		"flapjackNilFalseº" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverPredicatesForDoc",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_21"			],			"implementors" : {				"TheLittleProverTest" : {					"sourceCode" : [						"flapjackNilFalseº",						"",						"\t^ [ :_ | #flapjack = false ] <~> [ :_ | false ]"					],					"body" : [						"^ [ :_ | #flapjack = false ] <~> [ :_ | false ]"					],					"isTestMethod" : false,					"category" : "predicates",					"comment" : [ ],					"hash" : 3630927,					"argumentNames" : [ ]				}			}		},		"flapjackEqualsConsª:isAtomª:" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverChapter01ForDoc",				"BaselineOfMicroKanren>>#scriptExportTheLittleProverPredicatesForDoc",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_19"			],			"implementors" : {				"TheLittleProverTest" : {					"sourceCode" : [						"flapjackEqualsConsª: a isAtomª: b",						"",						"\t#flapjack = (a cons: b) isAtom"					],					"body" : [						"#flapjack = (a cons: b) isAtom"					],					"isTestMethod" : false,					"category" : "tests",					"comment" : [ ],					"hash" : 37709752,					"argumentNames" : [						"a",						"b"					]				}			}		},		"ifTrueº" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverPredicatesForDoc",				"TheLittleProverTest>>#test_chapter_02_EvenOlderGames_frame_15"			],			"implementors" : {				"TheLittleProver" : {					"sourceCode" : [						"ifTrueº",						"",						"\t\"(dethm cdr/cons (x y)",						"\t\t(equal (cdr (cons x y)) y))\"",						"",						"\t^ [ :x :y | ",						"\t  true",						"\t\t  ifTrue: [ x ]",						"\t\t  ifFalse: [ y ] ] <~~> [ :x :y | x ]"					],					"body" : [						"^ [ :x :y | ",						"  true",						"\t  ifTrue: [ x ]",						"\t  ifFalse: [ y ] ] <~~> [ :x :y | x ]"					],					"isTestMethod" : false,					"category" : "predicates",					"comment" : [						"(dethm cdr/cons (x y)",						"\t\t(equal (cdr (cons x y)) y))"					],					"hash" : 4178255,					"argumentNames" : [ ]				}			}		},		"isAtomNilº" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverPredicatesForDoc",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_32",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_28"			],			"implementors" : {				"TheLittleProver" : {					"sourceCode" : [						"isAtomNilº",						"",						"\t\"",						"\t(dethm atom/nil (x y)",						"\t  (equal (atom 'nil) 't))\"",						"",						"\t^ [ :_ | nil isAtom ] <~> [ :_ | true ]"					],					"body" : [						"^ [ :_ | nil isAtom ] <~> [ :_ | true ]"					],					"isTestMethod" : false,					"category" : "predicates",					"comment" : [						"",						"\t(dethm atom/nil (x y)",						"\t  (equal (atom 'nil) 't))"					],					"hash" : 4178255,					"argumentNames" : [ ]				}			}		},		"ifFalseº" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverPredicatesForDoc"			],			"implementors" : {				"TheLittleProver" : {					"sourceCode" : [						"ifFalseº",						"",						"\t\"(dethm cdr/cons (x y)",						"\t\t(equal (cdr (cons x y)) y))\"",						"",						"\t^ [ :x :y | ",						"\t  false",						"\t\t  ifTrue: [ x ]",						"\t\t  ifFalse: [ y ] ] <~~> [ :x :y | y ]"					],					"body" : [						"^ [ :x :y | ",						"  false",						"\t  ifTrue: [ x ]",						"\t  ifFalse: [ y ] ] <~~> [ :x :y | y ]"					],					"isTestMethod" : false,					"category" : "predicates",					"comment" : [						"(dethm cdr/cons (x y)",						"\t\t(equal (cdr (cons x y)) y))"					],					"hash" : 4178255,					"argumentNames" : [ ]				}			}		},		"cdrConsº" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverPredicatesForDoc",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_32",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_56",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_28"			],			"implementors" : {				"TheLittleProver" : {					"sourceCode" : [						"cdrConsº",						"",						"\t\"(dethm cdr/cons (x y)",						"\t\t(equal (cdr (cons x y)) y))\"",						"",						"\t^ [ :x :y | (x cons: y) cdr ] <~~> [ :x :y | y ]"					],					"body" : [						"^ [ :x :y | (x cons: y) cdr ] <~~> [ :x :y | y ]"					],					"isTestMethod" : false,					"category" : "predicates",					"comment" : [						"(dethm cdr/cons (x y)",						"\t\t(equal (cdr (cons x y)) y))"					],					"hash" : 4178255,					"argumentNames" : [ ]				}			}		},		"equalIfº" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverPredicatesForDoc",				"TheLittleProverTest>>#test_chapter_02_EvenOlderGames_frame_15"			],			"implementors" : {				"TheLittleProver" : {					"sourceCode" : [						"equalIfº",						"",						"\t\"(dethm cdr/cons (x y)",						"\t\t(equal (cdr (cons x y)) y))\"",						"",						"\t^ [ :a :b | \"^ [ :x :y :w | ",						"\t  x = y",						"\t\t  ifTrue: [ x ]",						"\t\t  ifFalse: [ w ] ] ···> [ :x :y :w | ",						"\t  x = y",						"\t\t  ifTrue: [ y ]",						"\t\t  ifFalse: [ w ] ]\"",						"\t  [ :c :d :e | ",						"\t  | ancestor |",						"\t  ancestor := [ ",						"\t              a = c",						"\t\t              ifTrue: [ d ]",						"\t\t              ifFalse: [ e ] ] unaryRBNode ",						"\t\t              substituteVariablesUsingDictionary: (Dictionary new",						"\t\t\t\t               at: #a put: a;",						"\t\t\t\t               at: #c put: c asRBNode;",						"\t\t\t\t               at: #d put: d asRBNode;",						"\t\t\t\t               at: #e put: e asRBNode;",						"\t\t\t\t               yourself).",						"",						"\t  (self ancestorº value: a value: ancestor)",						"\t  , (self childº value: d asRBNode value: a)",						"\t  , (self unifyº value: c asRBNode value: b) ] asGoal ]"					],					"body" : [						"^ [ :a :b | \"^ [ :x :y :w | ",						"\t  x = y",						"\t\t  ifTrue: [ x ]",						"\t\t  ifFalse: [ w ] ] ···> [ :x :y :w | ",						"\t  x = y",						"\t\t  ifTrue: [ y ]",						"\t\t  ifFalse: [ w ] ]\"",						"  [ :c :d :e | ",						"  | ancestor |",						"  ancestor := [ ",						"              a = c",						"\t              ifTrue: [ d ]",						"\t              ifFalse: [ e ] ] unaryRBNode ",						"\t              substituteVariablesUsingDictionary: (Dictionary new",						"\t\t\t               at: #a put: a;",						"\t\t\t               at: #c put: c asRBNode;",						"\t\t\t               at: #d put: d asRBNode;",						"\t\t\t               at: #e put: e asRBNode;",						"\t\t\t               yourself).",						"",						"  (self ancestorº value: a value: ancestor)",						"  , (self childº value: d asRBNode value: a)",						"  , (self unifyº value: c asRBNode value: b) ] asGoal ]"					],					"isTestMethod" : false,					"category" : "predicates",					"comment" : [						"(dethm cdr/cons (x y)",						"\t\t(equal (cdr (cons x y)) y))"					],					"hash" : 4177821,					"argumentNames" : [ ]				}			}		}	}}