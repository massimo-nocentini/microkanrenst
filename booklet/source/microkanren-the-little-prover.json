{	"classes" : {		"TheLittleProver" : {			"hash" : 3384064,			"definition" : "Object subclass: #TheLittleProver\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Tests'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Tests"		},		"Cons" : {			"hash" : 6571520,			"definition" : "Object subclass: #Cons\r\tinstanceVariableNames: 'car cdr'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Cons'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tcar:\t\t<Object>",				"\tcdr:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Collections-Sequenceable-Cons"		},		"TheLittleProverTest" : {			"hash" : 2836736,			"definition" : "Srfi41AbstractTest subclass: #TheLittleProverTest\r\tinstanceVariableNames: 'theory'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Tests'",			"comment" : [				"A RBProgramNodeIdentityVisitorTest is a test class for testing the behavior of RBProgramNodeIdentityVisitor"			],			"category" : "MicroKanren-Tests"		},		"Object" : {			"hash" : 804608,			"definition" : "ProtoObject subclass: #Object\r\tinstanceVariableNames: ''\r\tclassVariableNames: 'DependentsFields'\r\tpackage: 'Kernel-Objects'",			"comment" : [				"`Object` is the root class for almost all of the other classes in the class hierarchy. The exceptions are ProtoObject (the superclass of Object) and its subclasses.",				"",				"Class `Object` provides default behavior common to all normal objects, such as access, copying, comparison, error handling, message sending, and reflection. Also utility messages that all objects should respond to are defined here.",				"",				"`Object` has no instance variables, nor should any be added. This is due to several classes of objects that inherit from Object that have special implementations (SmallInteger and UndefinedObject for example) or the VM knows about and depends on the structure and layout of certain standard classes.",				"",				"Class Variables:",				"\tDependentsFields\t\tan IdentityDictionary",				"\t\tProvides a virtual 'dependents' field so that any object may have one",				"\t\tor more dependent views, synchronized by the changed:/update: protocol.",				"\t\tNote that class Model has a real slot for its dependents, and overrides",				"\t\tthe associated protocol with more efficient implementations.",				"",				"Because `Object` is the root of the inheritance tree, methods are often defined in Object to give all objects special behaviors needed by certain subsystems or applications, or to respond to certain general test messages such as isMorph.",				"",				"",				"###Miscellanous Discussions",				"",				"About `at:` index accepting float and not only integers",				" ",				"This behavior is also free in the sense that the failure code is only invoked when the primitive fails and so adds nothing to the cost of successful accesses, which are the high dynamic frequency operation.  It will also show up under",				"profiling if one is concerned about efficiency, and so isn't a hidden cost.",				"",				"It is also in keeping with Pharo's mixed mode/arbitrary precision",				"implicit coercion number system that one *can* use fractions or floats as",				"indices.  Stripping out coercions like this will make the system more brittle.  So ",				"please do *not* remove this hack.  I think it's a feature and a useful one.",				"",				"Can you give me an example that demonstrates the usefulness of this feature?",				"",				"```",				"| a r |",				"a := Array new: 10 withAll: 0.",				"r := Random new.",				"100 timesRepeat: [| v | v := r next * 10 + 1. a at: v put: (a at: v) + 1].",				"a",				"```",				"",				"i.e. I didn't have to provide an explicit rounding step.  That's useful.  But in general anywhere ",				"where an index is derived by some calculation not having to provide the rounding step could be ",				"useful/helpful/more concise.  e.g. (n roundTo: 0.1) * 10 vs ((n roundTo: 0.1) * 10) asInteger.",				"",				"Some thought went into the original choice.  It is not a hack but there by intent.  The integers are ",				"simply a subset of the reals and forcing the programmer to use them is favouring the machine ",				"above the programmer.",				"",				"But I think you should justify getting rid of it rather than my having to justify keeping it.  Getting ",				"rid of it risks breaking code.  If it is there but does not harm then why get rid of it?",				"",				"best Eliot Miranda "			],			"category" : "Kernel-Objects"		}	},	"messages" : {		"cdrConsº" : {			"implementors" : {				"TheLittleProver" : {					"sourceCode" : [						"cdrConsº",						"",						"\t^ [ :a :b | ",						"\t  [ :ast | [ :x :y | (ast unifyo value: a) , (y unifyo value: b) ] ] ",						"\t\t  asGoalWithUnaryASTof: [ :x :y | (x cons: y) cdr ] ]"					],					"body" : [						"^ [ :a :b | ",						"  [ :ast | [ :x :y | (ast unifyo value: a) , (y unifyo value: b) ] ] ",						"\t  asGoalWithUnaryASTof: [ :x :y | (x cons: y) cdr ] ]"					],					"isTestMethod" : false,					"category" : "predicates",					"comment" : [ ],					"hash" : 4177821,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverForDoc",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_32",				"TheLittleProverTest>>#proofStep2:frame29:ast:",				"TheLittleProverTest>>#proofStep1:frame33:ast:",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_28"			]		},		"test_chapter_01_OldGamesNewRules_frame_11" : {			"implementors" : {				"TheLittleProverTest" : {					"sourceCode" : [						"test_chapter_01_OldGamesNewRules_frame_11",						"",						"\t\"(atom '())\"",						"",						"\tself assert: nil isAtom equals: true"					],					"body" : [						"self assert: nil isAtom equals: true"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [						"(atom '())"					],					"hash" : 3630997,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverForDoc"			]		},		"test_chapter_01_OldGamesNewRules_frame_16_backward" : {			"implementors" : {				"TheLittleProverTest" : {					"sourceCode" : [						"test_chapter_01_OldGamesNewRules_frame_16_backward",						"",						"\t| aGoal node |",						"\taGoal := [ :ast | ",						"\t         [ :a | ",						"\t         theory isAtomConsº value: ast value: false asLiteralRBNode ] ] ",						"\t\t         asGoalWithUnaryASTof: [ :a | a isAtom ].",						"",						"\tnode := RBMessageNode",						"\t\t        receiver: 0 asReifiedVar asRBNode",						"\t\t        selector: #cons:",						"\t\t        arguments: { 1 asReifiedVar asRBNode }.",						"\tself",						"\t\tassert: aGoal solutions asArray equals: { node };",						"\t\tassert: node asString equals: 'RBMessageNode(•₀ cons: •₁)'"					],					"body" : [						"| aGoal node |",						"aGoal := [ :ast | ",						"         [ :a | ",						"         theory isAtomConsº value: ast value: false asLiteralRBNode ] ] ",						"\t         asGoalWithUnaryASTof: [ :a | a isAtom ].",						"",						"node := RBMessageNode",						"\t        receiver: 0 asReifiedVar asRBNode",						"\t        selector: #cons:",						"\t        arguments: { 1 asReifiedVar asRBNode }.",						"self",						"\tassert: aGoal solutions asArray equals: { node };",						"\tassert: node asString equals: 'RBMessageNode(•₀ cons: •₁)'"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 4159169,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverForDoc"			]		},		"carConsº" : {			"implementors" : {				"TheLittleProver" : {					"sourceCode" : [						"carConsº",						"",						"\t\"",						"\t(dethm atom/cons (x y)",						"\t  (equal (atom (cons x y)) 'nil))\"",						"",						"\t^ [ :a :b | ",						"\t  [ :ast | [ :x :y | (ast unifyo value: a) , (x unifyo value: b) ] ] ",						"\t\t  asGoalWithUnaryASTof: [ :x :y | (x cons: y) car ] ]"					],					"body" : [						"^ [ :a :b | ",						"  [ :ast | [ :x :y | (ast unifyo value: a) , (x unifyo value: b) ] ] ",						"\t  asGoalWithUnaryASTof: [ :x :y | (x cons: y) car ] ]"					],					"isTestMethod" : false,					"category" : "predicates",					"comment" : [						"",						"\t(dethm atom/cons (x y)",						"\t  (equal (atom (cons x y)) 'nil))"					],					"hash" : 4177821,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverForDoc",				"TheLittleProverTest>>#proofStep1:frame29:ast:",				"TheLittleProverTest>>#proofStep2:frame44:ast:",				"TheLittleProverTest>>#test_chapter_1_OldGamesNewRules_frame_44_focus",				"TheLittleProverTest>>#test_chapter_1_OldGamesNewRules_frame_44",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_28"			]		},		"isAtomConsº" : {			"implementors" : {				"TheLittleProver" : {					"sourceCode" : [						"isAtomConsº",						"",						"\t\"",						"\t(dethm atom/cons (x y)",						"\t  (equal (atom (cons x y)) 'nil))",						"\t\"",						"",						"\t^ [ :a :b | ",						"\t  [ :astA | ",						"\t  [ :x :y | ",						"\t  | g1 g2 |",						"\t  g1 := astA unifyo value: a.",						"\t  g2 := false asLiteralRBNode unifyo value: b.",						"\t  g1 , g2 ] ] asGoalWithUnaryASTof: [ :x :y | (x cons: y) isAtom ] ]"					],					"body" : [						"^ [ :a :b | ",						"  [ :astA | ",						"  [ :x :y | ",						"  | g1 g2 |",						"  g1 := astA unifyo value: a.",						"  g2 := false asLiteralRBNode unifyo value: b.",						"  g1 , g2 ] ] asGoalWithUnaryASTof: [ :x :y | (x cons: y) isAtom ] ]"					],					"isTestMethod" : false,					"category" : "predicates",					"comment" : [						"",						"\t(dethm atom/cons (x y)",						"\t  (equal (atom (cons x y)) 'nil))",						"\t"					],					"hash" : 4177821,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverForDoc",				"TheLittleProverTest>>#proofStep1:frame21:ast:",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_21",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_16_byBlockClosure",				"TheLittleProverTest>>#flapjackEqualsConsº:isAtomº:",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_16_backward",				"TheLittleProverTest>>#consº:isAtomº:"			]		},		"test_chapter_01_OldGamesNewRules_frame_14" : {			"implementors" : {				"TheLittleProverTest" : {					"sourceCode" : [						"test_chapter_01_OldGamesNewRules_frame_14",						"",						"\t\"(atom (cons 'ham '(eggs)))\"",						"",						"\tself assert: (#ham cons: (#eggs cons: nil)) isAtom equals: false"					],					"body" : [						"self assert: (#ham cons: (#eggs cons: nil)) isAtom equals: false"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [						"(atom (cons 'ham '(eggs)))"					],					"hash" : 3631416,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverForDoc"			]		},		"test_chapter_01_OldGamesNewRules_frame_32" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverForDoc"			],			"implementors" : {				"TheLittleProverTest" : {					"sourceCode" : [						"test_chapter_01_OldGamesNewRules_frame_32",						"",						"\t| aGoal |",						"\taGoal := [ :rewritten | ",						"\t         [ :ast | ",						"\t         [ :a :b | ",						"\t         ast acl: [ :prover | ",						"\t\t         prover",						"\t\t\t         focus: [ :o | o isAtom ] do: theory cdrConsº;",						"\t\t\t         focus: [ :o | o ] do: theory isAtomNilº;",						"\t\t\t         then: [ :o | o unifyo value: rewritten asRBNode ] ] ] ] ",						"\t\t         asGoalWithUnaryASTof: [ :p :q | ",						"\t\t         ((p cons: q) car cons: nil) cdr isAtom ] ] asGoal.",						"",						"\tself assert: aGoal solutions asArray equals: { [ true ] unaryRBNode }"					],					"body" : [						"| aGoal |",						"aGoal := [ :rewritten | ",						"         [ :ast | ",						"         [ :a :b | ",						"         ast acl: [ :prover | ",						"\t         prover",						"\t\t         focus: [ :o | o isAtom ] do: theory cdrConsº;",						"\t\t         focus: [ :o | o ] do: theory isAtomNilº;",						"\t\t         then: [ :o | o unifyo value: rewritten asRBNode ] ] ] ] ",						"\t         asGoalWithUnaryASTof: [ :p :q | ",						"\t         ((p cons: q) car cons: nil) cdr isAtom ] ] asGoal.",						"",						"self assert: aGoal solutions asArray equals: { [ true ] unaryRBNode }"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3894615,					"argumentNames" : [ ]				}			}		},		"test_chapter_01_OldGamesNewRules_frame_16_byBlockClosure" : {			"implementors" : {				"TheLittleProverTest" : {					"sourceCode" : [						"test_chapter_01_OldGamesNewRules_frame_16_byBlockClosure",						"",						"\t| aGoal |",						"\taGoal := [ :rewrite | ",						"\t         [ :ast | ",						"\t         [ :a :b | ",						"\t         theory isAtomConsº value: ast value: rewrite asRBNode ] ] ",						"\t\t         asGoalWithUnaryASTof: [ :a :b | (a cons: b) isAtom ] ]",						"\t\t         asGoal.",						"\tself",						"\t\tassert: aGoal solutions asArray",						"\t\tequals: { [ false ] unaryRBNode }"					],					"body" : [						"| aGoal |",						"aGoal := [ :rewrite | ",						"         [ :ast | ",						"         [ :a :b | ",						"         theory isAtomConsº value: ast value: rewrite asRBNode ] ] ",						"\t         asGoalWithUnaryASTof: [ :a :b | (a cons: b) isAtom ] ]",						"\t         asGoal.",						"self assert: aGoal solutions asArray equals: { [ false ] unaryRBNode }"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3894615,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverForDoc"			]		},		"test_chapter_01_OldGamesNewRules_frame_06" : {			"implementors" : {				"TheLittleProverTest" : {					"sourceCode" : [						"test_chapter_01_OldGamesNewRules_frame_06",						"",						"\t\"(car (cons 'ham '(eggs)))\"",						"",						"\tself assert: (#ham cons: (#eggs cons: nil)) car equals: #ham"					],					"body" : [						"self assert: (#ham cons: (#eggs cons: nil)) car equals: #ham"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [						"(car (cons 'ham '(eggs)))"					],					"hash" : 3631370,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverForDoc"			]		},		"test_chapter_01_OldGamesNewRules_frame_16_byCompiledMethod" : {			"implementors" : {				"TheLittleProverTest" : {					"sourceCode" : [						"test_chapter_01_OldGamesNewRules_frame_16_byCompiledMethod",						"",						"\t| aGoal |",						"\taGoal := [ :rewrite | ",						"\t         [ :ast | self consº: ast isAtomº: rewrite asRBNode ] ",						"\t\t         asGoalWithUnaryASTof: self class >> #consª:isAtomª: ]",						"\t\t         asGoal.",						"\tself",						"\t\tassert: aGoal solutions asArray",						"\t\tequals: { [ false ] unaryRBNode }"					],					"body" : [						"| aGoal |",						"aGoal := [ :rewrite | ",						"         [ :ast | self consº: ast isAtomº: rewrite asRBNode ] ",						"\t         asGoalWithUnaryASTof: self class >> #consª:isAtomª: ] asGoal.",						"self assert: aGoal solutions asArray equals: { [ false ] unaryRBNode }"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3894615,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverForDoc"			]		},		"test_chapter_01_OldGamesNewRules_frame_28" : {			"implementors" : {				"TheLittleProverTest" : {					"sourceCode" : [						"test_chapter_01_OldGamesNewRules_frame_28",						"",						"\t| aGoal |",						"\taGoal := [ :rewritten | ",						"\t         [ :ast | ",						"\t         [ :a :b | ",						"\t         ast acl: [ :prover | ",						"\t\t         prover",						"\t\t\t         focus: [ :o | (o cons: nil) cdr isAtom ]",						"\t\t\t         do: theory carConsº;",						"\t\t\t         focus: [ :o | o isAtom ] do: theory cdrConsº;",						"\t\t\t         focus: [ :o | o ] do: theory isAtomNilº;",						"\t\t\t         then: [ :o | o unifyo value: rewritten asRBNode ] ] ] ] ",						"\t\t         asGoalWithUnaryASTof: [ :p :q | ",						"\t\t         ((p cons: q) car cons: nil) cdr isAtom ] ] asGoal.",						"",						"\tself assert: aGoal solutions asArray equals: { [ true ] unaryRBNode }"					],					"body" : [						"| aGoal |",						"aGoal := [ :rewritten | ",						"         [ :ast | ",						"         [ :a :b | ",						"         ast acl: [ :prover | ",						"\t         prover",						"\t\t         focus: [ :o | (o cons: nil) cdr isAtom ]",						"\t\t         do: theory carConsº;",						"\t\t         focus: [ :o | o isAtom ] do: theory cdrConsº;",						"\t\t         focus: [ :o | o ] do: theory isAtomNilº;",						"\t\t         then: [ :o | o unifyo value: rewritten asRBNode ] ] ] ] ",						"\t         asGoalWithUnaryASTof: [ :p :q | ",						"\t         ((p cons: q) car cons: nil) cdr isAtom ] ] asGoal.",						"",						"self assert: aGoal solutions asArray equals: { [ true ] unaryRBNode }"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3894615,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverForDoc"			]		},		"test_chapter_01_OldGamesNewRules_frame_21" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverForDoc"			],			"implementors" : {				"TheLittleProverTest" : {					"sourceCode" : [						"test_chapter_01_OldGamesNewRules_frame_21",						"",						"\t| aGoal |",						"\taGoal := [ :rewritten | ",						"\t         [ :ast | ",						"\t         [ :a :b | ",						"\t         ast acl: [ :prover | ",						"\t\t         prover",						"\t\t\t         focus: [ :o | #flapjack = o ] do: theory isAtomConsº;",						"\t\t\t         focus: [ :o | o ] do: self flapjackNilFalseº;",						"\t\t\t         then: [ :o | o unifyo value: rewritten asRBNode ] ] ] ] ",						"\t\t         asGoalWithUnaryASTof: [ :a :b | ",						"\t\t         #flapjack = (a cons: b) isAtom ] ] asGoal.",						"\tself",						"\t\tassert: aGoal solutions asArray",						"\t\tequals: { [ false ] unaryRBNode }"					],					"body" : [						"| aGoal |",						"aGoal := [ :rewritten | ",						"         [ :ast | ",						"         [ :a :b | ",						"         ast acl: [ :prover | ",						"\t         prover",						"\t\t         focus: [ :o | #flapjack = o ] do: theory isAtomConsº;",						"\t\t         focus: [ :o | o ] do: self flapjackNilFalseº;",						"\t\t         then: [ :o | o unifyo value: rewritten asRBNode ] ] ] ] ",						"\t         asGoalWithUnaryASTof: [ :a :b | ",						"\t         #flapjack = (a cons: b) isAtom ] ] asGoal.",						"self assert: aGoal solutions asArray equals: { [ false ] unaryRBNode }"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3894615,					"argumentNames" : [ ]				}			}		},		"test_chapter_01_OldGamesNewRules_frame_19" : {			"implementors" : {				"TheLittleProverTest" : {					"sourceCode" : [						"test_chapter_01_OldGamesNewRules_frame_19",						"",						"\t| aGoal |",						"\taGoal := [ :rewritten | ",						"\t         [ :ast | ",						"\t         self flapjackEqualsConsº: ast isAtomº: rewritten asRBNode ] ",						"\t\t         asGoalWithUnaryASTof:",						"\t\t         self class >> #flapjackEqualsConsª:isAtomª: ] asGoal.",						"\tself",						"\t\tassert: aGoal solutions asArray",						"\t\tequals: { [ #flapjack = false ] unaryRBNode }"					],					"body" : [						"| aGoal |",						"aGoal := [ :rewritten | ",						"         [ :ast | ",						"         self flapjackEqualsConsº: ast isAtomº: rewritten asRBNode ] ",						"\t         asGoalWithUnaryASTof:",						"\t         self class >> #flapjackEqualsConsª:isAtomª: ] asGoal.",						"self",						"\tassert: aGoal solutions asArray",						"\tequals: { [ #flapjack = false ] unaryRBNode }"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3894615,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverForDoc"			]		},		"isAtom" : {			"implementors" : {				"Cons" : {					"sourceCode" : [						"isAtom",						"",						"\t^ false"					],					"body" : [						"^ false"					],					"isTestMethod" : false,					"category" : "testing",					"comment" : [ ],					"hash" : 7430796,					"argumentNames" : [ ]				},				"Object" : {					"sourceCode" : [						"isAtom",						"",						"\t^ true"					],					"body" : [						"^ true"					],					"isTestMethod" : false,					"category" : "*Collections-Sequenceable-Cons",					"comment" : [ ],					"hash" : 1663882,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverForDoc",				"RBNodeTheoryTest>>#testUnifyConsIsAtomBlock",				"TheLittleProver>>#chapter_1_OldGamesNewRules_frame_21:value:",				"TheLittleProver>>#isAtomNilº",				"TheLittleProver>>#isAtomConsº",				"TheLittleProverTest>>#consCarCdro",				"TheLittleProverTest>>#proofStep1:frame29:ast:",				"TheLittleProverTest>>#cons:carcdr:",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_32",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_21",				"TheLittleProverTest>>#isAtomConso",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_14",				"TheLittleProverTest>>#flapjackEqualsConsª:isAtomª:",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_16_byBlockClosure",				"TheLittleProverTest>>#consª:isAtomª:",				"TheLittleProverTest>>#ª:consIsAtom:",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_16_backward",				"TheLittleProverTest>>#proofStep2:frame29:ast:",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_11",				"TheLittleProverTest>>#proofStep1:frame33:ast:",				"TheLittleProverTest>>#isAtom:conso:",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_28"			]		},		"consª:isAtomª:" : {			"implementors" : {				"TheLittleProverTest" : {					"sourceCode" : [						"consª: a isAtomª: b",						"",						"\t(a cons: b) isAtom"					],					"body" : [						"(a cons: b) isAtom"					],					"isTestMethod" : false,					"category" : "code as data",					"comment" : [ ],					"hash" : 37709597,					"argumentNames" : [						"a",						"b"					]				}			},			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverForDoc",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_16_byCompiledMethod"			]		},		"consº:isAtomº:" : {			"implementors" : {				"TheLittleProverTest" : {					"sourceCode" : [						"consº: ast isAtomº: rewritten",						"",						"\t^ [ :a :b | theory isAtomConsº value: ast value: rewritten ]"					],					"body" : [						"^ [ :a :b | theory isAtomConsº value: ast value: rewritten ]"					],					"isTestMethod" : false,					"category" : "code as data",					"comment" : [ ],					"hash" : 37709346,					"argumentNames" : [						"ast",						"rewritten"					]				}			},			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverForDoc",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_16_byCompiledMethod"			]		},		"flapjackEqualsConsº:isAtomº:" : {			"implementors" : {				"TheLittleProverTest" : {					"sourceCode" : [						"flapjackEqualsConsº: ast isAtomº: rewritten",						"",						"\t^ [ :a :b | ",						"\t  ast acl: [ :prover | ",						"\t\t  prover",						"\t\t\t  focus: [ :o | #flapjack = o ] do: theory isAtomConsº;",						"\t\t\t  then: [ :o | o unifyo value: rewritten ] ] ]"					],					"body" : [						"^ [ :a :b | ",						"  ast acl: [ :prover | ",						"\t  prover",						"\t\t  focus: [ :o | #flapjack = o ] do: theory isAtomConsº;",						"\t\t  then: [ :o | o unifyo value: rewritten ] ] ]"					],					"isTestMethod" : false,					"category" : "tests",					"comment" : [ ],					"hash" : 37709346,					"argumentNames" : [						"ast",						"rewritten"					]				}			},			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverForDoc",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_19"			]		},		"flapjackEqualsConsª:isAtomª:" : {			"implementors" : {				"TheLittleProverTest" : {					"sourceCode" : [						"flapjackEqualsConsª: a isAtomª: b",						"",						"\t#flapjack = (a cons: b) isAtom"					],					"body" : [						"#flapjack = (a cons: b) isAtom"					],					"isTestMethod" : false,					"category" : "tests",					"comment" : [ ],					"hash" : 37709752,					"argumentNames" : [						"a",						"b"					]				}			},			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverForDoc",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_19"			]		},		"isAtomNilº" : {			"implementors" : {				"TheLittleProver" : {					"sourceCode" : [						"isAtomNilº",						"",						"\t\"",						"\t(dethm atom/cons (x y)",						"\t  (equal (atom (cons x y)) 'nil))\"",						"",						"\t^ [ :a :b | ",						"\t  [ :astA | ",						"\t  [ ",						"\t  | g1 g2 |",						"\t  g1 := astA unifyo value: a.",						"\t  g2 := true asLiteralRBNode unifyo value: b.",						"\t  g1 , g2 ] ] asGoalWithUnaryASTof: [ nil isAtom ] ]"					],					"body" : [						"^ [ :a :b | ",						"  [ :astA | ",						"  [ ",						"  | g1 g2 |",						"  g1 := astA unifyo value: a.",						"  g2 := true asLiteralRBNode unifyo value: b.",						"  g1 , g2 ] ] asGoalWithUnaryASTof: [ nil isAtom ] ]"					],					"isTestMethod" : false,					"category" : "predicates",					"comment" : [						"",						"\t(dethm atom/cons (x y)",						"\t  (equal (atom (cons x y)) 'nil))"					],					"hash" : 4177821,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverForDoc",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_32",				"TheLittleProverTest>>#proofStep3:frame29:ast:",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_28"			]		},		"flapjackNilFalseº" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverForDoc",				"TheLittleProverTest>>#proofStep2:frame21:ast:",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_21"			],			"implementors" : {				"TheLittleProverTest" : {					"sourceCode" : [						"flapjackNilFalseº",						"",						"\t^ [ :a :b | ",						"\t  [ :ast1 | ",						"\t  [ ",						"\t  | g1 g2 |",						"\t  g1 := a unifyo value: ast1.",						"\t  g2 := [ :ast2 | [ b unifyo value: ast2 ] ] asGoalWithUnaryASTof: [ ",						"\t\t        false ].",						"\t  g1 , g2 ] ] asGoalWithUnaryASTof: [ #flapjack = false ] ]"					],					"body" : [						"^ [ :a :b | ",						"  [ :ast1 | ",						"  [ ",						"  | g1 g2 |",						"  g1 := a unifyo value: ast1.",						"  g2 := [ :ast2 | [ b unifyo value: ast2 ] ] asGoalWithUnaryASTof: [ ",						"\t        false ].",						"  g1 , g2 ] ] asGoalWithUnaryASTof: [ #flapjack = false ] ]"					],					"isTestMethod" : false,					"category" : "tests",					"comment" : [ ],					"hash" : 3630493,					"argumentNames" : [ ]				}			}		}	}}