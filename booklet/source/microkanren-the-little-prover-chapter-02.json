{	"classes" : {		"TheLittleProverTest" : {			"hash" : 2836736,			"definition" : "Srfi41AbstractTest subclass: #TheLittleProverTest\r\tinstanceVariableNames: 'theory'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Tests'",			"comment" : [				"A RBProgramNodeIdentityVisitorTest is a test class for testing the behavior of RBProgramNodeIdentityVisitor"			],			"category" : "MicroKanren-Tests"		}	},	"messages" : {		"test_chapter_02_EvenOlderGames_frame_7" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverChapter02ForDoc"			],			"implementors" : {				"TheLittleProverTest" : {					"sourceCode" : [						"test_chapter_02_EvenOlderGames_frame_7",						"",						"\t| aGoal node |",						"\taGoal := [ :rewritten | ",						"\t         [ :ast | ",						"\t         [ :a :c | ",						"\t         ast",						"\t\t         acl: [ :prover | ",						"\t\t\t         prover",						"\t\t\t\t         focus: [ :o | o ]",						"\t\t\t\t         do: [ :o :r | theory ifSameº value: r value: o ];",						"\t\t\t\t         then: [ :o | ",						"\t\t\t\t\t         theory unifyº value: o value: rewritten asRBNode ] ]",						"\t\t         contextVariables: #(  ) ] ] asGoalWithUnaryASTof: [ :a :c | ",						"\t\t         (3 cons: nil) isAtom",						"\t\t\t         ifTrue: [ a ]",						"\t\t\t         ifFalse: [ c ] ] ] asGoal.",						"",						"\tnode := self expectedRBNode_chapter_02_frame_7.",						"\tself",						"\t\tassert: aGoal solutions asArray equals: { node };",						"\t\tassert: node formattedCode equals: '•₀",						"\tifTrue: [ ",						"\t\t(3 cons: nil) isAtom",						"\t\t\tifTrue: [ •₁ ]",						"\t\t\tifFalse: [ •₂ ] ]",						"\tifFalse: [ ",						"\t\t(3 cons: nil) isAtom",						"\t\t\tifTrue: [ •₁ ]",						"\t\t\tifFalse: [ •₂ ] ]'"					],					"body" : [						"| aGoal node |",						"aGoal := [ :rewritten | ",						"         [ :ast | ",						"         [ :a :c | ",						"         ast",						"\t         acl: [ :prover | ",						"\t\t         prover",						"\t\t\t         focus: [ :o | o ]",						"\t\t\t         do: [ :o :r | theory ifSameº value: r value: o ];",						"\t\t\t         then: [ :o | ",						"\t\t\t\t         theory unifyº value: o value: rewritten asRBNode ] ]",						"\t         contextVariables: #(  ) ] ] asGoalWithUnaryASTof: [ :a :c | ",						"\t         (3 cons: nil) isAtom",						"\t\t         ifTrue: [ a ]",						"\t\t         ifFalse: [ c ] ] ] asGoal.",						"",						"node := self expectedRBNode_chapter_02_frame_7.",						"self",						"\tassert: aGoal solutions asArray equals: { node };",						"\tassert: node formattedCode equals: '•₀",						"\tifTrue: [ ",						"\t\t(3 cons: nil) isAtom",						"\t\t\tifTrue: [ •₁ ]",						"\t\t\tifFalse: [ •₂ ] ]",						"\tifFalse: [ ",						"\t\t(3 cons: nil) isAtom",						"\t\t\tifTrue: [ •₁ ]",						"\t\t\tifFalse: [ •₂ ] ]'"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 4157579,					"argumentNames" : [ ]				}			}		},		"test_chapter_02_EvenOlderGames_frame_5" : {			"implementors" : {				"TheLittleProverTest" : {					"sourceCode" : [						"test_chapter_02_EvenOlderGames_frame_5",						"",						"\t| aGoal |",						"\taGoal := [ :rewritten | ",						"\t         [ :ast | ",						"\t         [ :a :c | ",						"\t         ast",						"\t\t         acl: [ :prover | ",						"\t\t\t         prover",						"\t\t\t\t         focus: [ :o | o ] do: theory ifSameº;",						"\t\t\t\t         then: [ :o | ",						"\t\t\t\t\t         theory unifyº value: o value: rewritten asRBNode ] ]",						"\t\t         contextVariables: #(  ) ] ] asGoalWithUnaryASTof: [ :a :c | ",						"\t\t         a",						"\t\t\t         ifTrue: [ 3 ]",						"\t\t\t         ifFalse: [ c ] ] ] asGoal.",						"",						"\tself assert: aGoal solutions asArray equals: { 3 asLiteralRBNode }"					],					"body" : [						"| aGoal |",						"aGoal := [ :rewritten | ",						"         [ :ast | ",						"         [ :a :c | ",						"         ast",						"\t         acl: [ :prover | ",						"\t\t         prover",						"\t\t\t         focus: [ :o | o ] do: theory ifSameº;",						"\t\t\t         then: [ :o | ",						"\t\t\t\t         theory unifyº value: o value: rewritten asRBNode ] ]",						"\t         contextVariables: #(  ) ] ] asGoalWithUnaryASTof: [ :a :c | ",						"\t         a",						"\t\t         ifTrue: [ 3 ]",						"\t\t         ifFalse: [ c ] ] ] asGoal.",						"",						"self assert: aGoal solutions asArray equals: { 3 asLiteralRBNode }"					],					"isTestMethod" : true,					"category" : "tests",					"comment" : [ ],					"hash" : 3894396,					"argumentNames" : [ ]				}			},			"senders" : [				"BaselineOfMicroKanren>>#scriptExportTheLittleProverChapter02ForDoc"			]		}	}}