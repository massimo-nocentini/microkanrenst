{	"classes" : {		"Eta" : {			"hash" : 6843392,			"definition" : "Suspended subclass: #Eta\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"Graph" : {			"hash" : 6553344,			"definition" : "Object subclass: #Graph\r\tinstanceVariableNames: 'vertices edges'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Unordered-Graph'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tedges:\t\t<Object>",				"\tvertices:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Collections-Unordered-Graph"		},		"MKRealogIDType" : {			"hash" : 2279936,			"definition" : "Object subclass: #MKRealogIDType\r\tinstanceVariableNames: 'id'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Realog'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tid:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Realog"		},		"RBLiteralValueNode" : {			"hash" : 1183744,			"definition" : "RBLiteralNode subclass: #RBLiteralValueNode\r\tinstanceVariableNames: 'value sourceText'\r\tclassVariableNames: ''\r\tpackage: 'AST-Core-Nodes'",			"comment" : [				"RBLiteralNode is an AST node that represents literal values (e.g., #foo, true, 1, etc.), but not literal arrays.",				"",				"The sourceText field is needed for the formatter for the correct printing of strings vs symbols. If we just call",				"value asString, both a string and a symbol print itself as a string.",				"",				"Instance Variables",				"\tvalue\t<Numeric | Symbol | String  | Character>\tthe literal value I represent",				"\tsourceText <String> the original source text of this literal"			],			"category" : "AST-Core-Nodes"		},		"ACL" : {			"hash" : 3367936,			"definition" : "Object subclass: #ACL\r\tinstanceVariableNames: 'steps node lastBlock contextVariables freshContextVariables'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-ACL'",			"comment" : [				"A Computational Logic."			],			"category" : "MicroKanren-ACL"		},		"AlphaRule" : {			"hash" : 6835200,			"definition" : "Goal subclass: #AlphaRule\r\tinstanceVariableNames: 'x y'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tx:\t\t<Object>",				"\ty:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"Predicate" : {			"hash" : 6846464,			"definition" : "Goal subclass: #Predicate\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Predicates'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Predicates"		},		"Failed" : {			"hash" : 6836224,			"definition" : "Atomic subclass: #Failed\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"Object" : {			"hash" : 804608,			"definition" : "ProtoObject subclass: #Object\r\tinstanceVariableNames: ''\r\tclassVariableNames: 'DependentsFields'\r\tpackage: 'Kernel-Objects'",			"comment" : [				"`Object` is the root class for almost all of the other classes in the class hierarchy. The exceptions are ProtoObject (the superclass of Object) and its subclasses.",				"",				"Class `Object` provides default behavior common to all normal objects, such as access, copying, comparison, error handling, message sending, and reflection. Also utility messages that all objects should respond to are defined here.",				"",				"`Object` has no instance variables, nor should any be added. This is due to several classes of objects that inherit from Object that have special implementations (SmallInteger and UndefinedObject for example) or the VM knows about and depends on the structure and layout of certain standard classes.",				"",				"Class Variables:",				"\tDependentsFields\t\tan IdentityDictionary",				"\t\tProvides a virtual 'dependents' field so that any object may have one",				"\t\tor more dependent views, synchronized by the changed:/update: protocol.",				"\t\tNote that class Model has a real slot for its dependents, and overrides",				"\t\tthe associated protocol with more efficient implementations.",				"",				"Because `Object` is the root of the inheritance tree, methods are often defined in Object to give all objects special behaviors needed by certain subsystems or applications, or to respond to certain general test messages such as isMorph.",				"",				"",				"###Miscellanous Discussions",				"",				"About `at:` index accepting float and not only integers",				" ",				"This behavior is also free in the sense that the failure code is only invoked when the primitive fails and so adds nothing to the cost of successful accesses, which are the high dynamic frequency operation.  It will also show up under",				"profiling if one is concerned about efficiency, and so isn't a hidden cost.",				"",				"It is also in keeping with Pharo's mixed mode/arbitrary precision",				"implicit coercion number system that one *can* use fractions or floats as",				"indices.  Stripping out coercions like this will make the system more brittle.  So ",				"please do *not* remove this hack.  I think it's a feature and a useful one.",				"",				"Can you give me an example that demonstrates the usefulness of this feature?",				"",				"```",				"| a r |",				"a := Array new: 10 withAll: 0.",				"r := Random new.",				"100 timesRepeat: [| v | v := r next * 10 + 1. a at: v put: (a at: v) + 1].",				"a",				"```",				"",				"i.e. I didn't have to provide an explicit rounding step.  That's useful.  But in general anywhere ",				"where an index is derived by some calculation not having to provide the rounding step could be ",				"useful/helpful/more concise.  e.g. (n roundTo: 0.1) * 10 vs ((n roundTo: 0.1) * 10) asInteger.",				"",				"Some thought went into the original choice.  It is not a hack but there by intent.  The integers are ",				"simply a subset of the reals and forcing the programmer to use them is favouring the machine ",				"above the programmer.",				"",				"But I think you should justify getting rid of it rather than my having to justify keeping it.  Getting ",				"rid of it risks breaking code.  If it is there but does not harm then why get rid of it?",				"",				"best Eliot Miranda "			],			"category" : "Kernel-Objects"		},		"TestAsserter" : {			"hash" : 371968,			"definition" : "Object subclass: #TestAsserter\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'SUnit-Core-Kernel'",			"comment" : [				"I understand methods beginning #assert:... and #deny:... (and my class-side understands #assert:description:).  I am the superclass of TestCase and TestResource and can also be the superclass of any test helper classes you create to factor out test behaviour.  I exist so that test code can be refactored between my subclasses without difficulty.",				"",				"Send #assert:description: when you want to check for an expected value. For example, you might say",				"\tself assert: socket isOpen description: 'We requested a socket but now it is not open'.",				"to test whether or not a socket is open at a point in a test.  Use description strings both to give more information about where a test failed in debugger notifiers and logs, and to document the intent of a test.  Other methods include #assert:, #assert:description:resumable:, #deny:, #deny:description:, #deny:description:resumable:, #should:raise:, #should:raise:description:, #shouldnt:raise:, #shouldnt:raise:description:.  All these methods are defined on the superclass, TestAsserter.  (Any convenience assertion methods you create for general use should also be defined in my 'convenience' protocol.)",				"",				"Override my class-side #isLogging in subclasses to have failed assertion descriptions shown on the Transcript.  To have them appear elsewhere, also override my class-side #failureLog."			],			"category" : "SUnit-Core-Kernel"		},		"Cons" : {			"hash" : 6819840,			"definition" : "Object subclass: #Cons\r\tinstanceVariableNames: 'car cdr'\r\tclassVariableNames: ''\r\tpackage: 'Collections-Sequenceable-Cons'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tcar:\t\t<Object>",				"\tcdr:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "Collections-Sequenceable-Cons"		},		"TAssertable" : {			"hash" : 385280,			"definition" : "Trait named: #TAssertable\r\tinstanceVariableNames: ''\r\tpackage: 'SUnit-Core-Traits'",			"comment" : [				"I think it is not used yet. I think it is a Trait so that we can make things assertable and not need to subclass from TestCase for example. I may expect that TestCase uses such Trait instead of implementing all those methods,  but it is not the case. Even more, TAssertable users size -> 0. ",				"",				"So...seems a work half done. Adrian Kuhn introduce it. Check",				"http://forum.world.st/template/NamlServlet.jtp?macro=search_page&node=1294837&query=TAssertable"			],			"category" : "SUnit-Core-Traits"		},		"Succeed" : {			"hash" : 6837248,			"definition" : "Atomic subclass: #Succeed\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"Master" : {			"hash" : 6845440,			"definition" : "TablingCall subclass: #Master\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"RBSmalllintTestLocalMethodsSameThanTraitObject" : {			"hash" : 4248064,			"definition" : "RBSmalllintTestSuperclassObject subclass: #RBSmalllintTestLocalMethodsSameThanTraitObject\r\tuses: TAssertable\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Refactoring-Tests-Critics'",			"comment" : [				"This class should trigger the RBLocalMethodsSameThanTraitRule"			],			"category" : "Refactoring-Tests-Critics"		},		"MKRealogEmployee" : {			"hash" : 2833664,			"definition" : "MKRealogIDType subclass: #MKRealogEmployee\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Realog'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Realog"		},		"FreshRB" : {			"hash" : 3366400,			"definition" : "Fresh subclass: #FreshRB\r\tinstanceVariableNames: 'nodeBlock selectBlock contextVariables'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-RB'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tcontextVariables:\t\t<Object>",				"\tnodeBlock:\t\t<Object>",				"\tselectBlock:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-RB"		},		"RBLogicVariableNode" : {			"hash" : 3365888,			"definition" : "RBVariableNode subclass: #RBLogicVariableNode\r\tinstanceVariableNames: 'logicVar'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-RB'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tlogicVar:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-RB"		},		"Run" : {			"hash" : 6842368,			"definition" : "Goal subclass: #Run\r\tinstanceVariableNames: 'goal'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tgoal:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"MKRealogCompany" : {			"hash" : 2308608,			"definition" : "MKRealogIDType subclass: #MKRealogCompany\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Realog'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Realog"		},		"Symbol" : {			"hash" : 791808,			"definition" : "String subclass: #Symbol\r\tinstanceVariableNames: ''\r\tclassVariableNames: 'NewSymbols OneCharacterSymbols SelectorTable SymbolTable'\r\tpackage: 'Collections-Strings-Base'",			"comment" : [				"I represent Strings that are created uniquely. Thus, someString asSymbol == someString asSymbol.",				"",				"To see the difference between Symbol and Strings look at this example:",				"",				"```",				"| s1 s2 |",				"s1 := 1234 asString.",				"s2 := 1234 asString.",				"",				"\"Strings are not unique, while Symbols are\"",				"s1 = s2. \"true\"",				"s1 == s2. \"false\"",				"",				"s1 asSymbol = s2 asSymbol. \"true\"",				"s1 asSymbol == s2 asSymbol. \"true\"",				"",				"(s1 class allInstances select: [:s | s = s1 ]) size. \"2\"",				"(s1 asSymbol class allInstances select: [:s | s = s1 asSymbol ]) size. \"1\"",				"```",				"",				"Comparing Symbols takes less time than comparing Strings.",				"",				"```",				"[ #stringA = #stringB ] bench. \"26,812,864 per second\"",				"[ 'StringA' = 'StringB' ] bench. \"3,492,987 per second\"",				"```"			],			"category" : "Collections-Strings-Base"		},		"Cond" : {			"hash" : 6839808,			"definition" : "Goal subclass: #Cond\r\tinstanceVariableNames: 'clauses if'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tclauses:\t\t<Object>",				"\tif:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"TablingCall" : {			"hash" : 6844928,			"definition" : "Goal subclass: #TablingCall\r\tinstanceVariableNames: 'args cache'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\targs:\t\t<Object>",				"\tcache:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"True" : {			"hash" : 787712,			"definition" : "Boolean subclass: #True\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Objects'",			"comment" : [				"True defines the behavior of its single instance, true -- logical assertion. Notice how the truth-value checks become direct message sends, without the need for explicit testing.",				"",				"Be aware however that most of these methods are not sent as real messages in normal use. Most are inline coded by the compiler as test and jump bytecodes - avoiding the overhead of the full message sends. So simply redefining these methods here will have no effect."			],			"category" : "Kernel-Objects"		},		"Integer" : {			"hash" : 1012992,			"definition" : "Number subclass: #Integer\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Numbers'",			"comment" : [				"I am a common abstract superclass for all Integer implementations. My implementation subclasses are SmallInteger, LargePositiveInteger, and LargeNegativeInteger.",				"\t",				"Integer division consists of:",				"\t/\texact division, answers a fraction if result is not a whole integer",				"\t//\tanswers an Integer, rounded towards negative infinity",				"\t\\\\\tis modulo rounded towards negative infinity",				"\tquo: truncated division, rounded towards zero"			],			"category" : "Kernel-Numbers"		},		"Suspended" : {			"hash" : 6842880,			"definition" : "Goal subclass: #Suspended\r\tinstanceVariableNames: 'receiver nestedGoal'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tnestedGoal:\t\t<Object>",				"\treceiver:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"RBBlockNode" : {			"hash" : 1176832,			"definition" : "RBValueNode subclass: #RBBlockNode\r\tinstanceVariableNames: 'left right colons arguments bar body scope bcToASTCache'\r\tclassVariableNames: ''\r\tpackage: 'AST-Core-Nodes'",			"comment" : [				"RBBlockNode is an AST node that represents a block \"[...]\".",				"",				"Like RBMethodNode, the scope attribute is only valid after doing a semantic analyzing step.",				"",				"Instance Variables:",				"\targuments\t<SequenceableCollection of: RBVariableNode>\tthe arguments for the block",				"\tbar\t<Integer | nil>\tposition of the | after the arguments",				"\tbody\t<RBSequenceNode>\tthe code inside the block",				"\tcolons\t<SequenceableCollection of: Integer>\tpositions of each : before each argument",				"\tleft\t<Integer>\tposition of [",				"\tright\t<Integer>\tposition of ]",				"\tscope\t<OCBlockScope | OCOptimizedBlockScope | nil> the scope associated with this code of this block",				""			],			"category" : "AST-Core-Nodes"		},		"PredicateFindAllo" : {			"hash" : 6849024,			"definition" : "PredicateTernary subclass: #PredicateFindAllo\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Predicates'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Predicates"		},		"Atomic" : {			"hash" : 6835712,			"definition" : "Goal subclass: #Atomic\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"False" : {			"hash" : 787200,			"definition" : "Boolean subclass: #False\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Objects'",			"comment" : [				"False defines the behavior of its single instance, false -- logical negation. Notice how the truth-value checks become direct message sends, without the need for explicit testing.",				"",				"Be aware however that most of these methods are not sent as real messages in normal use. Most are inline coded by the compiler as test and jump bytecodes - avoiding the overhead of the full message sends. So simply redefining these methods here will have no effect."			],			"category" : "Kernel-Objects"		},		"Boolean" : {			"hash" : 871680,			"definition" : "Object subclass: #Boolean\r\tinstanceVariableNames: ''\r\tclassVariableNames: 'DeOptimizeMustBeBoolean'\r\tpackage: 'Kernel-Objects'",			"comment" : [				"Boolean is an abstract class defining the protocol for logic testing operations and conditional control structures for the logical values represented by the instances of its subclasses True and False.",				"",				"Boolean redefines #new so no instances of Boolean can be created. It also redefines several messages in the 'copying' protocol to ensure that only one instance of each of its subclasses True (the global true, logical assertion) and False (the global false, logical negation) ever exist in the system."			],			"category" : "Kernel-Objects"		},		"Not" : {			"hash" : 6841856,			"definition" : "Goal subclass: #Not\r\tinstanceVariableNames: 'cuttingGoal'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tcuttingGoal:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"RBSelectorNode" : {			"hash" : 1179392,			"definition" : "RBValueNode subclass: #RBSelectorNode\r\tinstanceVariableNames: 'value keywordPositions'\r\tclassVariableNames: ''\r\tpackage: 'AST-Core-Nodes'",			"comment" : [				"RBSelectorNode is an AST node that represents a selector (unary, binary, keyword).",				"",				"Instance Variables:",				"\tvalue\t<String>\tthe selector's name I represent or the ensemble of keywords I'm made of",				"\tstart <Integer>\tthe position where I was found at the source code"			],			"category" : "AST-Core-Nodes"		},		"Var" : {			"hash" : 6832640,			"definition" : "Object subclass: #Var\r\tinstanceVariableNames: 'id named'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tid:\t\t<Object>",				"\tnamed:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren"		},		"Reuse" : {			"hash" : 6845952,			"definition" : "TablingCall subclass: #Reuse\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"Unify" : {			"hash" : 6839296,			"definition" : "Binary subclass: #Unify\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"Conj" : {			"hash" : 6838272,			"definition" : "Binary subclass: #Conj\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"RBSequenceNode" : {			"hash" : 1161728,			"definition" : "RBProgramNode subclass: #RBSequenceNode\r\tinstanceVariableNames: 'leftBar rightBar statements periods temporaries'\r\tclassVariableNames: ''\r\tpackage: 'AST-Core-Nodes'",			"comment" : [				"RBSequenceNode is an AST node that represents a sequence of statements. Both RBBlockNodes and RBMethodNodes contain these.",				"",				"Instance Variables:",				"\tleftBar\t<Integer | nil>\tthe position of the left | in the temporaries definition",				"\trightBar\t<Integer | nil>\tthe position of the right | in the temporaries definition",				"\tstatements\t<SequenceableCollection of: RBReturnNode or RBValueNode> the statement nodes",				"\tperiods\t<SequenceableCollection of: Integer>\tthe positions of all the periods that separate the statements",				"\ttemporaries\t<SequenceableCollection of: RBVariableNode>\tthe temporaries defined",				""			],			"category" : "AST-Core-Nodes"		},		"RBMessageNode" : {			"hash" : 1183488,			"definition" : "RBValueNode subclass: #RBMessageNode\r\tinstanceVariableNames: 'receiver selector keywordsPositions arguments'\r\tclassVariableNames: ''\r\tpackage: 'AST-Core-Nodes'",			"comment" : [				"RBMessageNode is an AST node that represents a message send.",				"",				"Instance Variables:",				"\targuments\t<SequenceableCollection of: RBValueNode>\t our argument nodes",				"\treceiver\t<RBValueNode>\tthe receiver's node",				"\tselector\t<Symbol>\tthe selector we're sending",				"\tkeywordsPositions\t<IntegerArray | nil>\tthe positions of the selector keywords",				""			],			"category" : "AST-Core-Nodes"		},		"Disj" : {			"hash" : 6838784,			"definition" : "Binary subclass: #Disj\r\tinstanceVariableNames: 'combineBlock'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tcombineBlock:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"Goal" : {			"hash" : 6834688,			"definition" : "Object subclass: #Goal\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"DTTestResultType class" : {			"hash" : 2977536,			"definition" : "DTTestResultType class\r\tinstanceVariableNames: ''",			"comment" : [				"I model an abstract type of result for the run of a test case."			],			"category" : "DrTests-TestsRunner-Results"		},		"SequenceableCollection" : {			"hash" : 855040,			"definition" : "Collection subclass: #SequenceableCollection\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'Collections-Abstract-Base'",			"comment" : [				"I am an abstract superclass for collections that have a well-defined order associated with their elements. Thus each element is externally-named by integers referred to as indices."			],			"category" : "Collections-Abstract-Base"		},		"PredicateBagOfo" : {			"hash" : 6848512,			"definition" : "PredicateTernary subclass: #PredicateBagOfo\r\tinstanceVariableNames: 'variables'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Predicates'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tvariables:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Predicates"		},		"Var class" : {			"hash" : 6832384,			"definition" : "Var class\r\tinstanceVariableNames: ''",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren"		},		"Tabled" : {			"hash" : 6844416,			"definition" : "Goal subclass: #Tabled\r\tinstanceVariableNames: 'block args table'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\targs:\t\t<Object>",				"\tblock:\t\t<Object>",				"\ttable:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"MKGoalInspect" : {			"hash" : 6836736,			"definition" : "Atomic subclass: #MKGoalInspect\r\tinstanceVariableNames: 'block'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tblock:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"State" : {			"hash" : 6831104,			"definition" : "Object subclass: #State\r\tinstanceVariableNames: 'substitution birthdate path'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tbirthdate:\t\t<Object>",				"\tpath:\t\t<Object>",				"\tsubstitution:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren"		},		"BlockClosure" : {			"hash" : 9472,			"definition" : "Object variableSubclass: #BlockClosure\r\tinstanceVariableNames: 'outerContext startpc numArgs'\r\tclassVariableNames: ''\r\tpackage: 'Kernel-Methods'",			"comment" : [				"I contain a sequence of operations. I am defined by Smalltalk expressions inside square brackets. I permit to defer the enclosed operations until I execute a variant of #value. I can have my own arguments and temporaries as a regular method, but I am also able to use external variables: my enclosing method or block temporaries, arguments and receiver.",				"",				"examples :",				"[ 1 + 2 ] value",				"[ :arg | ",				"\t| temp | ",				"\ttemp := arg. ",				"\ttemp ] value: 5",				"[ ^ 5 ] value",				"",				"My return value corresponds to my final expression. A non local return (^) has the same effect as if I did not exist: it returns from my enclosing method, even if I'm nested in other blocks. ",				"",				"Implementation:",				"",				"Instance variables:",				"\touterContext <Context|nil> context that defined me",				"\tstartpc: <SmallInteger> (pc = program counter) offset of my first bytecode instruction in the compiledMethod bytecode  ",				"\tnumArgs: <SmallInteger> my number of arguments",				"",				"I am created at runtime through a special bytecode:",				"closureNumCopied: x numArgs: y bytes z1 to z2",				"On creation, the currently executed context is set to my outerContext, z1 is set as my startpc and y is set as my numArgs. After my creation, the current execution flow jumps to my last bytecode, z2, to skip the execution of my bytecode which is deferred until I execute a variant of #value.",				"",				"I am executed when I receive a variant of the message value. This message creates a new context, a block context <MethodContext>, which reference me in its variable closureOrNil. This new context executes my bytecode, which correspond to a subset of the bytecode of my enclosing method, starting at startpc and ending in blockReturn/return bytecode.",				"",				"Accessing variables of the my enclosing context is different depending on variables because of various optimizations:",				"- self: I access the receiver of my enclosing method by accessing my context's receiver, which is always set to the enclosing method receiver.",				"- copied variables: If I read a variable from an outerContext but I don't write into it and the variable is not modified after the BlockClosure creation, then the variable is copied in the blockClosure to be more efficient. ",				"- full variable: If I access and edit a variable from an outerContext, then the variable is stored in an external heap allocated array (named tempVector). The tempVector is known by the method and the block so they can both read and write these variables.",				"",				"Optimized block closures: ",				"Common blocks (2/3 of the blocks) are optimized directly in the compiler and have special behaviors. These blocks are the arguments/receiver of control structures: #ifNil:, #ifNotNil:, #ifTrue:, #ifFalse:, #whileTrue:, #whileFalse:, #to:do:, #to:by:do: ."			],			"category" : "Kernel-Methods"		},		"NumberParser" : {			"hash" : 1079040,			"definition" : "Object subclass: #NumberParser\r\tinstanceVariableNames: 'sourceStream base neg integerPart fractionPart exponent scale nDigits lastNonZero requestor failBlock'\r\tclassVariableNames: ''\r\tpackage: 'NumberParser-Base'",			"comment" : [				"NumberParser is an abstract class for parsing and building numbers from string/stream.",				"It offers a framework with utility methods and exception handling.",				"",				"Number syntax is not defined and should be subclassResponsibility.",				"",				"Instance variables:",				"sourceStream <Stream> the stream of characters from which the number is read",				"base <Integer> the radix in which to interpret digits",				"neg <Boolean> true in case of minus sign",				"integerPart <Integer> the integer part of the number",				"fractionPart <Integer> the fraction part of the number if any",				"exponent <Integer> the exponent used in scientific notation if any",				"scale <Integer> the scale used in case of ScaledDecimal number if any",				"nDigits <Integer> number of digits read to form an Integer",				"lasNonZero <Integer> position of last non zero digit, starting at 1 from left, 0 if all digits are zero",				"requestor <?> could eventually be used to insert an error message in a text editor",				"failBlock <BlockClosure> Block to execute whenever an error occurs"			],			"category" : "NumberParser-Base"		},		"MKRealogContract" : {			"hash" : 2833152,			"definition" : "MKRealogIDType subclass: #MKRealogContract\r\tinstanceVariableNames: 'employee company type'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Realog'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tcompany:\t\t<Object>",				"\temployee:\t\t<Object>",				"\ttype:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Realog"		},		"RBNode" : {			"hash" : 1151488,			"definition" : "Object subclass: #RBNode\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'AST-Core-Nodes'",			"comment" : [				"I'm the superclass of the all the nodes for ",				"\t- expressions and methods (subclasses of RBProgramNode) - historically it was the only tree and ",				"\tit was the only part concerned with refactorings (hence the RB suffix for RegactoringBrowser).",				"\t- class definition (just nodes to represent the class creation messages),",				"\t- full program (class definitions or method definitions)",				"",				"In the future my prefix may change to convey the fact that my hierarchy is much more than supporting compiler and refactorings.",				"",				"I'm a new player in the field, do not hesitate to improve me."			],			"category" : "AST-Core-Nodes"		},		"RBProgramNodeSendsoVisitor" : {			"hash" : 3364864,			"definition" : "RBProgramNodeMKVisitor subclass: #RBProgramNodeSendsoVisitor\r\tinstanceVariableNames: 'goals selectorVar'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-RB'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tgoals:\t\t<Object>",				"\tselectorVar:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-RB"		},		"IfPure" : {			"hash" : 6841344,			"definition" : "If subclass: #IfPure\r\tinstanceVariableNames: ''\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"Fresh" : {			"hash" : 6843904,			"definition" : "Suspended subclass: #Fresh\r\tinstanceVariableNames: 'variables'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tvariables:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		},		"Cut" : {			"hash" : 6840320,			"definition" : "Goal subclass: #Cut\r\tinstanceVariableNames: 'cuttingGoal length'\r\tclassVariableNames: ''\r\tpackage: 'MicroKanren-Goals'",			"comment" : [				"Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:",				"",				"For the Class part:  State a one line summary. For example, \"I represent a paragraph of text\".",				"",				"For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.",				"",				"For the Collaborators Part: State my main collaborators and one line about how I interact with them. ",				"",				"Public API and Key Messages",				"",				"- message one   ",				"- message two ",				"- (for bonus points) how to create instances.",				"",				"   One simple example is simply gorgeous.",				" ",				"Internal Representation and Key Implementation Points.",				"",				"    Instance Variables",				"\tcuttingGoal:\t\t<Object>",				"\tlength:\t\t<Object>",				"",				"",				"    Implementation Points"			],			"category" : "MicroKanren-Goals"		}	},	"messages" : {		"onState:withVars:" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreMessagesForDoc",				"FreshRB>>#onState:withVars:",				"State>>#collectVars:forFresh:"			],			"implementors" : {				"FreshRB" : {					"sourceCode" : [						"onState: aState withVars: aCollection",						"",						"\t| dict node rbLogicVariables swapping aStream |",						"\tdict := Dictionary new.",						"",						"\tcontextVariables keysAndValuesDo: [ :aSymbol :aRBVar | ",						"\t\tdict at: aSymbol put: aRBVar ].",						"",						"\trbLogicVariables := receiver argumentNames",						"\t\t                    with: aCollection",						"\t\t                    collect: [ :aName :aVar | ",						"\t\t\t                    dict",						"\t\t\t\t                    at: aName",						"\t\t\t\t                    ifPresent: [ ",						"\t\t\t\t                    Error signal:",						"\t\t\t\t\t                    ('Variable {} duplicated!' format: { aName }) ]",						"\t\t\t\t                    ifAbsentPut: [ aVar asRBNode ] ].",						"",						"\tnode := receiver sourceNode body in: [ :aSequenceNode | ",						"\t\t        | aNode |",						"\t\t        aNode := selectBlock value: aSequenceNode.",						"\t\t        aNode substituteVariablesUsingDictionary: dict ].",						"",						"\tswapping := receiver.",						"\treceiver := nodeBlock value: node.",						"",						"\taStream := super onState: aState withVars: aCollection.",						"",						"\treceiver := swapping.",						"",						"\t^ aStream"					],					"body" : [						"| dict node rbLogicVariables swapping aStream |",						"dict := Dictionary new.",						"",						"contextVariables keysAndValuesDo: [ :aSymbol :aRBVar | ",						"\tdict at: aSymbol put: aRBVar ].",						"",						"rbLogicVariables := receiver argumentNames",						"\t                    with: aCollection",						"\t                    collect: [ :aName :aVar | ",						"\t\t                    dict",						"\t\t\t                    at: aName",						"\t\t\t                    ifPresent: [ ",						"\t\t\t                    Error signal:",						"\t\t\t\t                    ('Variable {} duplicated!' format: { aName }) ]",						"\t\t\t                    ifAbsentPut: [ aVar asRBNode ] ].",						"",						"node := receiver sourceNode body in: [ :aSequenceNode | ",						"\t        | aNode |",						"\t        aNode := selectBlock value: aSequenceNode.",						"\t        aNode substituteVariablesUsingDictionary: dict ].",						"",						"swapping := receiver.",						"receiver := nodeBlock value: node.",						"",						"aStream := super onState: aState withVars: aCollection.",						"",						"receiver := swapping.",						"",						"^ aStream"					],					"isTestMethod" : false,					"category" : "dispatched",					"comment" : [ ],					"hash" : 39551280,					"argumentNames" : [						"aState",						"aCollection"					]				},				"Fresh" : {					"sourceCode" : [						"onState: aState withVars: aCollection",						"",						"\tvariables := aCollection.",						"\tnestedGoal := receiver valueWithArguments: self variables.",						"\t^ super onState: aState"					],					"body" : [						"variables := aCollection.",						"nestedGoal := receiver valueWithArguments: self variables.",						"^ super onState: aState"					],					"isTestMethod" : false,					"category" : "dispatched",					"comment" : [ ],					"hash" : 41717383,					"argumentNames" : [						"aState",						"aCollection"					]				}			}		},		"onState:" : {			"senders" : [				"AlphaRule>>#onState:",				"BaselineOfMicroKanren>>#scriptExportCoreMessagesForDoc",				"Cond>>#onState:afterPushingGoal:",				"Conj>>#onState:afterPushingGoal:",				"Cut>>#onState:",				"Disj>>#onState:afterPushingGoal:",				"Eta>>#onState:",				"Fresh>>#onState:withVars:",				"Goal>>#onState:forGoal:fromConj:",				"Goal>>#asStatesStream",				"GoalTest>>#testSucceedInvariant",				"IfPure>>#onState:afterPushingGoal:",				"MKGoalInspect>>#onState:",				"Master>>#onState:",				"Not>>#onState:",				"Predicate>>#onState:",				"PredicateBagOfo>>#onState:",				"PredicateFindAllo>>#onState:",				"Reuse>>#onState:",				"Run>>#onState:",				"State>>#onState:afterUnificationByUnify:",				"Suspended>>#onState:afterPushingGoal:",				"Tabled>>#onState:",				"UnificationError>>#onState:afterUnificationByUnify:"			],			"implementors" : {				"Reuse" : {					"sourceCode" : [						"onState: aState",						"",						"\t| fix |",						"\tfix := nil.",						"\tfix := [ :start :end | ",						"\t       | loop |",						"\t       loop := nil.",						"\t       loop := [ :answers | ",						"\t               answers = end",						"\t\t               ifTrue: [ ",						"\t\t\t               | data alpha |",						"\t\t\t               data := cache cons: start.",						"\t\t\t               alpha := data cons: [ fix value: cache value: start ].",						"\t\t\t               Waiting new",						"\t\t\t\t               streams: { alpha };",						"\t\t\t\t               \"one element list\"yourself ]",						"\t\t               ifFalse: [ ",						"\t\t\t               | reifiedAnswer combinator |",						"\t\t\t               reifiedAnswer := (aState trasparentReifier ",						"\t\t\t\t                                 reifyVars: { answers first })",						"\t\t\t\t                                first.",						"",						"\t\t\t               \"Just use standard unification for now,",						"\t\t\t\t\t\t\t`subunify` will follow.\"",						"\t\t\t               combinator := [ ",						"\t\t\t                             (args unifyo value: reifiedAnswer) ",						"\t\t\t\t                             onState: aState ] suspended mplus: [ ",						"\t\t\t\t                             loop value: answers allButFirst ].",						"\t\t\t               Sequential new of: combinator ] ].",						"\t       loop value: start ].",						"\t^ fix value: cache value: LinkedList new"					],					"body" : [						"| fix |",						"fix := nil.",						"fix := [ :start :end | ",						"       | loop |",						"       loop := nil.",						"       loop := [ :answers | ",						"               answers = end",						"\t               ifTrue: [ ",						"\t\t               | data alpha |",						"\t\t               data := cache cons: start.",						"\t\t               alpha := data cons: [ fix value: cache value: start ].",						"\t\t               Waiting new",						"\t\t\t               streams: { alpha };",						"\t\t\t               \"one element list\"yourself ]",						"\t               ifFalse: [ ",						"\t\t               | reifiedAnswer combinator |",						"\t\t               reifiedAnswer := (aState trasparentReifier ",						"\t\t\t                                 reifyVars: { answers first })",						"\t\t\t                                first.",						"",						"\t\t               \"Just use standard unification for now,",						"\t\t\t\t\t\t\t`subunify` will follow.\"",						"\t\t               combinator := [ ",						"\t\t                             (args unifyo value: reifiedAnswer) ",						"\t\t\t                             onState: aState ] suspended mplus: [ ",						"\t\t\t                             loop value: answers allButFirst ].",						"\t\t               Sequential new of: combinator ] ].",						"       loop value: start ].",						"^ fix value: cache value: LinkedList new"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 24942981,					"argumentNames" : [						"aState"					]				},				"AlphaRule" : {					"sourceCode" : [						"onState: aState",						"",						"\t^ [ ",						"\t  (x isAlphaEquivalentTo: y inState: aState) asGoal onState: aState ]",						"\t\t  srfi41Stream"					],					"body" : [						"^ [ (x isAlphaEquivalentTo: y inState: aState) asGoal onState: aState ]",						"\t  srfi41Stream"					],					"isTestMethod" : false,					"category" : "running",					"comment" : [ ],					"hash" : 24668530,					"argumentNames" : [						"aState"					]				},				"Fresh" : {					"sourceCode" : [						"onState: aState",						"",						"\t^ aState collectVars: receiver argumentNames forFresh: self"					],					"body" : [						"^ aState collectVars: receiver argumentNames forFresh: self"					],					"isTestMethod" : false,					"category" : "running",					"comment" : [ ],					"hash" : 24677220,					"argumentNames" : [						"aState"					]				},				"Not" : {					"sourceCode" : [						"onState: aState",						"",						"\t^ ((cuttingGoal onState: aState)",						"\t\t   ifEmpty: [ true asGoal ]",						"\t\t   ifNotEmpty: [ false asGoal ]) onState: aState"					],					"body" : [						"^ ((cuttingGoal onState: aState)",						"\t   ifEmpty: [ true asGoal ]",						"\t   ifNotEmpty: [ false asGoal ]) onState: aState"					],					"isTestMethod" : false,					"category" : "running",					"comment" : [ ],					"hash" : 24675864,					"argumentNames" : [						"aState"					]				},				"TablingCall" : {					"sourceCode" : [						"onState: aState",						"",						"\tself subclassResponsibility"					],					"body" : [						"self subclassResponsibility"					],					"isTestMethod" : false,					"category" : "accessing",					"comment" : [ ],					"hash" : 24678212,					"argumentNames" : [						"aState"					]				},				"Eta" : {					"sourceCode" : [						"onState: aState",						"",						"\t^ [ ",						"\t  nestedGoal := receiver value.",						"\t  super onState: aState ]"					],					"body" : [						"^ [ ",						"  nestedGoal := receiver value.",						"  super onState: aState ]"					],					"isTestMethod" : false,					"category" : "running",					"comment" : [ ],					"hash" : 24676575,					"argumentNames" : [						"aState"					]				},				"Master" : {					"sourceCode" : [						"onState: aState",						"",						"\t| allSatisfied |",						"\tallSatisfied := cache allSatisfy: [ :answers | ",						"\t\t                (args isAlphaEquivalentTo: answers inState: aState)",						"\t\t\t                not ].",						"\t\"possibly change to `any`\"",						"\tallSatisfied ifTrue: [ ",						"\t\tcache addFirst: (aState trasparentReifier reifyVars: args) ]. \"`#addFirst` is the counter part of `cons`.\"",						"\t^ allSatisfied asGoal onState: aState"					],					"body" : [						"| allSatisfied |",						"allSatisfied := cache allSatisfy: [ :answers | ",						"\t                (args isAlphaEquivalentTo: answers inState: aState)",						"\t\t                not ].",						"\"possibly change to `any`\"",						"allSatisfied ifTrue: [ ",						"\tcache addFirst: (aState trasparentReifier reifyVars: args) ]. \"`#addFirst` is the counter part of `cons`.\"",						"^ allSatisfied asGoal onState: aState"					],					"isTestMethod" : false,					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 24942638,					"argumentNames" : [						"aState"					]				},				"MKGoalInspect" : {					"sourceCode" : [						"onState: aState",						"",						"\tblock value: aState.",						"",						"\t^ super onState: aState"					],					"body" : [						"block value: aState.",						"",						"^ super onState: aState"					],					"isTestMethod" : false,					"category" : "running",					"comment" : [ ],					"hash" : 24670387,					"argumentNames" : [						"aState"					]				},				"Run" : {					"sourceCode" : [						"onState: aState",						"",						"\t| aStream vars selector |",						"\taStream := goal onState: aState.",						"\tvars := goal variables ifEmpty: [ { Var tautology } ].",						"\tselector := vars size = 1",						"\t\t            ifTrue: [ #first ]",						"\t\t            ifFalse: [ #yourself ].",						"\t^ (aStream select: [ :each | each isSound ]) collect: [ :s | ",						"\t\t  selector value: (s reifier reifyVars: vars) ]"					],					"body" : [						"| aStream vars selector |",						"aStream := goal onState: aState.",						"vars := goal variables ifEmpty: [ { Var tautology } ].",						"selector := vars size = 1",						"\t            ifTrue: [ #first ]",						"\t            ifFalse: [ #yourself ].",						"^ (aStream select: [ :each | each isSound ]) collect: [ :s | ",						"\t  selector value: (s reifier reifyVars: vars) ]"					],					"isTestMethod" : false,					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 25465052,					"argumentNames" : [						"aState"					]				},				"Predicate" : {					"sourceCode" : [						"onState: aState",						"",						"\t^ self goal onState: aState"					],					"body" : [						"^ self goal onState: aState"					],					"isTestMethod" : false,					"category" : "running",					"comment" : [ ],					"hash" : 24679763,					"argumentNames" : [						"aState"					]				},				"Goal" : {					"sourceCode" : [						"onState: aState",						"",						"\t<doc: #Realog topic: #( Gaol onState )>",						"\t| aGoal |",						"\taGoal := self copy.",						"\t^ self onState: (aState pushGoal: aGoal) afterPushingGoal: aGoal"					],					"body" : [						"| aGoal |",						"aGoal := self copy.",						"^ self onState: (aState pushGoal: aGoal) afterPushingGoal: aGoal"					],					"isTestMethod" : false,					"category" : "running",					"comment" : [ ],					"hash" : 24930730,					"argumentNames" : [						"aState"					]				},				"Tabled" : {					"sourceCode" : [						"onState: aState",						"",						"\t| key |",						"\tkey := aState reifier reifyVars: args.",						"\t^ table",						"\t\t  at: key",						"\t\t  ifPresent: [ :cache | ",						"\t\t\t  | r |",						"\t\t\t  r := Reuse new",						"\t\t\t\t       args: args;",						"\t\t\t\t       cache: cache;",						"\t\t\t\t       yourself.",						"\t\t\t  r onState: aState ]",						"\t\t  ifAbsent: [ ",						"\t\t\t  | cache g m |",						"\t\t\t  cache := LinkedList new.",						"\t\t\t  table at: key put: cache.",						"\t\t\t  g := block valueWithArguments: args.",						"\t\t\t  m := Master new",						"\t\t\t\t       args: args;",						"\t\t\t\t       cache: cache;",						"\t\t\t\t       yourself.",						"\t\t\t  g , m onState: aState ]"					],					"body" : [						"| key |",						"key := aState reifier reifyVars: args.",						"^ table",						"\t  at: key",						"\t  ifPresent: [ :cache | ",						"\t\t  | r |",						"\t\t  r := Reuse new",						"\t\t\t       args: args;",						"\t\t\t       cache: cache;",						"\t\t\t       yourself.",						"\t\t  r onState: aState ]",						"\t  ifAbsent: [ ",						"\t\t  | cache g m |",						"\t\t  cache := LinkedList new.",						"\t\t  table at: key put: cache.",						"\t\t  g := block valueWithArguments: args.",						"\t\t  m := Master new",						"\t\t\t       args: args;",						"\t\t\t       cache: cache;",						"\t\t\t       yourself.",						"\t\t  g , m onState: aState ]"					],					"isTestMethod" : false,					"category" : "running",					"comment" : [ ],					"hash" : 24941093,					"argumentNames" : [						"aState"					]				},				"PredicateFindAllo" : {					"sourceCode" : [						"onState: aState",						"",						"\t| states aGoal aCons |",						"\tstates := ((firstArgument onState: aState) select: [ :each | ",						"\t\t           each isSound ]) asOrderedCollection.",						"",						"\taCons := (states collect: [ :each | ",						"\t\t          each walker value: secondArgument ]) asCons.",						"",						"\taGoal := aCons unifyo value: thirdArgument.",						"",						"\t^ aGoal onState: aState"					],					"body" : [						"| states aGoal aCons |",						"states := ((firstArgument onState: aState) select: [ :each | ",						"\t           each isSound ]) asOrderedCollection.",						"",						"aCons := (states collect: [ :each | each walker value: secondArgument ])",						"\t         asCons.",						"",						"aGoal := aCons unifyo value: thirdArgument.",						"",						"^ aGoal onState: aState"					],					"isTestMethod" : false,					"category" : "running",					"comment" : [ ],					"hash" : 25471030,					"argumentNames" : [						"aState"					]				},				"Cut" : {					"sourceCode" : [						"onState: aState",						"",						"\t| cuttingStream |",						"\tcuttingStream := (cuttingGoal onState: aState)",						"\t\t                 ifEmpty: [ aState srfi41Singleton ]",						"\t\t                 ifNotEmpty: [ :aStream | aStream next: length ].",						"\t^ (super onState: aState) , cuttingStream"					],					"body" : [						"| cuttingStream |",						"cuttingStream := (cuttingGoal onState: aState)",						"\t                 ifEmpty: [ aState srfi41Singleton ]",						"\t                 ifNotEmpty: [ :aStream | aStream next: length ].",						"^ (super onState: aState) , cuttingStream"					],					"isTestMethod" : false,					"category" : "running",					"comment" : [ ],					"hash" : 24937150,					"argumentNames" : [						"aState"					]				},				"PredicateBagOfo" : {					"sourceCode" : [						"onState: aState",						"",						"\t| aDictionary aGoal |",						"\taDictionary := ((firstArgument onState: aState) select: [ :each | ",						"\t\t                each isSound ])",						"\t\t               foldrStrict: [ :each :aDict | ",						"\t\t\t               | walker walkedTemplate key |",						"\t\t\t               walker := each walker.",						"\t\t\t               walkedTemplate := walker value: secondArgument.",						"\t\t\t               key := walker value: variables.",						"\t\t\t               aDict",						"\t\t\t\t               at: key",						"\t\t\t\t               ifPresent: [ :aCons | ",						"\t\t\t\t\t               aDict at: key put: (walkedTemplate cons: aCons) ]",						"\t\t\t\t               ifAbsentPut: [ walkedTemplate cons: nil ];",						"\t\t\t\t               yourself ]",						"\t\t               init: [ Dictionary new ].",						"",						"\taGoal := aDictionary ifEmpty: [ false asGoal ] ifNotEmpty: [ ",						"\t\t         aDictionary associations",						"\t\t\t         foldr: [ :each :aDisj | ",						"\t\t\t\t         (variables unifyo value: each key)",						"\t\t\t\t         , (each value asCons unifyo value: thirdArgument) | aDisj ]",						"\t\t\t         init: false asGoal ].",						"",						"\t^ aGoal onState: aState"					],					"body" : [						"| aDictionary aGoal |",						"aDictionary := ((firstArgument onState: aState) select: [ :each | ",						"\t                each isSound ])",						"\t               foldrStrict: [ :each :aDict | ",						"\t\t               | walker walkedTemplate key |",						"\t\t               walker := each walker.",						"\t\t               walkedTemplate := walker value: secondArgument.",						"\t\t               key := walker value: variables.",						"\t\t               aDict",						"\t\t\t               at: key",						"\t\t\t               ifPresent: [ :aCons | ",						"\t\t\t\t               aDict at: key put: (walkedTemplate cons: aCons) ]",						"\t\t\t               ifAbsentPut: [ walkedTemplate cons: nil ];",						"\t\t\t               yourself ]",						"\t               init: [ Dictionary new ].",						"",						"aGoal := aDictionary ifEmpty: [ false asGoal ] ifNotEmpty: [ ",						"\t         aDictionary associations",						"\t\t         foldr: [ :each :aDisj | ",						"\t\t\t         (variables unifyo value: each key)",						"\t\t\t         , (each value asCons unifyo value: thirdArgument) | aDisj ]",						"\t\t         init: false asGoal ].",						"",						"^ aGoal onState: aState"					],					"isTestMethod" : false,					"category" : "running",					"comment" : [ ],					"hash" : 25208606,					"argumentNames" : [						"aState"					]				}			}		},		"unifyWith:usingUnifier:" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreMessagesForDoc",				"Unifier>>#value:value:"			],			"implementors" : {				"Object" : {					"sourceCode" : [						"unifyWith: another usingUnifier: anUnifier",						"",						"\t^ another unifyWithObject: self usingUnifier: anUnifier"					],					"body" : [						"^ another unifyWithObject: self usingUnifier: anUnifier"					],					"isTestMethod" : false,					"category" : "*MicroKanren-core",					"comment" : [ ],					"hash" : 35677202,					"argumentNames" : [						"another",						"anUnifier"					]				},				"Symbol" : {					"sourceCode" : [						"unifyWith: anObject usingUnifier: anUnifier",						"",						"\t^ anObject unifyWithObject: self usingUnifier: anUnifier"					],					"body" : [						"^ anObject unifyWithObject: self usingUnifier: anUnifier"					],					"isTestMethod" : false,					"category" : "*MicroKanren",					"comment" : [ ],					"hash" : 35664402,					"argumentNames" : [						"anObject",						"anUnifier"					]				},				"RBMessageNode" : {					"sourceCode" : [						"unifyWith: anObject usingUnifier: anUnifier",						"",						"\t^ anObject unifyWithRBMessageNode: self usingUnifier: anUnifier"					],					"body" : [						"^ anObject unifyWithRBMessageNode: self usingUnifier: anUnifier"					],					"isTestMethod" : false,					"category" : "*MicroKanren-RB",					"comment" : [ ],					"hash" : 36056082,					"argumentNames" : [						"anObject",						"anUnifier"					]				},				"MKRealogCompany" : {					"sourceCode" : [						"unifyWith: another usingUnifier: anUnifier",						"",						"\t^ another unifyWithRealogCompany: self usingUnifier: anUnifier"					],					"body" : [						"^ another unifyWithRealogCompany: self usingUnifier: anUnifier"					],					"isTestMethod" : false,					"category" : "dispatching",					"comment" : [ ],					"hash" : 37181202,					"argumentNames" : [						"another",						"anUnifier"					]				},				"SequenceableCollection" : {					"sourceCode" : [						"unifyWith: another usingUnifier: anUnifier",						"",						"\t^ another",						"\t\t  unifyWithSequenceableCollection: self",						"\t\t  usingUnifier: anUnifier"					],					"body" : [						"^ another",						"\t  unifyWithSequenceableCollection: self",						"\t  usingUnifier: anUnifier"					],					"isTestMethod" : false,					"category" : "*MicroKanren",					"comment" : [ ],					"hash" : 35727634,					"argumentNames" : [						"another",						"anUnifier"					]				},				"MKRealogEmployee" : {					"sourceCode" : [						"unifyWith: another usingUnifier: anUnifier",						"",						"\t^ another unifyWithRealogEmployee: self usingUnifier: anUnifier"					],					"body" : [						"^ another unifyWithRealogEmployee: self usingUnifier: anUnifier"					],					"isTestMethod" : false,					"category" : "dispatching",					"comment" : [ ],					"hash" : 37706258,					"argumentNames" : [						"another",						"anUnifier"					]				},				"Var" : {					"sourceCode" : [						"unifyWith: another usingUnifier: anUnifier",						"",						"\t^ another unifyWithVar: self usingUnifier: anUnifier"					],					"body" : [						"^ another unifyWithVar: self usingUnifier: anUnifier"					],					"isTestMethod" : false,					"category" : "dispatching",					"comment" : [ ],					"hash" : 41705234,					"argumentNames" : [						"another",						"anUnifier"					]				},				"RBSelectorNode" : {					"sourceCode" : [						"unifyWith: aNode usingUnifier: anUnifier",						"",						"\t^ aNode unifyWithRBSelectorNode: self usingUnifier: anUnifier"					],					"body" : [						"^ aNode unifyWithRBSelectorNode: self usingUnifier: anUnifier"					],					"isTestMethod" : false,					"category" : "*MicroKanren-RB",					"comment" : [ ],					"hash" : 36051986,					"argumentNames" : [						"aNode",						"anUnifier"					]				},				"RBLogicVariableNode" : {					"sourceCode" : [						"unifyWith: anObject usingUnifier: anUnifier",						"",						"\t^ anObject unifyWithRBLogicVariableNode: self usingUnifier: anUnifier"					],					"body" : [						"^ anObject unifyWithRBLogicVariableNode: self usingUnifier: anUnifier"					],					"isTestMethod" : false,					"category" : "*MicroKanren-RB",					"comment" : [ ],					"hash" : 38238482,					"argumentNames" : [						"anObject",						"anUnifier"					]				},				"RBNode" : {					"sourceCode" : [						"unifyWith: anObject usingUnifier: anUnifier",						"",						"\tself subclassResponsibility"					],					"body" : [						"self subclassResponsibility"					],					"isTestMethod" : false,					"category" : "*MicroKanren-RB",					"comment" : [ ],					"hash" : 36024132,					"argumentNames" : [						"anObject",						"anUnifier"					]				},				"RBSequenceNode" : {					"sourceCode" : [						"unifyWith: anObject usingUnifier: anUnifier",						"",						"\t^ anObject unifyWithRBSequenceNode: self usingUnifier: anUnifier"					],					"body" : [						"^ anObject unifyWithRBSequenceNode: self usingUnifier: anUnifier"					],					"isTestMethod" : false,					"category" : "*MicroKanren-RB",					"comment" : [ ],					"hash" : 36034322,					"argumentNames" : [						"anObject",						"anUnifier"					]				},				"RBBlockNode" : {					"sourceCode" : [						"unifyWith: anObject usingUnifier: anUnifier",						"",						"\t^ anObject unifyWithRBBlockNode: self usingUnifier: anUnifier"					],					"body" : [						"^ anObject unifyWithRBBlockNode: self usingUnifier: anUnifier"					],					"isTestMethod" : false,					"category" : "*MicroKanren-RB",					"comment" : [ ],					"hash" : 36049426,					"argumentNames" : [						"anObject",						"anUnifier"					]				},				"RBLiteralValueNode" : {					"sourceCode" : [						"unifyWith: anObject usingUnifier: anUnifier",						"",						"\t^ anObject unifyWithRBLiteralValueNode: self usingUnifier: anUnifier"					],					"body" : [						"^ anObject unifyWithRBLiteralValueNode: self usingUnifier: anUnifier"					],					"isTestMethod" : false,					"category" : "*MicroKanren-RB",					"comment" : [ ],					"hash" : 36056338,					"argumentNames" : [						"anObject",						"anUnifier"					]				},				"MKRealogContract" : {					"sourceCode" : [						"unifyWith: another usingUnifier: anUnifier",						"",						"\t^ another unifyWithRealogContract: self usingUnifier: anUnifier"					],					"body" : [						"^ another unifyWithRealogContract: self usingUnifier: anUnifier"					],					"isTestMethod" : false,					"category" : "dispatching",					"comment" : [ ],					"hash" : 37705746,					"argumentNames" : [						"another",						"anUnifier"					]				},				"MKRealogIDType" : {					"sourceCode" : [						"unifyWith: another usingUnifier: anUnifier",						"",						"\tself subclassResponsibility"					],					"body" : [						"self subclassResponsibility"					],					"isTestMethod" : false,					"category" : "dispatching",					"comment" : [ ],					"hash" : 37152580,					"argumentNames" : [						"another",						"anUnifier"					]				},				"Cons" : {					"sourceCode" : [						"unifyWith: another usingUnifier: anUnifier",						"",						"\t^ another unifyWithCons: self usingUnifier: anUnifier"					],					"body" : [						"^ another unifyWithCons: self usingUnifier: anUnifier"					],					"isTestMethod" : false,					"category" : "*MicroKanren",					"comment" : [ ],					"hash" : 41692434,					"argumentNames" : [						"another",						"anUnifier"					]				}			}		},		"asGoal" : {			"senders" : [				"ACL>>#rewriting:rewritten:focusAST:focusVar:do:",				"ACL>>#initialize",				"ACL>>#focus:premise:do:",				"ACL>>#valueWithArguments:",				"AlphaRule>>#onState:",				"ArithTest>>#testHalfAddero",				"ArithTest>>#testMinuso",				"ArithTest>>#testAddero",				"ArithTest>>#testBitAndo",				"ArithTest>>#testPluso",				"ArithTest>>#testFullAddero",				"ArithTest>>#testGreaterThanOneo",				"ArithTest>>#testBitXoro",				"ArithTheory>>#greaterThanOneo",				"ArithTheory>>#positiveo",				"ArithTheory>>#bitFullAddero",				"ArithTheory>>#addero",				"ArithTheory>>#genAddero",				"BaselineOfMicroKanren>>#scriptExportCoreMessagesForDoc",				"CombinatoricsTheoryTest>>#testDycko",				"Cond>>#onState:afterPushingGoal:",				"Cond>>#otherwise:",				"DescendTestPredicate>>#goal",				"GoalTest>>#testTeaCup",				"GoalTest>>#testDisjFalseFalse",				"GoalTest>>#testFivesSwapped",				"GoalTest>>#testConjTrueTrue",				"GoalTest>>#testCdro",				"GoalTest>>#nats:stage:offset:",				"GoalTest>>#testCutAndFail",				"GoalTest>>#testConjDisj",				"GoalTest>>#testFindAll",				"GoalTest>>#testDisjFalseTrue",				"GoalTest>>#testFailed",				"GoalTest>>#testConjFalseThreeWithVar",				"GoalTest>>#testDisjFourWithVarOrThreeWithVar",				"GoalTest>>#testNats",				"GoalTest>>#testTablingAnswersInsteadOfSubstitutions",				"GoalTest>>#testConso",				"GoalTest>>#teaCupSpoon:",				"GoalTest>>#testTablingMutuallyRecursive",				"GoalTest>>#teacup:",				"GoalTest>>#testCaro",				"GoalTest>>#testLengtho",				"GoalTest>>#fives:",				"GoalTest>>#testUnifySharing",				"GoalTest>>#testFivesByPredicate",				"GoalTest>>#testTabling",				"GoalTest>>#testAlphaRuleo",				"GoalTest>>#testConde",				"GoalTest>>#testAppendo",				"GoalTest>>#testConjFailingSharing",				"GoalTest>>#testFivesByNats",				"GoalTest>>#testDisjThreeThenFourFive",				"GoalTest>>#testUnifySymmetryFourWithVar",				"GoalTest>>#testCutUnifyThenFail",				"GoalTest>>#testUnifyWithTopmostWithoutSharing",				"GoalTest>>#testDisjThreeWithVarOrFourWithVar",				"GoalTest>>#eternity:",				"GoalTest>>#testBagOf",				"GoalTest>>#testDisjThreeWithThreeOrFourWithVar",				"GoalTest>>#testConjTrueThreeWithThree",				"GoalTest>>#testDisjThreeWithVarOrThreeWithVar",				"GoalTest>>#testSucceedInvariant",				"GoalTest>>#testConjSucceedingSharing",				"GoalTest>>#testFreshFailed",				"GoalTest>>#testConjThreeFour",				"GoalTest>>#testFreshSucceed",				"GoalTest>>#testDisjThreeFourThenFive",				"GoalTest>>#testCutOverMultipleRules",				"GoalTest>>#testSucceed",				"GoalTest>>#testLolo",				"GoalTest>>#testUnifyWithTopmostSharing",				"GoalTest>>#testUnifyWithTopmostSharingWithRepetition",				"GoalTest>>#testFives",				"GoalTest>>#testConjSymmetry",				"GoalTest>>#testFreshMultipleVars",				"GoalTest>>#testListo",				"GoalTest>>#patho:",				"GoalTest>>#testConjThreeFresh",				"GoalTest>>#testDisjTrueTrue",				"GoalTest>>#swappedfives:",				"GoalTest>>#testUnifySymmetryVarWithFour",				"GoalTest>>#testConjThreeFourWithTwoVars",				"GoalTest>>#testCut",				"InductiveRelation>>#relateo",				"MKPredicateBinaryAncestoro>>#goal",				"MKPredicateBinaryParento>>#unaryMessagesGoal",				"MKPredicateBinaryParento>>#binaryMessagesGoal",				"MKPredicateBinaryParento>>#ifMessageGoal",				"MKPredicateFives>>#goal",				"MKPredicateSexpAppendo>>#goal",				"MKPredicateSexpCaro>>#goal",				"MKPredicateSexpCdro>>#goal",				"MKPredicateSexpDycko>>#goal",				"MKPredicateSexpListo>>#goal",				"MKPredicateSexpLolo>>#goal",				"MKPredicateSexpPairo>>#goal",				"MKPredicateUnaryJabberwockyo>>#goal",				"MKSexpTest>>#testAppendoBackward",				"MKSexpTest>>#testDycko",				"MKSexpTest>>#testAppendoForward",				"MKSexpTest>>#testACORN",				"Master>>#onState:",				"McCullochAssociateRule>>#relateo",				"McCullochRepeatRule>>#relateo",				"McCullochReverseRule>>#relateo",				"McCullochRightHalfAssociateRule>>#relateo",				"MonteCarloLockTest>>#testMcCullochMachine",				"MonteCarloLockTest>>#testMontecarloLockMachine",				"Not>>#onState:",				"PredicateBagOfo>>#onState:",				"RBNode>>#sendso",				"RBNode>>#acl:contextVariables:",				"RBNode>>#acl:then:contextVariables:",				"RBNodePredicatesTest>>#testSenderoForBlockClosure",				"RBNodePredicatesTest>>#testSenderoForCompiledMethod",				"RBNodePredicatesTest>>#testSenderoForEmptyBlockClosure",				"RBNodePredicatesTest>>#arguments_testSenderoBackwards",				"RBNodePredicatesTest>>#testSenderoForIdentityBlockClosure",				"RBNodePredicatesTest>>#testSenderoBackwards",				"RBNodeTheoryTest>>#testUnifyConsIsAtomBlock",				"RBNodeTheoryTest>>#testUnifyLiteralBlock",				"RBProgramNodeSendsoVisitor>>#visitLogicVariableNode:",				"RBProgramNodeSendsoVisitor>>#asGoal",				"SexpTheory>>#pairo",				"SexpTheory>>#reverseo",				"SexpTheory>>#lengtho",				"State>>#onState:afterUnificationByUnify:",				"TheLittleProver>>#equalIfº",				"TheLittleProver>>#cdrOfConsº",				"TheLittleProver>>#ifNestedOtherwiseº",				"TheLittleProver>>#consCarCdrº",				"TheLittleProver>>#ifNestedThenº",				"TheLittleProverTest>>#test_chapter_02_EvenOlderGames_frame_15",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_44",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_46_variablesBindingByEqualSame",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_46_variablesBindingManually",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_16",				"TheLittleProverTest>>#test_chapter_02_EvenOlderGames_frame_15_ancestorobackward",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_28",				"TheLittleProverTest>>#test_chapter_02_EvenOlderGames_frame_07",				"TheLittleProverTest>>#test_chapter_02_EvenOlderGames_frame_15_parento",				"TheLittleProverTest>>#test_chapter_02_EvenOlderGames_frame_33",				"TheLittleProverTest>>#test_chapter_02_EvenOlderGames_frame_57",				"TheLittleProverTest>>#test_chapter_02_EvenOlderGames_frame_57_premise",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_55",				"TheLittleProverTest>>#test_chapter_02_EvenOlderGames_frame_15_ancestoro",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_49",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_21",				"TheLittleProverTest>>#test_chapter_02_EvenOlderGames_frame_05_rewriting_unbound",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_19",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_46",				"TheLittleProverTest>>#test_chapter_02_EvenOlderGames_frame_43",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_16_byCompiledMethod",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_56",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_32",				"TheLittleProverTest>>#test_chapter_02_EvenOlderGames_frame_05",				"UnificationError>>#onState:afterUnificationByUnify:"			],			"implementors" : {				"False" : {					"sourceCode" : [						"asGoal",						"",						"\t^ Failed new"					],					"body" : [						"^ Failed new"					],					"isTestMethod" : false,					"category" : "*MicroKanren-core",					"comment" : [ ],					"hash" : 1580847,					"argumentNames" : [ ]				},				"ACL" : {					"sourceCode" : [						"asGoal",						"",						"\t^ Fresh new",						"\t\t  receiver: self;",						"\t\t  yourself"					],					"body" : [						"^ Fresh new",						"\t  receiver: self;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "initialization",					"comment" : [ ],					"hash" : 4162272,					"argumentNames" : [ ]				},				"Graph" : {					"sourceCode" : [						"asGoal",						"",						"\t^ [ :x :y | ",						"\t  | g |",						"\t  g := Goal cond e.",						"\t  edges do: [ :each | ",						"\t\t  g",						"\t\t\t  if: (x unifyo value: each from content)",						"\t\t\t  then: (y unifyo value: each to content) ].",						"\t  g ]"					],					"body" : [						"^ [ :x :y | ",						"  | g |",						"  g := Goal cond e.",						"  edges do: [ :each | ",						"\t  g",						"\t\t  if: (x unifyo value: each from content)",						"\t\t  then: (y unifyo value: each to content) ].",						"  g ]"					],					"isTestMethod" : false,					"category" : "*MicroKanren",					"comment" : [ ],					"hash" : 7347101,					"argumentNames" : [ ]				},				"BlockClosure" : {					"sourceCode" : [						"asGoal",						"",						"\t^ (numArgs = 0",						"\t\t   ifTrue: [ Eta new ]",						"\t\t   ifFalse: [ Fresh new ])",						"\t\t  receiver: self;",						"\t\t  yourself"					],					"body" : [						"^ (numArgs = 0",						"\t   ifTrue: [ Eta new ]",						"\t   ifFalse: [ Fresh new ])",						"\t  receiver: self;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "*MicroKanren-core",					"comment" : [ ],					"hash" : 804547,					"argumentNames" : [ ]				},				"RBProgramNodeSendsoVisitor" : {					"sourceCode" : [						"asGoal",						"",						"\t^ goals foldr: [ :each :g | each | g ] init: false asGoal"					],					"body" : [						"^ goals foldr: [ :each :g | each | g ] init: false asGoal"					],					"isTestMethod" : false,					"category" : "initialization",					"comment" : [ ],					"hash" : 4159028,					"argumentNames" : [ ]				},				"True" : {					"sourceCode" : [						"asGoal",						"",						"\t^ Succeed new"					],					"body" : [						"^ Succeed new"					],					"isTestMethod" : false,					"category" : "*MicroKanren-core",					"comment" : [ ],					"hash" : 1581359,					"argumentNames" : [ ]				},				"Boolean" : {					"sourceCode" : [						"asGoal",						"",						"\tself subclassResponsibility"					],					"body" : [						"self subclassResponsibility"					],					"isTestMethod" : false,					"category" : "*MicroKanren-core",					"comment" : [ ],					"hash" : 1665604,					"argumentNames" : [ ]				}			}		},		"tautology" : {			"senders" : [				"ArithTest>>#testSucco",				"ArithTest>>#testPositiveo",				"ArithTest>>#testGreaterThanOneo",				"BaselineOfMicroKanren>>#scriptExportCoreMessagesForDoc",				"GoalTest>>#testConjTrueTrue",				"GoalTest>>#testCdro",				"GoalTest>>#testDisjFalseTrue",				"GoalTest>>#testLengtho",				"GoalTest>>#testUnifyThreeWithThree",				"GoalTest>>#testAlphaRuleo",				"GoalTest>>#testConde",				"GoalTest>>#testSucceed",				"GoalTest>>#testLolo",				"GoalTest>>#testDisjTrueTrue",				"MonteCarloLockTest>>#testSimpleRules",				"RBNodeTheoryTest>>#testUnifyEmptyBlock",				"Run>>#onState:",				"Var class>>#tautology"			],			"implementors" : {				"Var class" : {					"sourceCode" : [						"tautology",						"",						"\t^ #tautology"					],					"body" : [						"^ #tautology"					],					"isTestMethod" : false,					"category" : "creating",					"comment" : [ ],					"hash" : 7625922,					"argumentNames" : [ ]				}			}		},		"onState:forGoal:fromConj:" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreMessagesForDoc",				"Conj>>#onState:afterPushingGoal:"			],			"implementors" : {				"Failed" : {					"sourceCode" : [						"onState: refinedState forGoal: right fromConj: aConj",						"",						"\t^ ValueLink value: refinedState"					],					"body" : [						"^ ValueLink value: refinedState"					],					"isTestMethod" : false,					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 58748014,					"argumentNames" : [						"refinedState",						"right",						"aConj"					]				},				"Goal" : {					"sourceCode" : [						"onState: refinedState forGoal: aGoal fromConj: aConj",						"",						"\tself popGoalFromPathOfState: refinedState forConj: aConj. \"this message should be removed to be full explicit.\"",						"\t^ aGoal onState: refinedState"					],					"body" : [						"self popGoalFromPathOfState: refinedState forConj: aConj. \"this message should be removed to be full explicit.\"",						"^ aGoal onState: refinedState"					],					"isTestMethod" : false,					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 58747154,					"argumentNames" : [						"refinedState",						"aGoal",						"aConj"					]				}			}		},		"asReifiedVar" : {			"senders" : [				"ArithTest>>#testGreaterThanOneo",				"BaselineOfMicroKanren>>#scriptExportCoreMessagesForDoc",				"BlockClosure>>#withEnumeratedReifiedVars",				"GoalTest>>#testFindAll",				"GoalTest>>#testTablingAnswersInsteadOfSubstitutions",				"GoalTest>>#testLengtho",				"GoalTest>>#testAlphaRuleo",				"GoalTest>>#testConde",				"GoalTest>>#testUnifyWithTopmostWithoutSharing",				"GoalTest>>#testBagOf",				"GoalTest>>#testDisjThreeWithThreeOrFourWithVar",				"GoalTest>>#testConjTrueThreeWithThree",				"GoalTest>>#testFreshSucceed",				"GoalTest>>#testLolo",				"GoalTest>>#testUnifyWithTopmostSharing",				"GoalTest>>#testUnifyWithTopmostSharingWithRepetition",				"GoalTest>>#testFreshMultipleVars",				"GoalTest>>#testListo",				"RBNodePredicatesTest>>#arguments_testSenderoBackwards",				"RBNodeTheoryTest>>#testUnifyConsIsAtomBlock",				"State>>#reifyVar:forReifier:",				"TheLittleProverTest>>#expectedRBNode_chapter_01_frame_56",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_16_backward",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_49",				"TheLittleProverTest>>#expectedRBNode_chapter_02_frame_7",				"TheLittleProverTest>>#test_chapter_02_EvenOlderGames_frame_05_rewriting_unbound",				"TheLittleProverTest>>#expectedRBNode_chapter_01_frame_55",				"TheLittleProverTest>>#expectedRBNode_chapter_02_frame_15"			],			"implementors" : {				"Integer" : {					"sourceCode" : [						"asReifiedVar",						"",						"\t^ self asReifiedWithVarClass: ReifiedVar"					],					"body" : [						"^ self asReifiedWithVarClass: ReifiedVar"					],					"isTestMethod" : false,					"category" : "*MicroKanren-core",					"comment" : [ ],					"hash" : 1806754,					"argumentNames" : [ ]				}			}		},		"onState:afterPushingGoal:" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreMessagesForDoc",				"Goal>>#onState:"			],			"implementors" : {				"Atomic" : {					"sourceCode" : [						"onState: aState afterPushingGoal: aGoal",						"",						"\t^ ValueLink value: aState"					],					"body" : [						"^ ValueLink value: aState"					],					"isTestMethod" : false,					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 41708142,					"argumentNames" : [						"aState",						"aGoal"					]				},				"Disj" : {					"sourceCode" : [						"onState: aState afterPushingGoal: _",						"",						"\t| aStream anotherStream |",						"\taStream := left onState: aState.",						"\tanotherStream := right onState: aState.",						"\t^ aStream appendStream: anotherStream"					],					"body" : [						"| aStream anotherStream |",						"aStream := left onState: aState.",						"anotherStream := right onState: aState.",						"^ aStream appendStream: anotherStream"					],					"isTestMethod" : false,					"category" : "running",					"comment" : [ ],					"hash" : 42236441,					"argumentNames" : [						"aState",						"_"					]				},				"Conj" : {					"sourceCode" : [						"onState: aState afterPushingGoal: _",						"",						"\t^ (left onState: aState) appendMap: [ :refinedState | ",						"\t\t  refinedState path value in: [ :aGoal | ",						"\t\t\t  aGoal onState: refinedState forGoal: right fromConj: self ] ]"					],					"body" : [						"^ (left onState: aState) appendMap: [ :refinedState | ",						"\t  refinedState path value in: [ :aGoal | ",						"\t\t  aGoal onState: refinedState forGoal: right fromConj: self ] ]"					],					"isTestMethod" : false,					"category" : "running",					"comment" : [ ],					"hash" : 41711142,					"argumentNames" : [						"aState",						"_"					]				},				"Suspended" : {					"sourceCode" : [						"onState: aState afterPushingGoal: _",						"",						"\t^ [ nestedGoal onState: aState ]"					],					"body" : [						"^ [ nestedGoal onState: aState ]"					],					"isTestMethod" : false,					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 41715423,					"argumentNames" : [						"aState",						"_"					]				},				"Goal" : {					"sourceCode" : [						"onState: aState afterPushingGoal: aGoal",						"",						"\tself subclassResponsibility"					],					"body" : [						"self subclassResponsibility"					],					"isTestMethod" : false,					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 41707332,					"argumentNames" : [						"aState",						"aGoal"					]				},				"IfPure" : {					"sourceCode" : [						"onState: aState afterPushingGoal: _",						"",						"\t| disj |",						"\tdisj := chainCombinationStrategy value",						"\t\t        left: question , answer;",						"\t\t        right: otherwise;",						"\t\t        yourself.",						"",						"\t^ disj onState: aState"					],					"body" : [						"| disj |",						"disj := chainCombinationStrategy value",						"\t        left: question , answer;",						"\t        right: otherwise;",						"\t        yourself.",						"",						"^ disj onState: aState"					],					"isTestMethod" : false,					"category" : "running",					"comment" : [ ],					"hash" : 41977577,					"argumentNames" : [						"aState",						"_"					]				},				"Cond" : {					"sourceCode" : [						"onState: aState afterPushingGoal: _",						"",						"\t^ [ ",						"\t  | g |",						"\t  g := clauses foldr: if init: false asGoal.",						"\t  g onState: aState ]"					],					"body" : [						"^ [ ",						"  | g |",						"  g := clauses foldr: if init: false asGoal.",						"  g onState: aState ]"					],					"isTestMethod" : false,					"category" : "running",					"comment" : [ ],					"hash" : 41712351,					"argumentNames" : [						"aState",						"_"					]				},				"Unify" : {					"sourceCode" : [						"onState: aState afterPushingGoal: aGoal",						"",						"\t| aStateOrException |",						"\taStateOrException := [ :k | ",						"\t                     aState unifier",						"\t\t                     continuation: k;",						"\t\t                     value: left value: right ] valueWithExitUnary.",						"\t^ aStateOrException onState: aState afterUnificationByUnify: self"					],					"body" : [						"| aStateOrException |",						"aStateOrException := [ :k | ",						"                     aState unifier",						"\t                     continuation: k;",						"\t                     value: left value: right ] valueWithExitUnary.",						"^ aStateOrException onState: aState afterUnificationByUnify: self"					],					"isTestMethod" : false,					"category" : "running",					"comment" : [ ],					"hash" : 41974730,					"argumentNames" : [						"aState",						"aGoal"					]				}			}		},		"unifyo" : {			"senders" : [				"ACL>>#rewriting:rewritten:focusAST:focusVar:do:",				"ACL>>#focus:premise:do:",				"ACL>>#valueWithArguments:",				"ArithTheory>>#greaterThanOneo",				"ArithTheory>>#positiveo",				"ArithTheory>>#bitAndo",				"ArithTheory>>#oneo",				"ArithTheory>>#zeroo",				"ArithTheory>>#bitXoro",				"ArithTheory>>#addero",				"BaselineOfMicroKanren>>#scriptExportCoreMessagesForDoc",				"BlockClosure>>#'<~~~>'",				"BlockClosure>>#'<~~>'",				"BlockClosure>>#'<~>'",				"ChildTestPredicate>>#goal",				"GoalTest>>#nats:stage:offset:",				"GoalTest>>#testCutAndFail",				"GoalTest>>#testConjDisj",				"GoalTest>>#testConjFalseThreeWithVar",				"GoalTest>>#testDisjFourWithVarOrThreeWithVar",				"GoalTest>>#testTablingAnswersInsteadOfSubstitutions",				"GoalTest>>#testConso",				"GoalTest>>#teaCupSpoon:",				"GoalTest>>#testTablingMutuallyRecursive",				"GoalTest>>#teacup:",				"GoalTest>>#fives:",				"GoalTest>>#testUnifySharing",				"GoalTest>>#testUnifyThreeWithThree",				"GoalTest>>#testAlphaRuleo",				"GoalTest>>#testConde",				"GoalTest>>#testConjFailingSharing",				"GoalTest>>#testDisjThreeThenFourFive",				"GoalTest>>#testUnifySymmetryFourWithVar",				"GoalTest>>#testCutUnifyThenFail",				"GoalTest>>#testUnifyWithTopmostWithoutSharing",				"GoalTest>>#testDisjThreeWithVarOrFourWithVar",				"GoalTest>>#testUnifyFourWithThree",				"GoalTest>>#testDisjThreeWithThreeOrFourWithVar",				"GoalTest>>#testConjTrueThreeWithThree",				"GoalTest>>#testDisjThreeWithVarOrThreeWithVar",				"GoalTest>>#testConjSucceedingSharing",				"GoalTest>>#testConjThreeFour",				"GoalTest>>#testDisjThreeFourThenFive",				"GoalTest>>#testCutOverMultipleRules",				"GoalTest>>#testUnifyWithTopmostSharing",				"GoalTest>>#testUnifyWithTopmostSharingWithRepetition",				"GoalTest>>#testConjSymmetry",				"GoalTest>>#testConjThreeFresh",				"GoalTest>>#swappedfives:",				"GoalTest>>#testUnifySymmetryVarWithFour",				"GoalTest>>#testConjThreeFourWithTwoVars",				"GoalTest>>#testCut",				"Graph>>#asGoal",				"MKPredicateFives>>#goal",				"MKPredicateFooForBag>>#goal",				"MKPredicateSexpAppendo>>#goal",				"MKPredicateSexpConso>>#goal",				"McCullochAssociateRule>>#relateo",				"McCullochIdentityRule>>#relateo",				"McCullochRepeatRule>>#relateo",				"McCullochReverseRule>>#relateo",				"McCullochRightHalfAssociateRule>>#relateo",				"Predicate>>#unifyº",				"PredicateBagOfo>>#onState:",				"PredicateFindAllo>>#onState:",				"RBNodePredicatesTest>>#testSenderoForBlockClosure",				"RBNodePredicatesTest>>#testSenderoForCompiledMethod",				"RBNodeTheoryTest>>#testUnifyConsIsAtomBlock",				"RBNodeTheoryTest>>#testUnifyEmptyBlock",				"RBNodeTheoryTest>>#testUnifyLiteralBlock",				"RBProgramNodeSendsoVisitor>>#visitMessageNode:",				"RBProgramNodeSendsoVisitor>>#visitLogicVariableNode:",				"Reuse>>#onState:",				"SexpTheory>>#nilo",				"TheLittleProver>>#unifyº",				"TheLittleProver>>#cdrOfConsº",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_46_variablesBindingByEqualSame",				"TheLittleProverTest>>#test_chapter_01_OldGamesNewRules_frame_46_variablesBindingManually"			],			"implementors" : {				"Object" : {					"sourceCode" : [						"unifyo",						"",						"\t^ [ :anObject | self unifyWith: anObject ]"					],					"body" : [						"^ [ :anObject | self unifyWith: anObject ]"					],					"isTestMethod" : false,					"category" : "*MicroKanren-core",					"comment" : [ ],					"hash" : 1598365,					"argumentNames" : [ ]				}			}		},		"unifyWith:" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreMessagesForDoc",				"Object>>#unifyo"			],			"implementors" : {				"Object" : {					"sourceCode" : [						"unifyWith: another",						"",						"\t^ Unify new",						"\t\t  left: self;",						"\t\t  right: another;",						"\t\t  yourself"					],					"body" : [						"^ Unify new",						"\t  left: self;",						"\t  right: another;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "*MicroKanren-core",					"comment" : [ ],					"hash" : 18638835,					"argumentNames" : [						"another"					]				}			}		},		"asReifiedWithVarClass:" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreMessagesForDoc",				"Integer>>#asReifiedVar",				"Integer>>#asVar"			],			"implementors" : {				"Integer" : {					"sourceCode" : [						"asReifiedWithVarClass: aClass",						"",						"\t^ aClass new",						"\t\t  id: self;",						"\t\t  yourself"					],					"body" : [						"^ aClass new",						"\t  id: self;",						"\t  yourself"					],					"isTestMethod" : false,					"category" : "*MicroKanren-core",					"comment" : [ ],					"hash" : 18846717,					"argumentNames" : [						"aClass"					]				}			}		},		"walk:" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreMessagesForDoc",				"Reifier>>#value:",				"State>>#gtInspectorItemsInGLMPresentation:",				"Unifier>>#value:value:",				"Walker>>#value:",				"Walker>>#forObject:"			],			"implementors" : {				"State" : {					"sourceCode" : [						"walk: anObj",						"",						"\t^ substitution walk: anObj fromState: self"					],					"body" : [						"^ substitution walk: anObj fromState: self"					],					"isTestMethod" : false,					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 24664273,					"argumentNames" : [						"anObj"					]				}			}		},		"popGoalFromPathOfState:forConj:" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreMessagesForDoc",				"Goal>>#onState:forGoal:fromConj:"			],			"implementors" : {				"Succeed" : {					"sourceCode" : [						"popGoalFromPathOfState: aState forConj: aGoal",						"",						"\taState path: aState path nextLink"					],					"body" : [						"aState path: aState path nextLink"					],					"isTestMethod" : false,					"category" : "as yet unclassified",					"comment" : [ ],					"hash" : 41710256,					"argumentNames" : [						"aState",						"aGoal"					]				},				"Goal" : {					"sourceCode" : [						"popGoalFromPathOfState: aState forConj: aGoal",						"",						"\t\"No action for the generic goal because if I am the top of `aState`'s goal path,",						"\t I have to remain there with respect to the computation running in the",						"\t conjunction goal `aGoal`.\"",						"",						"\t"					],					"body" : [ ],					"isTestMethod" : false,					"category" : "as yet unclassified",					"comment" : [						"No action for the generic goal because if I am the top of `aState`'s goal path,",						"\t I have to remain there with respect to the computation running in the",						"\t conjunction goal `aGoal`."					],					"hash" : 41706892,					"argumentNames" : [						"aState",						"aGoal"					]				}			}		},		"fail" : {			"senders" : [				"BaselineOfMicroKanren>>#scriptExportCoreMessagesForDoc",				"ClapMatchesTest>>#testSubcommandAccessing",				"CollectionRootTest>>#testCollectThenDoOnEmpty",				"CollectionRootTest>>#testCollectThenSelectOnEmpty",				"CollectionRootTest>>#testRejectThenDoOnEmpty",				"CollectionRootTest>>#testSelectNoneThenDo",				"CollectionRootTest>>#testCollectOnEmpty",				"CollectionRootTest>>#testRejectThenCollectEmpty",				"CollectionRootTest>>#testSelectNoneThenCollect",				"CollectionRootTest>>#testRejectAllThenCollect",				"CollectionRootTest>>#testSelectThenDoOnEmpty",				"CollectionRootTest>>#testRejectAllThenDo",				"CollectionRootTest>>#testSelectThenCollectOnEmpty",				"CollectionRootTest>>#testSelectOnEmpty",				"DTTestsRunnerResult>>#buildTreeForUIByClasses",				"DTTestsRunnerResult>>#buildTreeForUIByClassesAndProtocol",				"DTTestsRunnerResult>>#buildTreeForUI",				"DirectoryEntryTest>>#testIfAbsent",				"DirectoryEntryTest>>#testIfExists",				"DoubleLinkedListTest>>#testEmpty",				"EpApplyPreviewerTest>>#testTraitModification",				"EpLogTest>>#testEntryReferences",				"EpLogTest>>#testFirstEntryIfAbsent",				"FFIStringCalloutTest>>#testStringReturnWithMandatoryEncodingWithoutExplicitEncodingShouldRaiseError",				"FFIStringCalloutTest>>#testMandatoryEncodingWithoutExplicitEncodingShouldRaiseError",				"FFIStringCalloutTest>>#testConflictingEncodingOptionShouldRaiseError",				"FileLocatorTest>>#testIfExists",				"FileLocatorTest>>#testIfAbsent",				"FileReferenceTest>>#testIfExists",				"FileReferenceTest>>#testIndicator",				"FileReferenceTest>>#testIfAbsent",				"FileSystemTest>>#testFileNames",				"FluidClassBuilderTest>>#testInstallSimplePoint2",				"FluidClassBuilderTest>>#testInstallMinimalMockClass",				"FluidTraitBuilderTest>>#testInstallSimplePoint2",				"FluidTraitBuilderTest>>#testInstallMinimalMockClass",				"GLMMorphicTest>>#findSatisfying:in:",				"GLMMorphicTest>>#findLastSatisfying:in:",				"GLMNestedBrowserTest>>#testCondition",				"GLMPaneTest>>#testCopyAnnouncements",				"GLMPaneTest>>#testCopyAnnouncementsDoNotRaise",				"GLMPresentationTest>>#testCopyAnnouncementsDoNotRaise",				"LRUCacheTest>>#testOneHitTwice",				"LRUCacheTest>>#testAdditionInIfAbsentPut",				"LRUCacheTest>>#test5kClasses",				"LRUCacheTest>>#testFixedAccess",				"LRUCacheTest>>#testThreeHitSameOne",				"LRUCacheTest>>#testRemoveAll",				"LRUCacheTest>>#testTenThreadSafe",				"LRUCacheTest>>#testEviction",				"LRUCacheTest>>#testOneHit",				"LRUCacheTest>>#testRandomAccess",				"LRUCacheTest>>#testCustomWeight",				"LRUCacheTest>>#testRemoveOneOfThree",				"LRUCacheTest>>#testTen",				"LRUCacheTest>>#testThree",				"LRUCacheTest>>#testTwo",				"LRUCacheTest>>#testEmpty",				"LinkedListTest>>#testRejectThenDoOnEmpty",				"LinkedListTest>>#testSelectThenDoOnEmpty",				"LinkedListTest>>#testRejectAllThenDo",				"LinkedListTest>>#test14removeIfAbsent",				"LinkedListTest>>#testCollectThenDoOnEmpty",				"LinkedListTest>>#testCollectOnEmpty",				"LinkedListTest>>#testSelectNoneThenCollect",				"LinkedListTest>>#testSelectThenCollectOnEmpty",				"LinkedListTest>>#testSelectOnEmpty",				"LinkedListTest>>#testCollectThenSelectOnEmpty",				"LinkedListTest>>#testSelectNoneThenDo",				"LinkedListTest>>#testRejectThenCollectEmpty",				"LinkedListTest>>#testRejectAllThenCollect",				"MCWorkingCopyForExtensionsTest>>#testAddingExtensionMethodNotMatchingPackage",				"NumberParser>>#nextInteger",				"OCASTClosureAnalyzerTest>>#testOptimizedBlockWriteInNestedBlockCase3",				"OCASTClosureAnalyzerTest>>#testOptimizedBlockWriteInNestedBlockCase4",				"OCCompilerTest>>#testInstanceVariableShadowing",				"OCCompilerTest>>#testNotInteractiveNoShadowing",				"OCCompilerTest>>#testNoShadowing",				"OCCompilerTest>>#testReservedNameAsBlockArgumentShadowing",				"OCCompilerTest>>#testSiblingBlocksTempShadowing",				"OCCompilerTest>>#testInBlockTempInstanceVariableShadowing",				"OCCompilerTest>>#testAssignmentOfGlobalVarBinding",				"OCCompilerTest>>#testAssignmentOfClassNameBinding",				"OCCompilerTest>>#testInBlockTempShadowing",				"OCCompilerTest>>#testNotInteractiveInBlockTempShadowing",				"OCCompilerTest>>#testNotInteractiveSiblingBlocksInstanceVariableShadowing",				"OCCompilerTest>>#testNotInteractiveSiblingBlocksTempShadowing",				"OCCompilerTest>>#testReservedNameAsMethodArgumentShadowing",				"OCCompilerTest>>#testSiblingBlocksInstanceVariableShadowing",				"OCCompilerTest>>#testTraitTempShadowing",				"OCCompilerTest>>#testInBlockTempArgumentShadowing",				"OCCompilerTest>>#testNotInteractiveInBlockTempInstanceVariableShadowing",				"OmStoreTest>>#testEntryReferences",				"OmStoreTest>>#testFirstEntryIfAbsent",				"OrderedDictionaryTest>>#testAssociationAtIfAbsent",				"OrderedDictionaryTest>>#testKeyAtIdentityValueIfAbsent",				"OrderedDictionaryTest>>#testIdentityIndexOfKeyIfAbsent",				"OrderedDictionaryTest>>#testKeyAtIndexIfAbsent",				"OrderedDictionaryTest>>#testAtIfPresent",				"OrderedDictionaryTest>>#testRemoveKeyIfAbsent",				"OrderedDictionaryTest>>#testKeyAtValueIfAbsent",				"OrderedDictionaryTest>>#testAssociationAtIfPresent",				"OrderedDictionaryTest>>#testAtIfPresentIfAbsentPut",				"OrderedDictionaryTest>>#testIndexOfKeyIfAbsent",				"OrderedDictionaryTest>>#testAtIfAbsentPut",				"OrderedDictionaryTest>>#testAtIfPresentIfAbsent",				"OrderedDictionaryTest>>#testAtIfAbsent",				"PharoSyntaxTutorialTest>>#testDivideTwoByZeroSignalsZeroDivide",				"SUnitTest>>#testFail",				"SUnitTest>>#raiseDeprecationWarnings",				"SUnitTest>>#testDefects",				"SUnitTest>>#testFileOutResult",				"SUnitTest>>#testSuite",				"SUnitTest>>#testErrorShouldResetWatchDog",				"ShClassInstallerTest>>#testDuplicatedInstanceVariableInSuperclassMetaclass",				"ShClassInstallerTest>>#testDuplicatedInstanceVariableInSuperclass",				"ShClassInstallerTest>>#testDuplicatedInstanceVariable",				"SimpleTestResourceTestCase>>#testResourceInitRelease",				"SimpleTestResourceTestCase>>#testRunSuiteWithResource",				"SourceFileArrayTest>>#testWriteSourceWritesInGivenSourceFileArrayWithFlushDefering",				"SourceFileArrayTest>>#testWriteSourceWritesInGivenSourceFileArray",				"SourceFileArrayTest>>#testWriteToBufferedStream",				"SpAbstractListAdapterMultipleSelectionTest>>#testSubscribeToEventDoesNotRaiseEvent",				"SpAbstractListAdapterSingleSelectionTest>>#testSubscribeToEventDoesNotRaiseEvent",				"SpListPresenterMultipleSelectionTest>>#testSetSelectIndexOutsideRangeDoesNotModifySelection",				"SpListPresenterMultipleSelectionTest>>#testSetSelectItemOutsideRangeDoesNotModifySelection",				"SpTreeTablePresenterMultipleSelectionTest>>#testSetSelectInvalidPathDoesNotModifySelection",				"SpTreeTablePresenterMultipleSelectionTest>>#testSetSelectItemOutsideRangeDoesNotModifySelection",				"StTestDebuggerProvider>>#produceTestFailure",				"StringTest>>#testAsClassIfAbsent",				"StringTest>>#testAsClassIfPresent",				"SymbolTest>>#testAsClassIfAbsent",				"SymbolTest>>#testAsClassIfPresent",				"TIterateTest>>#testCollectThenDoOnEmpty",				"TIterateTest>>#testCollectThenSelectOnEmpty",				"TIterateTest>>#testRejectThenCollectEmpty",				"TIterateTest>>#testRejectThenDoOnEmpty",				"TIterateTest>>#testSelectNoneThenCollect",				"TIterateTest>>#testRejectAllThenCollect",				"TIterateTest>>#testSelectNoneThenDo",				"TIterateTest>>#testRejectAllThenDo",				"TIterateTest>>#testSelectThenDoOnEmpty",				"TIterateTest>>#testSelectThenCollectOnEmpty",				"TIterateTest>>#testSelectOnEmpty",				"TIterateTest>>#testCollectOnEmpty",				"TTLCacheTest>>#testExpiring",				"WeakValueDictionaryTest>>#testKeysAndValuesDoWithGarbageCollectedValue",				"ZnClientTest>>#testIfFailNotFound",				"ZnClientTest>>#testIfFailWrongType",				"ZnClientTest>>#testIfFailNonExistingHost",				"ZnClientTest>>#testGetGeoIP",				"ZnClientTest>>#testProgressNoIfFail",				"ZnUrlTest>>#testQueryAccessing"			],			"implementors" : {				"DTTestResultType class" : {					"sourceCode" : [						"fail",						"",						"\t^ DTFail new"					],					"body" : [						"^ DTFail new"					],					"isTestMethod" : false,					"category" : "factory",					"comment" : [ ],					"hash" : 3771183,					"argumentNames" : [ ]				},				"RBSmalllintTestLocalMethodsSameThanTraitObject" : {					"sourceCode" : [						"fail",						"",						"\t^ self assert: false"					],					"body" : [						"^ self assert: false"					],					"isTestMethod" : false,					"category" : "asserting",					"comment" : [ ],					"hash" : 5041870,					"argumentNames" : [ ]				},				"TestAsserter" : {					"sourceCode" : [						"fail",						"",						"\t^ self assert: false"					],					"body" : [						"^ self assert: false"					],					"isTestMethod" : false,					"category" : "asserting",					"comment" : [ ],					"hash" : 1165774,					"argumentNames" : [ ]				},				"NumberParser" : {					"sourceCode" : [						"fail",						"",						"\tfailBlock ifNotNil: [ ^ failBlock value ].",						"\tself error: 'Reading a number failed'"					],					"body" : [						"failBlock ifNotNil: [ ^ failBlock value ].",						"self error: 'Reading a number failed'"					],					"isTestMethod" : false,					"category" : "error",					"comment" : [ ],					"hash" : 1873671,					"argumentNames" : [ ]				},				"TAssertable" : {					"sourceCode" : [						"fail",						"",						"\t^ self assert: false"					],					"body" : [						"^ self assert: false"					],					"isTestMethod" : false,					"category" : "asserting",					"comment" : [ ],					"hash" : 1179086,					"argumentNames" : [ ]				}			}		}	}}